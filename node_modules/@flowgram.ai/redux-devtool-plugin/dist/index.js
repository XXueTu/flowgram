"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result) __defProp(target, key, result);
  return result;
};

// src/index.ts
var src_exports = {};
__export(src_exports, {
  ECSConnector: () => ECSConnector,
  createReduxDevToolPlugin: () => createReduxDevToolPlugin
});
module.exports = __toCommonJS(src_exports);

// src/create-redux-devtool-plugin.ts
var import_core2 = require("@flowgram.ai/core");

// src/connectors/ecs-connector.ts
var import_inversify2 = require("inversify");
var import_core = require("@flowgram.ai/core");

// src/connectors/base.ts
var import_inversify = require("inversify");
var BaseConnector = class {
  constructor() {
    this.devTools = window.__REDUX_DEVTOOLS_EXTENSION__?.connect({
      name: this.getName()
    });
  }
  init() {
    if (this.devTools) {
      this.devTools.init(this.getState());
      this.devTools.subscribe((_msg) => {
        if (_msg?.payload?.type === "COMMIT") {
          this.devTools.init(this.getState());
        }
      });
      this.onInit();
    }
  }
  send(action, state) {
    if (this.devTools) {
      this.devTools.send(action, state || this.getState());
    }
  }
};
__decorateClass([
  (0, import_inversify.postConstruct)()
], BaseConnector.prototype, "init", 1);
BaseConnector = __decorateClass([
  (0, import_inversify.injectable)()
], BaseConnector);

// src/connectors/ecs-connector.ts
var ECSConnector = class extends BaseConnector {
  getName() {
    return "@flowgram.ai/EntityManager";
  }
  getState() {
    return this.entityManager.storeState({ configOnly: false });
  }
  onInit() {
    this.entityManager.onEntityLifeCycleChange((action) => {
      this.send(`${action.type}/${action.entity.type}/${action.entity.id}`);
    });
  }
};
__decorateClass([
  (0, import_inversify2.inject)(import_core.EntityManager)
], ECSConnector.prototype, "entityManager", 2);
ECSConnector = __decorateClass([
  (0, import_inversify2.injectable)()
], ECSConnector);

// src/connectors/variable-connector.ts
var import_inversify3 = require("inversify");
var import_variable_core = require("@flowgram.ai/variable-core");
var VariableConnector = class extends BaseConnector {
  constructor() {
    super(...arguments);
    /**
     * 缓存变量状态
     */
    this.scopes = {};
  }
  getName() {
    return "@flowgram.ai/VariableEngine";
  }
  getState() {
    return { scopes: this.scopes, variables: this.variableEngine.globalVariableTable.variables };
  }
  getScopeState(scope) {
    return {
      ast: scope?.ast.toJSON(),
      output: scope.output.variables,
      available: scope.available.variables
    };
  }
  onInit() {
    this.variableEngine.onScopeChange((action) => {
      const { scope, type } = action;
      if (type === "delete") {
        delete this.scopes[String(scope.id)];
      } else {
        this.scopes = {
          ...this.scopes,
          [scope.id]: this.getScopeState(scope)
        };
      }
      this.send(`${type}/${String(scope.id)}`);
    });
  }
};
__decorateClass([
  (0, import_inversify3.inject)(import_variable_core.VariableEngine)
], VariableConnector.prototype, "variableEngine", 2);
VariableConnector = __decorateClass([
  (0, import_inversify3.injectable)()
], VariableConnector);

// src/create-redux-devtool-plugin.ts
var createReduxDevToolPlugin = (0, import_core2.definePluginCreator)({
  onBind({ bind }, opts) {
    const { enable } = opts;
    if (!enable) {
      return;
    }
    bind(ECSConnector).toSelf().inSingletonScope();
    bind(VariableConnector).toSelf().inSingletonScope();
  },
  onInit(ctx, opts) {
    const { enable, ecs = true, variable = false } = opts;
    if (!enable) {
      return;
    }
    if (ecs) {
      ctx.get(ECSConnector);
    }
    if (variable) {
      ctx.get(VariableConnector);
    }
  }
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ECSConnector,
  createReduxDevToolPlugin
});
//# sourceMappingURL=index.js.map