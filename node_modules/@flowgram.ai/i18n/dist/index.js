"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  I18n: () => I18n
});
module.exports = __toCommonJS(src_exports);
var import_utils = require("@flowgram.ai/utils");

// src/i18n/zh-CN.ts
var zh_CN_default = {
  languageId: "zh-CN",
  languageName: "Chinese",
  localizedLanguageName: "\u4E2D\u6587(\u4E2D\u56FD)",
  contents: {
    Yes: "\u662F",
    No: "\u5426"
  }
};

// src/i18n/en-US.ts
var en_US_default = {
  languageId: "en-US",
  languageName: "English",
  localizedLanguageName: "English",
  contents: {
    Yes: "Yes",
    No: "No"
  }
};

// src/index.ts
var I18nImpl = class {
  constructor(languages) {
    this._languages = /* @__PURE__ */ new Map();
    this._localLanguage = "en-US";
    this._onLanguageChangeEmitter = new import_utils.Emitter();
    this.onLanguageChange = this._onLanguageChangeEmitter.event;
    languages.forEach((language) => this.addLanguage(language));
  }
  /**
   * TODO support replace
   * @param key
   * @param options
   */
  t(key, options) {
    const contents = this._languages.get(this._localLanguage)?.contents || {};
    if (contents[key]) {
      return contents[key];
    }
    if (options?.disableReturnKey) return "";
    return key;
  }
  getLocalLanguage() {
    return this._localLanguage;
  }
  setLocalLanguage(langId) {
    if (langId === this._localLanguage) return;
    this._localLanguage = langId;
    this._onLanguageChangeEmitter.fire(langId);
  }
  getLangauges() {
    return this._languages;
  }
  addLanguage(newLanguage) {
    let oldLanguage = this._languages.get(newLanguage.languageId);
    if (oldLanguage) {
      this._languages.set(newLanguage.languageId, {
        ...oldLanguage,
        ...newLanguage,
        contents: {
          ...oldLanguage.contents,
          ...newLanguage.contents
        }
      });
    } else {
      this._languages.set(newLanguage.languageId, newLanguage);
    }
  }
};
var I18n = new I18nImpl([en_US_default, zh_CN_default]);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  I18n
});
//# sourceMappingURL=index.js.map