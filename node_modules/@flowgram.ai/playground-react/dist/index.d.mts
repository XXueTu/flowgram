export { Disposable, Emitter, Event, useRefresh } from '@flowgram.ai/utils';
import { PlaygroundInteractiveType, PluginContext, PlaygroundLayerOptions, PluginBindConfig, Plugin, LayerRegistry, PluginsProvider } from '@flowgram.ai/core';
export * from '@flowgram.ai/core';
import React from 'react';
import { interfaces } from 'inversify';
import { ShortcutsRegistry } from '@flowgram.ai/shortcuts-plugin';
import { BackgroundLayerOptions } from '@flowgram.ai/background-plugin';

interface PlaygroundToolsPropsType {
    /**
     * 最大缩放比，默认 2
     */
    maxZoom?: number;
    /**
     * 最小缩放比，默认 0.25
     */
    minZoom?: number;
}
interface PlaygroundTools {
    /**
     * 缩放 zoom 大小比例
     */
    zoom: number;
    /**
     * 放大
     */
    zoomin: (easing?: boolean) => void;
    /**
     * 缩小
     */
    zoomout: (easing?: boolean) => void;
    /**
     * 设置缩放比例
     * @param zoom
     */
    updateZoom: (newZoom: number, easing?: boolean, easingDuration?: number) => void;
    /**
     * 当前的交互模式, 鼠标友好模式 和 触摸板模式
     */
    interactiveType: PlaygroundInteractiveType;
    /**
     * 切换交互模式
     */
    toggleIneractiveType: () => void;
}
declare function usePlaygroundTools(props?: PlaygroundToolsPropsType): PlaygroundTools;

/**
 * 画布配置配置
 */
interface PlaygroundReactProps<CTX extends PluginContext = PluginContext> {
    /**
     * 背景开关，默认打开
     */
    background?: BackgroundLayerOptions | boolean;
    /**
     * 画布相关配置
     */
    playground?: PlaygroundLayerOptions & {
        autoFocus?: boolean;
        autoResize?: boolean;
    };
    /**
     * 注册快捷键
     */
    shortcuts?: (shortcutsRegistry: ShortcutsRegistry, ctx: CTX) => void;
    /**
     * 插件 IOC 注册，等价于 containerModule
     */
    onBind?: (bindConfig: PluginBindConfig) => void;
    /**
     * 画布模块注册阶段
     */
    onInit?: (ctx: CTX) => void;
    /**
     * 画布事件注册阶段 (一般用于注册 dom 事件)
     */
    onReady?: (ctx: CTX) => void;
    /**
     * 画布所有 layer 第一次渲染完成后触发
     */
    onAllLayersRendered?: (ctx: CTX) => void;
    /**
     * 画布销毁阶段
     */
    onDispose?: (ctx: CTX) => void;
    /**
     * 插件扩展
     * @param ctx
     */
    plugins?: (ctx: CTX) => Plugin[];
    /**
     * 注册 layer
     */
    layers?: LayerRegistry[];
    /**
     * IOC 模块，用于更底层的插件扩展
     */
    containerModules?: interfaces.ContainerModule[];
    children?: React.ReactNode;
    /**
     * 父 IOC 容器
     */
    parentContainer?: interfaces.Container;
}

declare function createPlaygroundReactPreset<CTX extends PluginContext = PluginContext>(opts: PlaygroundReactProps<CTX>, plugins?: Plugin[]): PluginsProvider<CTX>;

type PlaygroundRef = PluginContext;
declare const PlaygroundReact: React.ForwardRefExoticComponent<PlaygroundReactProps<PluginContext> & React.RefAttributes<PluginContext>>;

interface PlaygroundReactContentProps {
    className?: string;
    style?: React.CSSProperties;
    children?: React.ReactNode;
}

declare const PlaygroundReactContent: React.FC<PlaygroundReactContentProps>;

export { PlaygroundReact, PlaygroundReactContent, type PlaygroundReactContentProps, type PlaygroundReactProps, type PlaygroundRef, createPlaygroundReactPreset, usePlaygroundTools };
