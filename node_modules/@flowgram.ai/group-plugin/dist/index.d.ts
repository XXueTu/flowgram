import { FlowNodeEntity, FlowGroupController, FlowDocument, FlowGroupService, FlowDocumentTransformerEntity, FlowNodeRenderData, FlowNodeTransformData, FlowNodeRegistry } from '@flowgram.ai/document';
export { FlowGroupController } from '@flowgram.ai/document';
import { FlowRendererRegistry } from '@flowgram.ai/renderer';
import * as _flowgram_ai_core from '@flowgram.ai/core';
import { LayerOptions, PluginContext, Layer } from '@flowgram.ai/core';
import { FC, CSSProperties } from 'react';

declare enum GroupRenderer {
    GroupRender = "group_render",
    GroupBox = "group_box"
}
declare const PositionConfig: {
    paddingWithNote: number;
    padding: number;
    paddingWithAddLabel: number;
    headerHeight: number;
};
declare enum GroupPluginRegister {
    GroupNode = "registerGroupNode",
    Render = "registerRender",
    Layer = "registerLayer",
    CleanGroups = "registerCleanGroups"
}

type IGroupBox = FC<{
    groupNode: FlowNodeEntity;
    backgroundStyle?: (groupController: FlowGroupController) => CSSProperties;
}>;
type IGroupRender = FC<{
    groupNode: FlowNodeEntity;
    GroupNode: IGroupNode;
    GroupBoxHeader: IGroupBoxHeader;
}>;
type IGroupNode = FC<{
    groupNode: FlowNodeEntity;
    groupController: FlowGroupController;
}>;
type IGroupBoxHeader = FC<{
    groupNode: FlowNodeEntity;
    groupController: FlowGroupController;
}>;
interface GroupsLayerOptions extends LayerOptions {
    groupBoxStyle?: (groupController: FlowGroupController) => CSSProperties;
}
type IGroupPluginRegister = (ctx: PluginContext, opts: CreateGroupPluginOptions) => void;
type CreateGroupPluginOptions = GroupsLayerOptions & {
    components?: {
        GroupNode: IGroupNode;
        GroupBoxHeader: IGroupBoxHeader;
    };
    registers?: {
        [key in GroupPluginRegister]?: IGroupPluginRegister | boolean;
    };
};

declare class GroupsLayer extends Layer<GroupsLayerOptions> {
    readonly node: HTMLElement;
    protected document: FlowDocument;
    protected readonly rendererRegistry: FlowRendererRegistry;
    protected readonly groupService: FlowGroupService;
    readonly documentTransformer: FlowDocumentTransformerEntity;
    renderStates: FlowNodeRenderData[];
    transforms: FlowNodeTransformData[];
    private readonly className;
    constructor();
    /** 缩放 */
    onZoom(scale: number): void;
    render(): JSX.Element;
    /** 渲染分组 */
    protected renderGroups(): JSX.Element;
    /** 所有分组 */
    protected get groups(): FlowGroupController[];
    protected get renderer(): IGroupBox;
}

/**
 * 分组插件
 */
declare const createGroupPlugin: _flowgram_ai_core.PluginCreator<CreateGroupPluginOptions>;

declare const GroupRegister: FlowNodeRegistry;

declare const GroupRender: IGroupRender;

declare const GroupBox: IGroupBox;

export { type CreateGroupPluginOptions, GroupBox, GroupPluginRegister, GroupRegister, GroupRender, GroupRenderer, GroupsLayer, type GroupsLayerOptions, type IGroupBox, type IGroupBoxHeader, type IGroupNode, type IGroupPluginRegister, type IGroupRender, PositionConfig, createGroupPlugin };
