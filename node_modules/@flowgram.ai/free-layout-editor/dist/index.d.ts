import { EditorPluginContext, ClipboardService, SelectionService, EditorProps, PluginsProvider } from '@flowgram.ai/editor';
export * from '@flowgram.ai/editor';
import { WorkflowDocument, WorkflowJSON, WorkflowNodeRegistry, LineColor, WorkflowContentChangeEvent, WorkflowPortEntity, WorkflowLinesManager, WorkflowLineEntity, onDragLineEndParams, LineRenderType, WorkflowNodeEntity, WorkflowLinePortInfo, EditorCursorState, InteractiveType } from '@flowgram.ai/free-layout-core';
export * from '@flowgram.ai/free-layout-core';
import React from 'react';
import { SelectBoxPluginOptions } from '@flowgram.ai/select-box-plugin';
import { HistoryService } from '@flowgram.ai/history';
export * from '@flowgram.ai/free-stack-plugin';
export { WorkflowPortRender, WorkflowPortRenderProps } from '@flowgram.ai/free-lines-plugin';
import { LayoutOptions } from '@flowgram.ai/free-auto-layout-plugin';
export * from '@flowgram.ai/free-history-plugin';

declare const FreeLayoutPluginContext: symbol;
interface FreeLayoutPluginContext extends EditorPluginContext {
    /**
     * 文档
     */
    document: WorkflowDocument;
    clipboard: ClipboardService;
    selection: SelectionService;
    history: HistoryService;
}
/**
 * 自由布局配置
 */
interface FreeLayoutProps extends EditorProps<FreeLayoutPluginContext, WorkflowJSON> {
    selectBox?: SelectBoxPluginOptions;
    /**
     * 节点定义
     */
    nodeRegistries?: WorkflowNodeRegistry[];
    /**
     * 默认是否展开所有节点
     */
    allNodesDefaultExpanded?: boolean;
    cursors?: {
        grab?: string;
        grabbing?: string;
    };
    /**
     * 线条颜色
     */
    lineColor?: LineColor;
    /**
     * 画布内容更新
     */
    onContentChange?: (ctx: FreeLayoutPluginContext, event: WorkflowContentChangeEvent) => void;
    /**
     * 判断线条是否标红
     * @param ctx
     * @param fromPort
     * @param toPort
     * @param lines
     */
    isErrorLine?: (ctx: FreeLayoutPluginContext, fromPort: WorkflowPortEntity, toPort: WorkflowPortEntity | undefined, lines: WorkflowLinesManager) => boolean;
    /**
     * 判断端口是否标红
     * @param ctx
     * @param port
     */
    isErrorPort?: (ctx: FreeLayoutPluginContext, port: WorkflowPortEntity) => boolean;
    /**
     * 判断端口是否禁用
     * @param ctx
     * @param port
     */
    isDisabledPort?: (ctx: FreeLayoutPluginContext, port: WorkflowPortEntity) => boolean;
    /**
     * 判断线条箭头是否反转
     * @param ctx
     * @param line
     */
    isReverseLine?: (ctx: FreeLayoutPluginContext, line: WorkflowLineEntity) => boolean;
    /**
     * 判断线条是否隐藏箭头
     * @param ctx
     * @param line
     */
    isHideArrowLine?: (ctx: FreeLayoutPluginContext, line: WorkflowLineEntity) => boolean;
    /**
     * 判断线条是否展示流动效果
     * @param ctx
     * @param line
     */
    isFlowingLine?: (ctx: FreeLayoutPluginContext, line: WorkflowLineEntity) => boolean;
    /**
     * 判断线条是否禁用
     * @param ctx
     * @param line
     */
    isDisabledLine?: (ctx: FreeLayoutPluginContext, line: WorkflowLineEntity) => boolean;
    /**
     * 判断线条是否竖向
     * @param ctx
     * @param line
     */
    isVerticalLine?: (ctx: FreeLayoutPluginContext, line: WorkflowLineEntity) => boolean;
    /**
     * 拖拽线条结束
     * @param ctx
     * @param params
     */
    onDragLineEnd?: (ctx: FreeLayoutPluginContext, params: onDragLineEndParams) => Promise<void>;
    /**
     * 设置线条渲染器类型
     * @param ctx
     * @param line
     */
    setLineRenderType?: (ctx: FreeLayoutPluginContext, line: WorkflowLineEntity) => LineRenderType | undefined;
    /**
     * 设置线条样式
     * @param ctx
     * @param line
     */
    setLineClassName?: (ctx: FreeLayoutPluginContext, line: WorkflowLineEntity) => string | undefined;
    /**
     * 是否允许创建线条
     * @param ctx
     * @param fromPort - 开始点
     * @param toPort - 目标点
     */
    canAddLine?: (ctx: FreeLayoutPluginContext, fromPort: WorkflowPortEntity, toPort: WorkflowPortEntity, lines: WorkflowLinesManager, silent?: boolean) => boolean;
    /**
     * 是否允许删除节点
     * @param ctx
     * @param node - 目标节点
     * @param silent - 如果为false，可以加 toast 弹窗
     */
    canDeleteNode?: (ctx: FreeLayoutPluginContext, node: WorkflowNodeEntity, silent?: boolean) => boolean;
    /**
     *
     * 是否允许删除线条
     * @param ctx
     * @param line - 目标线条
     * @param newLineInfo - 新的线条信息
     * @param silent - 如果为false，可以加 toast 弹窗
     */
    canDeleteLine?: (ctx: FreeLayoutPluginContext, line: WorkflowLineEntity, newLineInfo?: Required<WorkflowLinePortInfo>, silent?: boolean) => boolean;
    /**
     * 是否允许重置线条
     * @param fromPort - 开始点
     * @param oldToPort - 旧的连接点
     * @param newToPort - 新的连接点
     * @param lines - 线条管理器
     */
    canResetLine?: (ctx: FreeLayoutPluginContext, fromPort: WorkflowPortEntity, oldToPort: WorkflowPortEntity, newToPort: WorkflowPortEntity, lines: WorkflowLinesManager) => boolean;
}
declare namespace FreeLayoutProps {
    /**
     * 默认配置
     */
    const DEFAULT: FreeLayoutProps;
}

declare function createFreeLayoutPreset(opts: FreeLayoutProps): PluginsProvider<FreeLayoutPluginContext>;

declare const FreeLayoutEditorProvider: React.ForwardRefExoticComponent<FreeLayoutProps & React.RefAttributes<FreeLayoutPluginContext>>;

interface WorkflowNodeProps {
    node: WorkflowNodeEntity;
    className?: string;
    style?: React.CSSProperties;
    children?: React.ReactNode | null;
    portClassName?: string;
    portStyle?: React.CSSProperties;
    onPortClick?: (port: WorkflowPortEntity, e: React.MouseEvent<HTMLDivElement> | React.MouseEventHandler<HTMLDivElement>) => void;
}
declare const WorkflowNodeRenderer: React.FC<WorkflowNodeProps>;

/**
 * 自由布局编辑器
 * @param props
 * @constructor
 */
declare const FreeLayoutEditor: React.ForwardRefExoticComponent<FreeLayoutProps & React.RefAttributes<FreeLayoutPluginContext>>;

type AutoLayoutResetFn = () => void;
type AutoLayoutFn = (options?: LayoutOptions) => Promise<AutoLayoutResetFn>;
type UseAutoLayout = () => AutoLayoutFn;
declare const useAutoLayout: UseAutoLayout;

declare function useClientContext(): FreeLayoutPluginContext;

interface SetCursorStateCallbackEvent {
    isPressingSpaceBar: boolean;
    cursorState: EditorCursorState;
}
type SetCursorStateCallback = (e: SetCursorStateCallbackEvent) => EditorCursorState | undefined;
interface PlaygroundTools {
    zoomin: (easing?: boolean) => void;
    zoomout: (easing?: boolean) => void;
    fitView: (easing?: boolean) => void;
    autoLayout: (options?: LayoutOptions) => Promise<() => void>;
    /**
     * 切换线条
     */
    switchLineType: (lineType?: LineRenderType) => LineRenderType;
    lineType: LineRenderType;
    zoom: number;
    cursorState: EditorCursorState;
    setCursorState: (stateId: EditorCursorState | SetCursorStateCallback) => void;
    /** 交互模式：鼠标 or 触控板 */
    interactiveType: InteractiveType;
    setInteractiveType: (type: InteractiveType) => void;
    /** 设置鼠标缩放 delta */
    setMouseScrollDelta: (mouseScrollDelta: number | ((zoom: number) => number)) => void;
}
declare function usePlaygroundTools(): PlaygroundTools;

export { FreeLayoutEditor, FreeLayoutEditorProvider, FreeLayoutPluginContext, FreeLayoutProps, type PlaygroundTools, type WorkflowNodeProps, WorkflowNodeRenderer, createFreeLayoutPreset, useAutoLayout, useClientContext, usePlaygroundTools };
