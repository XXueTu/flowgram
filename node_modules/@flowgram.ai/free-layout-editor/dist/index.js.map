{"version":3,"sources":["../src/index.ts","../src/components/index.ts","../src/components/free-layout-editor-provider.tsx","../src/preset/free-layout-preset.ts","../src/preset/node-serialize.ts","../src/preset/free-layout-props.ts","../src/components/workflow-node-renderer.tsx","../src/components/free-layout-editor.tsx","../src/hooks/use-auto-layout.ts","../src/hooks/use-client-context.ts","../src/hooks/use-playground-tools.ts"],"sourcesContent":["import 'reflect-metadata';\n\n/* 核心 模块导出 */\nexport * from '@flowgram.ai/editor';\n\n/**\n * 自由布局模块导出\n */\nexport * from '@flowgram.ai/free-layout-core';\nexport * from './components';\nexport * from './preset';\nexport * from './hooks';\nexport * from '@flowgram.ai/free-history-plugin';\nexport { useClientContext } from './hooks/use-client-context';\n","export * from './free-layout-editor-provider';\nexport * from './workflow-node-renderer';\nexport * from './free-layout-editor';\nexport * from '@flowgram.ai/free-stack-plugin';\n\n// WARNING: 这里用 export * 会有问题！\nexport {\n  WorkflowPortRender,\n  type WorkflowPortRenderProps,\n} from '@flowgram.ai/free-lines-plugin';\n","import React, { useMemo, useCallback, forwardRef } from 'react';\n\nimport { interfaces } from 'inversify';\nimport { WorkflowDocument } from '@flowgram.ai/free-layout-core';\nimport { HistoryService } from '@flowgram.ai/free-history-plugin';\nimport {\n  PlaygroundReactProvider,\n  createPluginContextDefault,\n  ClipboardService,\n  SelectionService,\n} from '@flowgram.ai/editor';\n\nimport { createFreeLayoutPreset, FreeLayoutPluginContext, FreeLayoutProps } from '../preset';\n\nexport const FreeLayoutEditorProvider = forwardRef<FreeLayoutPluginContext, FreeLayoutProps>(\n  function FreeLayoutEditorProvider(props: FreeLayoutProps, ref) {\n    const { children, ...others } = props;\n    const preset = useMemo(() => createFreeLayoutPreset(others), []);\n    const customPluginContext = useCallback(\n      (container: interfaces.Container) =>\n        ({\n          ...createPluginContextDefault(container),\n          get document(): WorkflowDocument {\n            return container.get<WorkflowDocument>(WorkflowDocument);\n          },\n          get clipboard(): ClipboardService {\n            return container.get<ClipboardService>(ClipboardService);\n          },\n          get selection(): SelectionService {\n            return container.get<SelectionService>(SelectionService);\n          },\n          get history(): HistoryService {\n            return container.get<HistoryService>(HistoryService);\n          },\n        } as FreeLayoutPluginContext),\n      []\n    );\n    return (\n      <PlaygroundReactProvider ref={ref} plugins={preset} customPluginContext={customPluginContext}>\n        {children}\n      </PlaygroundReactProvider>\n    );\n  }\n);\n","import { createSelectBoxPlugin } from '@flowgram.ai/select-box-plugin';\nimport { createFreeStackPlugin, StackingContextManager } from '@flowgram.ai/free-stack-plugin';\nimport { createFreeLinesPlugin } from '@flowgram.ai/free-lines-plugin';\nimport {\n  WorkflowCommands,\n  WorkflowNodeEntity,\n  WorkflowLineEntity,\n  WorkflowDocumentContainerModule,\n  WorkflowHoverService,\n  WorkflowDocumentOptions,\n  WorkflowDocumentOptionsDefault,\n  WorkflowNodeMeta,\n} from '@flowgram.ai/free-layout-core';\nimport { createFreeHoverPlugin } from '@flowgram.ai/free-hover-plugin';\nimport { HistoryService, createFreeHistoryPlugin } from '@flowgram.ai/free-history-plugin';\nimport { createFreeAutoLayoutPlugin } from '@flowgram.ai/free-auto-layout-plugin';\nimport {\n  PluginsProvider,\n  Plugin,\n  createDefaultPreset,\n  SelectionService,\n  createShortcutsPlugin,\n  EditorProps,\n  createVariablePlugin,\n  createPlaygroundPlugin,\n  Command,\n  PluginContext,\n  FlowNodesContentLayer,\n  FlowNodesTransformLayer,\n  FlowScrollBarLayer,\n  FlowScrollLimitLayer,\n  createPlaygroundReactPreset,\n} from '@flowgram.ai/editor';\n\nimport { fromNodeJSON, toNodeJSON } from './node-serialize';\nimport { FreeLayoutProps, FreeLayoutPluginContext } from './free-layout-props';\n\nconst renderElement = (ctx: PluginContext) => {\n  const stackingContextManager = ctx.get<StackingContextManager>(StackingContextManager);\n  if (stackingContextManager.node) {\n    return stackingContextManager.node;\n  }\n};\n\nexport function createFreeLayoutPreset(\n  opts: FreeLayoutProps\n): PluginsProvider<FreeLayoutPluginContext> {\n  return (ctx: FreeLayoutPluginContext) => {\n    opts = {\n      ...FreeLayoutProps.DEFAULT,\n      ...opts,\n      playground: {\n        ...opts.playground,\n        // 这里要把自由布局的 hoverService 注入进去\n        get hoverService() {\n          return ctx.get<WorkflowHoverService>(WorkflowHoverService);\n        },\n      },\n    };\n\n    let plugins: Plugin[] = [];\n    /**\n     * 注册默认的快捷键\n     */\n    plugins.push(\n      createShortcutsPlugin({\n        registerShortcuts(registry) {\n          const selection = ctx.get<SelectionService>(SelectionService);\n          registry.addHandlers({\n            commandId: WorkflowCommands.DELETE_NODES,\n            shortcuts: ['backspace', 'delete'],\n            isEnabled: () =>\n              selection.selection.length > 0 && !ctx.playground.config.readonlyOrDisabled,\n            execute: () => {\n              selection.selection.forEach((entity) => {\n                if (entity instanceof WorkflowNodeEntity) {\n                  if (!ctx.document.canRemove(entity)) {\n                    return;\n                  }\n                  const nodeMeta = entity.getNodeMeta<WorkflowNodeMeta>();\n                  const subCanvas = nodeMeta.subCanvas?.(entity);\n                  if (subCanvas?.isCanvas) {\n                    subCanvas.parentNode.dispose();\n                    return;\n                  }\n                  entity.dispose();\n                } else if (entity instanceof WorkflowLineEntity) {\n                  if (!ctx.document.linesManager.canRemove(entity)) {\n                    return;\n                  }\n                  entity.dispose();\n                }\n              });\n              selection.selection = selection.selection.filter((s) => !s.disposed);\n            },\n          });\n\n          if (opts?.history?.enable) {\n            const fixedHistoryService = ctx.get<HistoryService>(HistoryService);\n            if (!opts.history.disableShortcuts) {\n              registry.addHandlers({\n                commandId: Command.Default.UNDO,\n                shortcuts: ['meta z', 'ctrl z'],\n                isEnabled: () => true,\n                execute: () => {\n                  fixedHistoryService.undo();\n                },\n              });\n              registry.addHandlers({\n                commandId: Command.Default.REDO,\n                shortcuts: ['meta shift z', 'ctrl shift z'],\n                isEnabled: () => true,\n                execute: () => {\n                  fixedHistoryService.redo();\n                },\n              });\n            }\n          }\n        },\n      })\n    );\n    /**\n     * 加载默认编辑器配置\n     */\n    plugins = createDefaultPreset(opts as EditorProps, plugins)(ctx);\n    /**\n     * 注册变量系统\n     */\n    if (opts.variableEngine?.enable) {\n      plugins.push(\n        createVariablePlugin({\n          ...opts.variableEngine,\n          layout: 'free',\n        })\n      );\n    }\n    if (opts.history?.enable) {\n      plugins.push(createFreeHistoryPlugin(opts.history));\n    }\n\n    /**\n     * 注册自由布局模块\n     */\n    plugins.push(\n      createPlaygroundPlugin<FreeLayoutPluginContext>({\n        onBind: (bindConfig) => {\n          bindConfig.rebind(WorkflowDocumentOptions).toConstantValue({\n            canAddLine: opts.canAddLine?.bind(null, ctx),\n            canDeleteLine: opts.canDeleteLine?.bind(null, ctx),\n            isErrorLine: opts.isErrorLine?.bind(null, ctx),\n            isErrorPort: opts.isErrorPort?.bind(null, ctx),\n            isDisabledPort: opts.isDisabledPort?.bind(null, ctx),\n            isReverseLine: opts.isReverseLine?.bind(null, ctx),\n            isHideArrowLine: opts.isHideArrowLine?.bind(null, ctx),\n            isFlowingLine: opts.isFlowingLine?.bind(null, ctx),\n            isDisabledLine: opts.isDisabledLine?.bind(null, ctx),\n            isVerticalLine: opts.isVerticalLine?.bind(null, ctx),\n            onDragLineEnd: opts.onDragLineEnd?.bind(null, ctx),\n            setLineRenderType: opts.setLineRenderType?.bind(null, ctx),\n            setLineClassName: opts.setLineClassName?.bind(null, ctx),\n            canDeleteNode: opts.canDeleteNode?.bind(null, ctx),\n            canResetLine: opts.canResetLine?.bind(null, ctx),\n            cursors: opts.cursors ?? WorkflowDocumentOptionsDefault.cursors,\n            lineColor: opts.lineColor ?? WorkflowDocumentOptionsDefault.lineColor,\n            allNodesDefaultExpanded: opts.allNodesDefaultExpanded,\n            toNodeJSON: (node) => toNodeJSON(opts, node),\n            fromNodeJSON: (node, json, isFirstCreate) =>\n              fromNodeJSON(opts, node, json, isFirstCreate),\n          } as WorkflowDocumentOptions);\n        },\n        onInit: (ctx) => {\n          // 节点内容渲染\n          ctx.playground.registerLayer(FlowNodesContentLayer);\n          // 节点位置偏移计算\n          ctx.playground.registerLayer(FlowNodesTransformLayer, {\n            renderElement: () => {\n              if (typeof renderElement === 'function') {\n                return renderElement(ctx);\n              } else {\n                return renderElement;\n              }\n            },\n          });\n          if (!opts.scroll?.disableScrollLimit) {\n            // 控制滚动范围\n            ctx.playground.registerLayer(FlowScrollLimitLayer);\n          }\n          if (!opts.scroll?.disableScrollBar) {\n            // 控制条\n            ctx.playground.registerLayer(FlowScrollBarLayer);\n          }\n          if (opts.onContentChange) {\n            ctx.document.onContentChange((event) => opts.onContentChange!(ctx, event));\n          }\n        },\n        containerModules: [WorkflowDocumentContainerModule],\n      }),\n      /**\n       * 渲染层级管理\n       */\n      createFreeStackPlugin({}),\n      /**\n       * 线条渲染插件\n       */\n      createFreeLinesPlugin({}),\n      /**\n       * 节点 hover 插件\n       */\n      createFreeHoverPlugin({}),\n      /**\n       * 自动布局插件\n       */\n      createFreeAutoLayoutPlugin({}),\n      /**\n       * 选择框插件\n       */\n      createSelectBoxPlugin({\n        canSelect: (e) => {\n          // 需满足以下条件：\n          // 1. 鼠标左键\n          if (e.button !== 0) {\n            return false;\n          }\n          // 2. 如存在自定义配置，以配置为准\n          const element = e.target as Element;\n          if (element) {\n            if (element.classList.contains('gedit-flow-background-layer')) {\n              return true;\n            }\n            if (element.closest('[data-flow-editor-selectable=\"true\"]')) {\n              return true;\n            }\n            if (element.closest('[data-flow-editor-selectable=\"false\"]')) {\n              return false;\n            }\n          }\n          // 3. hover 到节点或者线条不能触发框选\n          const hoverService = ctx.get<WorkflowHoverService>(WorkflowHoverService);\n          if (hoverService.isSomeHovered()) {\n            return false;\n          }\n          return true;\n        },\n        ignoreOneSelect: true, // 自由布局不选择单个节点\n        ignoreChildrenLength: true, // 自由布局忽略子节点数量\n        ...(opts.selectBox || {}),\n      })\n    );\n\n    return createPlaygroundReactPreset(opts, plugins)(ctx);\n  };\n}\n","import {\n  WorkflowContentChangeType,\n  WorkflowDocument,\n  WorkflowDocumentOptionsDefault,\n} from '@flowgram.ai/free-layout-core';\nimport { FlowNodeEntity, FlowNodeFormData, type FlowNodeJSON } from '@flowgram.ai/editor';\n\nimport { FreeLayoutProps } from './free-layout-props';\n\nexport function fromNodeJSON(\n  opts: FreeLayoutProps,\n  node: FlowNodeEntity,\n  json: FlowNodeJSON,\n  isFirstCreate: boolean\n) {\n  json = opts.fromNodeJSON ? opts.fromNodeJSON(node, json, isFirstCreate) : json;\n  const formData = node.getData(FlowNodeFormData)!;\n  // 如果没有使用表单引擎，将 data 数据填入 extInfo\n  if (!formData) {\n    if (json.data) {\n      node.updateExtInfo(json.data);\n    }\n    // extInfo 数据更新则触发内容更新\n    if (isFirstCreate) {\n      node.onExtInfoChange(() => {\n        (node.document as WorkflowDocument).fireContentChange({\n          type: WorkflowContentChangeType.NODE_DATA_CHANGE,\n          toJSON: () => node.getExtInfo(),\n          entity: node,\n        });\n      });\n    }\n    return;\n  }\n\n  return WorkflowDocumentOptionsDefault.fromNodeJSON!(node, json, isFirstCreate);\n}\n\nexport function toNodeJSON(opts: FreeLayoutProps, node: FlowNodeEntity): FlowNodeJSON {\n  const formData = node.getData(FlowNodeFormData)!;\n  const position = node.transform.position;\n  let json: FlowNodeJSON;\n  // 不使用节点引擎则采用 extInfo\n  if (!formData) {\n    json = {\n      id: node.id,\n      type: node.flowNodeType,\n      meta: {\n        position: { x: position.x, y: position.y },\n      },\n      data: node.getExtInfo(),\n    };\n  } else {\n    json = WorkflowDocumentOptionsDefault.toNodeJSON!(node);\n  }\n  return opts.toNodeJSON ? opts.toNodeJSON(node, json) : json;\n}\n","import { SelectBoxPluginOptions } from '@flowgram.ai/select-box-plugin';\nimport { HistoryService } from '@flowgram.ai/history';\nimport {\n  LineColor,\n  LineRenderType,\n  onDragLineEndParams,\n  WorkflowContentChangeEvent,\n  WorkflowDocument,\n  WorkflowJSON,\n  WorkflowLineEntity,\n  WorkflowLinePortInfo,\n  type WorkflowLinesManager,\n  WorkflowNodeEntity,\n  WorkflowNodeRegistry,\n  WorkflowPortEntity,\n} from '@flowgram.ai/free-layout-core';\nimport {\n  ClipboardService,\n  EditorPluginContext,\n  EditorProps,\n  SelectionService,\n  PluginContext,\n} from '@flowgram.ai/editor';\n\nexport const FreeLayoutPluginContext = PluginContext;\n\nexport interface FreeLayoutPluginContext extends EditorPluginContext {\n  /**\n   * 文档\n   */\n  document: WorkflowDocument;\n  clipboard: ClipboardService;\n  selection: SelectionService;\n  history: HistoryService;\n}\n\n/**\n * 自由布局配置\n */\nexport interface FreeLayoutProps extends EditorProps<FreeLayoutPluginContext, WorkflowJSON> {\n  selectBox?: SelectBoxPluginOptions;\n  /**\n   * 节点定义\n   */\n  nodeRegistries?: WorkflowNodeRegistry[];\n  /**\n   * 默认是否展开所有节点\n   */\n  allNodesDefaultExpanded?: boolean;\n  /*\n   * 光标图片\n   */\n  cursors?: {\n    grab?: string;\n    grabbing?: string;\n  };\n  /**\n   * 线条颜色\n   */\n  lineColor?: LineColor;\n  /**\n   * 画布内容更新\n   */\n  onContentChange?: (ctx: FreeLayoutPluginContext, event: WorkflowContentChangeEvent) => void;\n  /**\n   * 判断线条是否标红\n   * @param ctx\n   * @param fromPort\n   * @param toPort\n   * @param lines\n   */\n  isErrorLine?: (\n    ctx: FreeLayoutPluginContext,\n    fromPort: WorkflowPortEntity,\n    toPort: WorkflowPortEntity | undefined,\n    lines: WorkflowLinesManager\n  ) => boolean;\n  /**\n   * 判断端口是否标红\n   * @param ctx\n   * @param port\n   */\n  isErrorPort?: (ctx: FreeLayoutPluginContext, port: WorkflowPortEntity) => boolean;\n  /**\n   * 判断端口是否禁用\n   * @param ctx\n   * @param port\n   */\n  isDisabledPort?: (ctx: FreeLayoutPluginContext, port: WorkflowPortEntity) => boolean;\n  /**\n   * 判断线条箭头是否反转\n   * @param ctx\n   * @param line\n   */\n  isReverseLine?: (ctx: FreeLayoutPluginContext, line: WorkflowLineEntity) => boolean;\n  /**\n   * 判断线条是否隐藏箭头\n   * @param ctx\n   * @param line\n   */\n  isHideArrowLine?: (ctx: FreeLayoutPluginContext, line: WorkflowLineEntity) => boolean;\n  /**\n   * 判断线条是否展示流动效果\n   * @param ctx\n   * @param line\n   */\n  isFlowingLine?: (ctx: FreeLayoutPluginContext, line: WorkflowLineEntity) => boolean;\n  /**\n   * 判断线条是否禁用\n   * @param ctx\n   * @param line\n   */\n  isDisabledLine?: (ctx: FreeLayoutPluginContext, line: WorkflowLineEntity) => boolean;\n  /**\n   * 判断线条是否竖向\n   * @param ctx\n   * @param line\n   */\n  isVerticalLine?: (ctx: FreeLayoutPluginContext, line: WorkflowLineEntity) => boolean;\n  /**\n   * 拖拽线条结束\n   * @param ctx\n   * @param params\n   */\n  onDragLineEnd?: (ctx: FreeLayoutPluginContext, params: onDragLineEndParams) => Promise<void>;\n  /**\n   * 设置线条渲染器类型\n   * @param ctx\n   * @param line\n   */\n  setLineRenderType?: (\n    ctx: FreeLayoutPluginContext,\n    line: WorkflowLineEntity\n  ) => LineRenderType | undefined;\n  /**\n   * 设置线条样式\n   * @param ctx\n   * @param line\n   */\n  setLineClassName?: (ctx: FreeLayoutPluginContext, line: WorkflowLineEntity) => string | undefined;\n  /**\n   * 是否允许创建线条\n   * @param ctx\n   * @param fromPort - 开始点\n   * @param toPort - 目标点\n   */\n  canAddLine?: (\n    ctx: FreeLayoutPluginContext,\n    fromPort: WorkflowPortEntity,\n    toPort: WorkflowPortEntity,\n    lines: WorkflowLinesManager,\n    silent?: boolean\n  ) => boolean;\n  /**\n   * 是否允许删除节点\n   * @param ctx\n   * @param node - 目标节点\n   * @param silent - 如果为false，可以加 toast 弹窗\n   */\n  canDeleteNode?: (\n    ctx: FreeLayoutPluginContext,\n    node: WorkflowNodeEntity,\n    silent?: boolean\n  ) => boolean;\n  /**\n   *\n   * 是否允许删除线条\n   * @param ctx\n   * @param line - 目标线条\n   * @param newLineInfo - 新的线条信息\n   * @param silent - 如果为false，可以加 toast 弹窗\n   */\n  canDeleteLine?: (\n    ctx: FreeLayoutPluginContext,\n    line: WorkflowLineEntity,\n    newLineInfo?: Required<WorkflowLinePortInfo>,\n    silent?: boolean\n  ) => boolean;\n  /**\n   * 是否允许重置线条\n   * @param fromPort - 开始点\n   * @param oldToPort - 旧的连接点\n   * @param newToPort - 新的连接点\n   * @param lines - 线条管理器\n   */\n  canResetLine?: (\n    ctx: FreeLayoutPluginContext,\n    fromPort: WorkflowPortEntity,\n    oldToPort: WorkflowPortEntity,\n    newToPort: WorkflowPortEntity,\n    lines: WorkflowLinesManager\n  ) => boolean;\n}\n\nexport namespace FreeLayoutProps {\n  /**\n   * 默认配置\n   */\n  export const DEFAULT: FreeLayoutProps = {\n    ...EditorProps.DEFAULT,\n  } as FreeLayoutProps;\n}\n","import React from 'react';\n\nimport clx from 'clsx';\nimport { WorkflowPortRender } from '@flowgram.ai/free-lines-plugin';\nimport {\n  WorkflowNodeEntity,\n  useNodeRender,\n  WorkflowPortEntity,\n} from '@flowgram.ai/free-layout-core';\n\nexport interface WorkflowNodeProps {\n  node: WorkflowNodeEntity;\n  className?: string;\n  style?: React.CSSProperties;\n  children?: React.ReactNode | null;\n  portClassName?: string;\n  portStyle?: React.CSSProperties;\n  onPortClick?: (\n    port: WorkflowPortEntity,\n    e: React.MouseEvent<HTMLDivElement> | React.MouseEventHandler<HTMLDivElement>\n  ) => void;\n}\n\nexport const WorkflowNodeRenderer: React.FC<WorkflowNodeProps> = (props) => {\n  const { selected, activated, startDrag, ports, selectNode, nodeRef, onFocus, onBlur } =\n    useNodeRender();\n  const className = clx(props.className || '', {\n    activated,\n    selected,\n  });\n  return (\n    <>\n      <div\n        className={className}\n        style={props.style}\n        ref={nodeRef}\n        draggable\n        onDragStart={startDrag}\n        onClick={selectNode}\n        onFocus={onFocus}\n        onBlur={onBlur}\n        data-node-selected={String(selected)}\n      >\n        {props.children}\n      </div>\n      {ports.map((p) => (\n        <WorkflowPortRender\n          key={p.id}\n          entity={p}\n          onClick={props.onPortClick ? (e) => props.onPortClick!(p, e) : undefined}\n          className={props.portClassName}\n          style={props.portStyle}\n        />\n      ))}\n    </>\n  );\n};\n","import React, { forwardRef } from 'react';\n\nimport { EditorRenderer } from '@flowgram.ai/editor';\n\nimport { FreeLayoutPluginContext, FreeLayoutProps } from '../preset';\nimport { FreeLayoutEditorProvider } from './free-layout-editor-provider';\n\n/**\n * 自由布局编辑器\n * @param props\n * @constructor\n */\nexport const FreeLayoutEditor = forwardRef<FreeLayoutPluginContext, FreeLayoutProps>(\n  function FreeLayoutEditor(props: FreeLayoutProps, ref) {\n    const { children, ...otherProps } = props;\n    return (\n      <FreeLayoutEditorProvider ref={ref} {...otherProps}>\n        <EditorRenderer>{children}</EditorRenderer>\n      </FreeLayoutEditorProvider>\n    );\n  },\n);\n","import { useCallback } from 'react';\n\nimport { PositionSchema } from '@flowgram.ai/utils';\nimport {\n  fitView,\n  usePlayground,\n  usePlaygroundContainer,\n  useService,\n  WorkflowDocument,\n  type WorkflowNodeEntity,\n} from '@flowgram.ai/free-layout-core';\nimport { FreeOperationType, HistoryService } from '@flowgram.ai/free-history-plugin';\nimport { AutoLayoutService, LayoutOptions } from '@flowgram.ai/free-auto-layout-plugin';\nimport { TransformData } from '@flowgram.ai/editor';\n\ntype AutoLayoutResetFn = () => void;\n\ntype AutoLayoutFn = (options?: LayoutOptions) => Promise<AutoLayoutResetFn>;\n\ntype UseAutoLayout = () => AutoLayoutFn;\n\nconst getNodePosition = (node: WorkflowNodeEntity): PositionSchema => {\n  const transform = node.getData(TransformData);\n  return {\n    x: transform.position.x,\n    y: transform.position.y,\n  };\n};\n\nconst useHistoryService = () => {\n  const container = usePlaygroundContainer();\n  try {\n    return container.get(HistoryService);\n  } catch (e) {\n    return {\n      pushOperation: () => {},\n    } as unknown as HistoryService;\n  }\n};\n\nconst useUpdateHistory = () => {\n  const historyService = useHistoryService();\n  const update = useCallback(\n    (params: {\n      nodes: WorkflowNodeEntity[];\n      startPositions: PositionSchema[];\n      endPositions: PositionSchema[];\n    }) => {\n      const { nodes, startPositions: oldValue, endPositions: value } = params;\n      const ids = nodes.map((node) => node.id);\n      historyService.pushOperation(\n        {\n          type: FreeOperationType.dragNodes,\n          value: {\n            ids,\n            value,\n            oldValue,\n          },\n        },\n        {\n          noApply: true,\n        }\n      );\n    },\n    [historyService]\n  );\n  return update;\n};\n\nconst createResetFn = (params: {\n  nodes: WorkflowNodeEntity[];\n  startPositions: PositionSchema[];\n}): AutoLayoutResetFn => {\n  const { nodes, startPositions } = params;\n  return () => {\n    nodes.forEach((node, index) => {\n      const transform = node.getData(TransformData);\n      const position = startPositions[index];\n      transform.update({\n        position,\n      });\n    });\n  };\n};\n\nconst useApplyLayout: UseAutoLayout = () => {\n  const document = useService(WorkflowDocument);\n  const autoLayoutService = useService<AutoLayoutService>(AutoLayoutService);\n  const updateHistory = useUpdateHistory();\n  const handleAutoLayout: AutoLayoutFn = useCallback(\n    async (options?: LayoutOptions): Promise<AutoLayoutResetFn> => {\n      const nodes = document.getAllNodes();\n      const startPositions = nodes.map(getNodePosition);\n      await autoLayoutService.layout(options);\n      const endPositions = nodes.map(getNodePosition);\n      updateHistory({\n        nodes,\n        startPositions,\n        endPositions,\n      });\n      return createResetFn({\n        nodes,\n        startPositions,\n      });\n    },\n    [autoLayoutService, document, updateHistory]\n  );\n  return handleAutoLayout;\n};\n\nexport const useAutoLayout: UseAutoLayout = () => {\n  const document = useService(WorkflowDocument);\n  const playground = usePlayground();\n  const applyLayout = useApplyLayout();\n  const handleFitView = useCallback(\n    (easing?: boolean) => {\n      fitView(document, playground.config, easing);\n    },\n    [document, playground]\n  );\n  const autoLayout: AutoLayoutFn = useCallback(\n    async (options?: LayoutOptions): Promise<AutoLayoutResetFn> => {\n      handleFitView();\n      const resetFn: AutoLayoutResetFn = await applyLayout(options);\n      handleFitView();\n      return resetFn;\n    },\n    [applyLayout]\n  );\n  return autoLayout;\n};\n","import { useService, PluginContext } from '@flowgram.ai/editor';\n\nimport { FreeLayoutPluginContext } from '../preset';\n\nexport function useClientContext(): FreeLayoutPluginContext {\n  return useService<FreeLayoutPluginContext>(PluginContext);\n}\n","/* eslint-disable no-cond-assign */\nimport { useCallback, useEffect, useState } from 'react';\n\nimport { type Disposable } from '@flowgram.ai/utils';\nimport {\n  EditorCursorState,\n  InteractiveType,\n  LineRenderType,\n  WorkflowDocument,\n  fitView,\n  usePlayground,\n  useService,\n} from '@flowgram.ai/free-layout-core';\nimport { LayoutOptions } from '@flowgram.ai/free-auto-layout-plugin';\nimport { EditorState } from '@flowgram.ai/editor';\n\nimport { useAutoLayout } from './use-auto-layout';\n\ninterface SetCursorStateCallbackEvent {\n  isPressingSpaceBar: boolean;\n  cursorState: EditorCursorState;\n}\ntype SetCursorStateCallback = (e: SetCursorStateCallbackEvent) => EditorCursorState | undefined;\n\nexport interface PlaygroundTools {\n  zoomin: (easing?: boolean) => void;\n  zoomout: (easing?: boolean) => void;\n  fitView: (easing?: boolean) => void;\n  autoLayout: (options?: LayoutOptions) => Promise<() => void>;\n  /**\n   * 切换线条\n   */\n  switchLineType: (lineType?: LineRenderType) => LineRenderType;\n  lineType: LineRenderType;\n  zoom: number;\n  cursorState: EditorCursorState;\n  setCursorState: (stateId: EditorCursorState | SetCursorStateCallback) => void;\n\n  /** 交互模式：鼠标 or 触控板 */\n  interactiveType: InteractiveType;\n  setInteractiveType: (type: InteractiveType) => void;\n\n  /** 设置鼠标缩放 delta */\n  setMouseScrollDelta: (mouseScrollDelta: number | ((zoom: number) => number)) => void;\n}\n\nexport function usePlaygroundTools(): PlaygroundTools {\n  const playground = usePlayground();\n  const doc = useService<WorkflowDocument>(WorkflowDocument);\n\n  const [zoom, setZoom] = useState(1);\n  const [lineType, setLineType] = useState(doc.linesManager.lineType);\n  const [cursorState, setCursorState] = useState<EditorCursorState>(EditorCursorState.SELECT);\n  const [interactiveType, setInteractiveType] = useState<InteractiveType>(InteractiveType.PAD);\n\n  const handleZoomOut = useCallback(\n    (easing?: boolean) => {\n      if (zoom < 0.1) {\n        return;\n      }\n      playground?.config.zoomout(easing);\n    },\n    [zoom, playground]\n  );\n\n  const handleZoomIn = useCallback(\n    (easing?: boolean) => {\n      if (zoom > 1.9) {\n        return;\n      }\n      playground?.config.zoomin(easing);\n    },\n    [zoom, playground]\n  );\n\n  // 切换线条类型\n  const handleLineTypeChange = useCallback(\n    (lineType?: LineRenderType) => {\n      const newLineType = doc.linesManager.switchLineType(lineType);\n      setLineType(newLineType);\n      return newLineType;\n    },\n    [doc]\n  );\n\n  // 获取合适视角\n  const handleFitView = useCallback(\n    (easing?: boolean) => {\n      fitView(doc, playground.config, easing);\n    },\n    [doc, playground]\n  );\n\n  const handleAutoLayout = useAutoLayout();\n\n  useEffect(() => {\n    let dispose: Disposable | null = null;\n    if (playground) {\n      dispose = playground.onZoom((z) => setZoom(z));\n    }\n    return () => {\n      if (dispose) {\n        dispose.dispose();\n      }\n    };\n  }, [playground]);\n\n  useEffect(() => {\n    const disposable = playground.editorState.onStateChange((e) => {\n      setCursorState(\n        e.state === EditorState.STATE_GRAB || e.state === EditorState.STATE_MOUSE_FRIENDLY_SELECT\n          ? EditorCursorState.GRAB\n          : EditorCursorState.SELECT\n      );\n\n      // 设置交互模式\n      setInteractiveType(\n        e.state === EditorState.STATE_MOUSE_FRIENDLY_SELECT\n          ? InteractiveType.MOUSE\n          : InteractiveType.PAD\n      );\n    });\n\n    return () => {\n      disposable.dispose();\n    };\n  }, [playground]);\n\n  function handleUpdateCursorState(stateId: EditorCursorState | SetCursorStateCallback) {\n    let finalStateId: EditorCursorState | undefined;\n\n    if (typeof stateId === 'function') {\n      finalStateId = stateId({\n        isPressingSpaceBar: playground.editorState.isPressingSpaceBar,\n        cursorState,\n      });\n    } else {\n      finalStateId = stateId;\n    }\n\n    if (typeof finalStateId === 'undefined') {\n      return;\n    }\n\n    if (finalStateId === EditorCursorState.GRAB) {\n      playground.editorState.changeState(EditorState.STATE_GRAB.id);\n      setCursorState(finalStateId);\n    } else if ((finalStateId = EditorCursorState.SELECT)) {\n      playground.editorState.changeState(EditorState.STATE_SELECT.id);\n      setCursorState(finalStateId);\n    }\n  }\n\n  function handleUpdateInteractiveType(interactiveType: InteractiveType) {\n    if (interactiveType === InteractiveType.MOUSE) {\n      // 鼠标优先交互模式：更新状态 & 设置小手\n      playground.editorState.changeState(EditorState.STATE_MOUSE_FRIENDLY_SELECT.id);\n      setCursorState(EditorCursorState.GRAB);\n    } else if (interactiveType === InteractiveType.PAD) {\n      // 触控板优先交互模式：更新状态 & 设置箭头\n      playground.editorState.changeState(EditorState.STATE_SELECT.id);\n      setCursorState(EditorCursorState.SELECT);\n    }\n    setInteractiveType(interactiveType);\n    return;\n  }\n\n  function handleUpdateMouseScrollDelta(delta: number | ((zoom: number) => number)) {\n    playground.config.updateConfig({\n      mouseScrollDelta: delta,\n    });\n  }\n\n  return {\n    zoomin: handleZoomIn,\n    zoomout: handleZoomOut,\n    fitView: handleFitView,\n    autoLayout: handleAutoLayout,\n    switchLineType: handleLineTypeChange,\n    zoom,\n    lineType,\n    cursorState,\n    setCursorState: handleUpdateCursorState,\n    interactiveType,\n    setInteractiveType: handleUpdateInteractiveType,\n    setMouseScrollDelta: handleUpdateMouseScrollDelta,\n  };\n}\n"],"mappings":"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","names":["import_free_layout_core","import_free_history_plugin","import_editor","import_free_layout_core","import_editor","import_editor","FreeLayoutProps","ctx","FreeLayoutEditorProvider","React","import_react","import_free_lines_plugin","import_free_layout_core","clx","React","import_react","import_editor","FreeLayoutEditor","React","import_free_lines_plugin","import_react","import_free_layout_core","import_free_history_plugin","import_free_auto_layout_plugin","import_editor","import_editor","import_react","import_free_layout_core","import_editor","lineType","interactiveType"]}