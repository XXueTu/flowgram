"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  FreeLayoutEditor: () => FreeLayoutEditor,
  FreeLayoutEditorProvider: () => FreeLayoutEditorProvider,
  FreeLayoutPluginContext: () => FreeLayoutPluginContext,
  FreeLayoutProps: () => FreeLayoutProps,
  WorkflowNodeRenderer: () => WorkflowNodeRenderer,
  WorkflowPortRender: () => import_free_lines_plugin3.WorkflowPortRender,
  createFreeLayoutPreset: () => createFreeLayoutPreset,
  useAutoLayout: () => useAutoLayout,
  useClientContext: () => useClientContext,
  usePlaygroundTools: () => usePlaygroundTools
});
module.exports = __toCommonJS(src_exports);
var import_reflect_metadata = require("reflect-metadata");
__reExport(src_exports, require("@flowgram.ai/editor"), module.exports);
__reExport(src_exports, require("@flowgram.ai/free-layout-core"), module.exports);

// src/components/index.ts
var components_exports = {};
__export(components_exports, {
  FreeLayoutEditor: () => FreeLayoutEditor,
  FreeLayoutEditorProvider: () => FreeLayoutEditorProvider,
  WorkflowNodeRenderer: () => WorkflowNodeRenderer,
  WorkflowPortRender: () => import_free_lines_plugin3.WorkflowPortRender
});

// src/components/free-layout-editor-provider.tsx
var import_react = __toESM(require("react"));
var import_free_layout_core3 = require("@flowgram.ai/free-layout-core");
var import_free_history_plugin2 = require("@flowgram.ai/free-history-plugin");
var import_editor4 = require("@flowgram.ai/editor");

// src/preset/free-layout-preset.ts
var import_select_box_plugin = require("@flowgram.ai/select-box-plugin");
var import_free_stack_plugin = require("@flowgram.ai/free-stack-plugin");
var import_free_lines_plugin = require("@flowgram.ai/free-lines-plugin");
var import_free_layout_core2 = require("@flowgram.ai/free-layout-core");
var import_free_hover_plugin = require("@flowgram.ai/free-hover-plugin");
var import_free_history_plugin = require("@flowgram.ai/free-history-plugin");
var import_free_auto_layout_plugin = require("@flowgram.ai/free-auto-layout-plugin");
var import_editor3 = require("@flowgram.ai/editor");

// src/preset/node-serialize.ts
var import_free_layout_core = require("@flowgram.ai/free-layout-core");
var import_editor = require("@flowgram.ai/editor");
function fromNodeJSON(opts, node, json, isFirstCreate) {
  json = opts.fromNodeJSON ? opts.fromNodeJSON(node, json, isFirstCreate) : json;
  const formData = node.getData(import_editor.FlowNodeFormData);
  if (!formData) {
    if (json.data) {
      node.updateExtInfo(json.data);
    }
    if (isFirstCreate) {
      node.onExtInfoChange(() => {
        node.document.fireContentChange({
          type: import_free_layout_core.WorkflowContentChangeType.NODE_DATA_CHANGE,
          toJSON: () => node.getExtInfo(),
          entity: node
        });
      });
    }
    return;
  }
  return import_free_layout_core.WorkflowDocumentOptionsDefault.fromNodeJSON(node, json, isFirstCreate);
}
function toNodeJSON(opts, node) {
  const formData = node.getData(import_editor.FlowNodeFormData);
  const position = node.transform.position;
  let json;
  if (!formData) {
    json = {
      id: node.id,
      type: node.flowNodeType,
      meta: {
        position: { x: position.x, y: position.y }
      },
      data: node.getExtInfo()
    };
  } else {
    json = import_free_layout_core.WorkflowDocumentOptionsDefault.toNodeJSON(node);
  }
  return opts.toNodeJSON ? opts.toNodeJSON(node, json) : json;
}

// src/preset/free-layout-props.ts
var import_editor2 = require("@flowgram.ai/editor");
var FreeLayoutPluginContext = import_editor2.PluginContext;
var FreeLayoutProps;
((FreeLayoutProps3) => {
  FreeLayoutProps3.DEFAULT = {
    ...import_editor2.EditorProps.DEFAULT
  };
})(FreeLayoutProps || (FreeLayoutProps = {}));

// src/preset/free-layout-preset.ts
var renderElement = (ctx) => {
  const stackingContextManager = ctx.get(import_free_stack_plugin.StackingContextManager);
  if (stackingContextManager.node) {
    return stackingContextManager.node;
  }
};
function createFreeLayoutPreset(opts) {
  return (ctx) => {
    opts = {
      ...FreeLayoutProps.DEFAULT,
      ...opts,
      playground: {
        ...opts.playground,
        // 这里要把自由布局的 hoverService 注入进去
        get hoverService() {
          return ctx.get(import_free_layout_core2.WorkflowHoverService);
        }
      }
    };
    let plugins = [];
    plugins.push(
      (0, import_editor3.createShortcutsPlugin)({
        registerShortcuts(registry) {
          const selection = ctx.get(import_editor3.SelectionService);
          registry.addHandlers({
            commandId: import_free_layout_core2.WorkflowCommands.DELETE_NODES,
            shortcuts: ["backspace", "delete"],
            isEnabled: () => selection.selection.length > 0 && !ctx.playground.config.readonlyOrDisabled,
            execute: () => {
              selection.selection.forEach((entity) => {
                if (entity instanceof import_free_layout_core2.WorkflowNodeEntity) {
                  if (!ctx.document.canRemove(entity)) {
                    return;
                  }
                  const nodeMeta = entity.getNodeMeta();
                  const subCanvas = nodeMeta.subCanvas?.(entity);
                  if (subCanvas?.isCanvas) {
                    subCanvas.parentNode.dispose();
                    return;
                  }
                  entity.dispose();
                } else if (entity instanceof import_free_layout_core2.WorkflowLineEntity) {
                  if (!ctx.document.linesManager.canRemove(entity)) {
                    return;
                  }
                  entity.dispose();
                }
              });
              selection.selection = selection.selection.filter((s) => !s.disposed);
            }
          });
          if (opts?.history?.enable) {
            const fixedHistoryService = ctx.get(import_free_history_plugin.HistoryService);
            if (!opts.history.disableShortcuts) {
              registry.addHandlers({
                commandId: import_editor3.Command.Default.UNDO,
                shortcuts: ["meta z", "ctrl z"],
                isEnabled: () => true,
                execute: () => {
                  fixedHistoryService.undo();
                }
              });
              registry.addHandlers({
                commandId: import_editor3.Command.Default.REDO,
                shortcuts: ["meta shift z", "ctrl shift z"],
                isEnabled: () => true,
                execute: () => {
                  fixedHistoryService.redo();
                }
              });
            }
          }
        }
      })
    );
    plugins = (0, import_editor3.createDefaultPreset)(opts, plugins)(ctx);
    if (opts.variableEngine?.enable) {
      plugins.push(
        (0, import_editor3.createVariablePlugin)({
          ...opts.variableEngine,
          layout: "free"
        })
      );
    }
    if (opts.history?.enable) {
      plugins.push((0, import_free_history_plugin.createFreeHistoryPlugin)(opts.history));
    }
    plugins.push(
      (0, import_editor3.createPlaygroundPlugin)({
        onBind: (bindConfig) => {
          bindConfig.rebind(import_free_layout_core2.WorkflowDocumentOptions).toConstantValue({
            canAddLine: opts.canAddLine?.bind(null, ctx),
            canDeleteLine: opts.canDeleteLine?.bind(null, ctx),
            isErrorLine: opts.isErrorLine?.bind(null, ctx),
            isErrorPort: opts.isErrorPort?.bind(null, ctx),
            isDisabledPort: opts.isDisabledPort?.bind(null, ctx),
            isReverseLine: opts.isReverseLine?.bind(null, ctx),
            isHideArrowLine: opts.isHideArrowLine?.bind(null, ctx),
            isFlowingLine: opts.isFlowingLine?.bind(null, ctx),
            isDisabledLine: opts.isDisabledLine?.bind(null, ctx),
            isVerticalLine: opts.isVerticalLine?.bind(null, ctx),
            onDragLineEnd: opts.onDragLineEnd?.bind(null, ctx),
            setLineRenderType: opts.setLineRenderType?.bind(null, ctx),
            setLineClassName: opts.setLineClassName?.bind(null, ctx),
            canDeleteNode: opts.canDeleteNode?.bind(null, ctx),
            canResetLine: opts.canResetLine?.bind(null, ctx),
            cursors: opts.cursors ?? import_free_layout_core2.WorkflowDocumentOptionsDefault.cursors,
            lineColor: opts.lineColor ?? import_free_layout_core2.WorkflowDocumentOptionsDefault.lineColor,
            allNodesDefaultExpanded: opts.allNodesDefaultExpanded,
            toNodeJSON: (node) => toNodeJSON(opts, node),
            fromNodeJSON: (node, json, isFirstCreate) => fromNodeJSON(opts, node, json, isFirstCreate)
          });
        },
        onInit: (ctx2) => {
          ctx2.playground.registerLayer(import_editor3.FlowNodesContentLayer);
          ctx2.playground.registerLayer(import_editor3.FlowNodesTransformLayer, {
            renderElement: () => {
              if (typeof renderElement === "function") {
                return renderElement(ctx2);
              } else {
                return renderElement;
              }
            }
          });
          if (!opts.scroll?.disableScrollLimit) {
            ctx2.playground.registerLayer(import_editor3.FlowScrollLimitLayer);
          }
          if (!opts.scroll?.disableScrollBar) {
            ctx2.playground.registerLayer(import_editor3.FlowScrollBarLayer);
          }
          if (opts.onContentChange) {
            ctx2.document.onContentChange((event) => opts.onContentChange(ctx2, event));
          }
        },
        containerModules: [import_free_layout_core2.WorkflowDocumentContainerModule]
      }),
      /**
       * 渲染层级管理
       */
      (0, import_free_stack_plugin.createFreeStackPlugin)({}),
      /**
       * 线条渲染插件
       */
      (0, import_free_lines_plugin.createFreeLinesPlugin)({}),
      /**
       * 节点 hover 插件
       */
      (0, import_free_hover_plugin.createFreeHoverPlugin)({}),
      /**
       * 自动布局插件
       */
      (0, import_free_auto_layout_plugin.createFreeAutoLayoutPlugin)({}),
      /**
       * 选择框插件
       */
      (0, import_select_box_plugin.createSelectBoxPlugin)({
        canSelect: (e) => {
          if (e.button !== 0) {
            return false;
          }
          const element = e.target;
          if (element) {
            if (element.classList.contains("gedit-flow-background-layer")) {
              return true;
            }
            if (element.closest('[data-flow-editor-selectable="true"]')) {
              return true;
            }
            if (element.closest('[data-flow-editor-selectable="false"]')) {
              return false;
            }
          }
          const hoverService = ctx.get(import_free_layout_core2.WorkflowHoverService);
          if (hoverService.isSomeHovered()) {
            return false;
          }
          return true;
        },
        ignoreOneSelect: true,
        // 自由布局不选择单个节点
        ignoreChildrenLength: true,
        // 自由布局忽略子节点数量
        ...opts.selectBox || {}
      })
    );
    return (0, import_editor3.createPlaygroundReactPreset)(opts, plugins)(ctx);
  };
}

// src/components/free-layout-editor-provider.tsx
var FreeLayoutEditorProvider = (0, import_react.forwardRef)(
  function FreeLayoutEditorProvider2(props, ref) {
    const { children, ...others } = props;
    const preset = (0, import_react.useMemo)(() => createFreeLayoutPreset(others), []);
    const customPluginContext = (0, import_react.useCallback)(
      (container) => ({
        ...(0, import_editor4.createPluginContextDefault)(container),
        get document() {
          return container.get(import_free_layout_core3.WorkflowDocument);
        },
        get clipboard() {
          return container.get(import_editor4.ClipboardService);
        },
        get selection() {
          return container.get(import_editor4.SelectionService);
        },
        get history() {
          return container.get(import_free_history_plugin2.HistoryService);
        }
      }),
      []
    );
    return /* @__PURE__ */ import_react.default.createElement(import_editor4.PlaygroundReactProvider, { ref, plugins: preset, customPluginContext }, children);
  }
);

// src/components/workflow-node-renderer.tsx
var import_react2 = __toESM(require("react"));
var import_clsx = __toESM(require("clsx"));
var import_free_lines_plugin2 = require("@flowgram.ai/free-lines-plugin");
var import_free_layout_core4 = require("@flowgram.ai/free-layout-core");
var WorkflowNodeRenderer = (props) => {
  const { selected, activated, startDrag, ports, selectNode, nodeRef, onFocus, onBlur } = (0, import_free_layout_core4.useNodeRender)();
  const className = (0, import_clsx.default)(props.className || "", {
    activated,
    selected
  });
  return /* @__PURE__ */ import_react2.default.createElement(import_react2.default.Fragment, null, /* @__PURE__ */ import_react2.default.createElement(
    "div",
    {
      className,
      style: props.style,
      ref: nodeRef,
      draggable: true,
      onDragStart: startDrag,
      onClick: selectNode,
      onFocus,
      onBlur,
      "data-node-selected": String(selected)
    },
    props.children
  ), ports.map((p) => /* @__PURE__ */ import_react2.default.createElement(
    import_free_lines_plugin2.WorkflowPortRender,
    {
      key: p.id,
      entity: p,
      onClick: props.onPortClick ? (e) => props.onPortClick(p, e) : void 0,
      className: props.portClassName,
      style: props.portStyle
    }
  )));
};

// src/components/free-layout-editor.tsx
var import_react3 = __toESM(require("react"));
var import_editor5 = require("@flowgram.ai/editor");
var FreeLayoutEditor = (0, import_react3.forwardRef)(
  function FreeLayoutEditor2(props, ref) {
    const { children, ...otherProps } = props;
    return /* @__PURE__ */ import_react3.default.createElement(FreeLayoutEditorProvider, { ref, ...otherProps }, /* @__PURE__ */ import_react3.default.createElement(import_editor5.EditorRenderer, null, children));
  }
);

// src/components/index.ts
__reExport(components_exports, require("@flowgram.ai/free-stack-plugin"));
var import_free_lines_plugin3 = require("@flowgram.ai/free-lines-plugin");

// src/index.ts
__reExport(src_exports, components_exports, module.exports);

// src/hooks/use-auto-layout.ts
var import_react4 = require("react");
var import_free_layout_core5 = require("@flowgram.ai/free-layout-core");
var import_free_history_plugin3 = require("@flowgram.ai/free-history-plugin");
var import_free_auto_layout_plugin2 = require("@flowgram.ai/free-auto-layout-plugin");
var import_editor6 = require("@flowgram.ai/editor");
var getNodePosition = (node) => {
  const transform = node.getData(import_editor6.TransformData);
  return {
    x: transform.position.x,
    y: transform.position.y
  };
};
var useHistoryService = () => {
  const container = (0, import_free_layout_core5.usePlaygroundContainer)();
  try {
    return container.get(import_free_history_plugin3.HistoryService);
  } catch (e) {
    return {
      pushOperation: () => {
      }
    };
  }
};
var useUpdateHistory = () => {
  const historyService = useHistoryService();
  const update = (0, import_react4.useCallback)(
    (params) => {
      const { nodes, startPositions: oldValue, endPositions: value } = params;
      const ids = nodes.map((node) => node.id);
      historyService.pushOperation(
        {
          type: import_free_history_plugin3.FreeOperationType.dragNodes,
          value: {
            ids,
            value,
            oldValue
          }
        },
        {
          noApply: true
        }
      );
    },
    [historyService]
  );
  return update;
};
var createResetFn = (params) => {
  const { nodes, startPositions } = params;
  return () => {
    nodes.forEach((node, index) => {
      const transform = node.getData(import_editor6.TransformData);
      const position = startPositions[index];
      transform.update({
        position
      });
    });
  };
};
var useApplyLayout = () => {
  const document = (0, import_free_layout_core5.useService)(import_free_layout_core5.WorkflowDocument);
  const autoLayoutService = (0, import_free_layout_core5.useService)(import_free_auto_layout_plugin2.AutoLayoutService);
  const updateHistory = useUpdateHistory();
  const handleAutoLayout = (0, import_react4.useCallback)(
    async (options) => {
      const nodes = document.getAllNodes();
      const startPositions = nodes.map(getNodePosition);
      await autoLayoutService.layout(options);
      const endPositions = nodes.map(getNodePosition);
      updateHistory({
        nodes,
        startPositions,
        endPositions
      });
      return createResetFn({
        nodes,
        startPositions
      });
    },
    [autoLayoutService, document, updateHistory]
  );
  return handleAutoLayout;
};
var useAutoLayout = () => {
  const document = (0, import_free_layout_core5.useService)(import_free_layout_core5.WorkflowDocument);
  const playground = (0, import_free_layout_core5.usePlayground)();
  const applyLayout = useApplyLayout();
  const handleFitView = (0, import_react4.useCallback)(
    (easing) => {
      (0, import_free_layout_core5.fitView)(document, playground.config, easing);
    },
    [document, playground]
  );
  const autoLayout = (0, import_react4.useCallback)(
    async (options) => {
      handleFitView();
      const resetFn = await applyLayout(options);
      handleFitView();
      return resetFn;
    },
    [applyLayout]
  );
  return autoLayout;
};

// src/hooks/use-client-context.ts
var import_editor7 = require("@flowgram.ai/editor");
function useClientContext() {
  return (0, import_editor7.useService)(import_editor7.PluginContext);
}

// src/hooks/use-playground-tools.ts
var import_react5 = require("react");
var import_free_layout_core6 = require("@flowgram.ai/free-layout-core");
var import_editor8 = require("@flowgram.ai/editor");
function usePlaygroundTools() {
  const playground = (0, import_free_layout_core6.usePlayground)();
  const doc = (0, import_free_layout_core6.useService)(import_free_layout_core6.WorkflowDocument);
  const [zoom, setZoom] = (0, import_react5.useState)(1);
  const [lineType, setLineType] = (0, import_react5.useState)(doc.linesManager.lineType);
  const [cursorState, setCursorState] = (0, import_react5.useState)(import_free_layout_core6.EditorCursorState.SELECT);
  const [interactiveType, setInteractiveType] = (0, import_react5.useState)(import_free_layout_core6.InteractiveType.PAD);
  const handleZoomOut = (0, import_react5.useCallback)(
    (easing) => {
      if (zoom < 0.1) {
        return;
      }
      playground?.config.zoomout(easing);
    },
    [zoom, playground]
  );
  const handleZoomIn = (0, import_react5.useCallback)(
    (easing) => {
      if (zoom > 1.9) {
        return;
      }
      playground?.config.zoomin(easing);
    },
    [zoom, playground]
  );
  const handleLineTypeChange = (0, import_react5.useCallback)(
    (lineType2) => {
      const newLineType = doc.linesManager.switchLineType(lineType2);
      setLineType(newLineType);
      return newLineType;
    },
    [doc]
  );
  const handleFitView = (0, import_react5.useCallback)(
    (easing) => {
      (0, import_free_layout_core6.fitView)(doc, playground.config, easing);
    },
    [doc, playground]
  );
  const handleAutoLayout = useAutoLayout();
  (0, import_react5.useEffect)(() => {
    let dispose = null;
    if (playground) {
      dispose = playground.onZoom((z) => setZoom(z));
    }
    return () => {
      if (dispose) {
        dispose.dispose();
      }
    };
  }, [playground]);
  (0, import_react5.useEffect)(() => {
    const disposable = playground.editorState.onStateChange((e) => {
      setCursorState(
        e.state === import_editor8.EditorState.STATE_GRAB || e.state === import_editor8.EditorState.STATE_MOUSE_FRIENDLY_SELECT ? import_free_layout_core6.EditorCursorState.GRAB : import_free_layout_core6.EditorCursorState.SELECT
      );
      setInteractiveType(
        e.state === import_editor8.EditorState.STATE_MOUSE_FRIENDLY_SELECT ? import_free_layout_core6.InteractiveType.MOUSE : import_free_layout_core6.InteractiveType.PAD
      );
    });
    return () => {
      disposable.dispose();
    };
  }, [playground]);
  function handleUpdateCursorState(stateId) {
    let finalStateId;
    if (typeof stateId === "function") {
      finalStateId = stateId({
        isPressingSpaceBar: playground.editorState.isPressingSpaceBar,
        cursorState
      });
    } else {
      finalStateId = stateId;
    }
    if (typeof finalStateId === "undefined") {
      return;
    }
    if (finalStateId === import_free_layout_core6.EditorCursorState.GRAB) {
      playground.editorState.changeState(import_editor8.EditorState.STATE_GRAB.id);
      setCursorState(finalStateId);
    } else if (finalStateId = import_free_layout_core6.EditorCursorState.SELECT) {
      playground.editorState.changeState(import_editor8.EditorState.STATE_SELECT.id);
      setCursorState(finalStateId);
    }
  }
  function handleUpdateInteractiveType(interactiveType2) {
    if (interactiveType2 === import_free_layout_core6.InteractiveType.MOUSE) {
      playground.editorState.changeState(import_editor8.EditorState.STATE_MOUSE_FRIENDLY_SELECT.id);
      setCursorState(import_free_layout_core6.EditorCursorState.GRAB);
    } else if (interactiveType2 === import_free_layout_core6.InteractiveType.PAD) {
      playground.editorState.changeState(import_editor8.EditorState.STATE_SELECT.id);
      setCursorState(import_free_layout_core6.EditorCursorState.SELECT);
    }
    setInteractiveType(interactiveType2);
    return;
  }
  function handleUpdateMouseScrollDelta(delta) {
    playground.config.updateConfig({
      mouseScrollDelta: delta
    });
  }
  return {
    zoomin: handleZoomIn,
    zoomout: handleZoomOut,
    fitView: handleFitView,
    autoLayout: handleAutoLayout,
    switchLineType: handleLineTypeChange,
    zoom,
    lineType,
    cursorState,
    setCursorState: handleUpdateCursorState,
    interactiveType,
    setInteractiveType: handleUpdateInteractiveType,
    setMouseScrollDelta: handleUpdateMouseScrollDelta
  };
}

// src/index.ts
__reExport(src_exports, require("@flowgram.ai/free-history-plugin"), module.exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  FreeLayoutEditor,
  FreeLayoutEditorProvider,
  FreeLayoutPluginContext,
  FreeLayoutProps,
  WorkflowNodeRenderer,
  WorkflowPortRender,
  createFreeLayoutPreset,
  useAutoLayout,
  useClientContext,
  usePlaygroundTools,
  ...require("@flowgram.ai/editor"),
  ...require("@flowgram.ai/free-layout-core"),
  ...require("@flowgram.ai/free-history-plugin")
});
//# sourceMappingURL=index.js.map