import * as _flowgram_ai_core from '@flowgram.ai/core';
import React from 'react';
import { PositionSchema, IPoint, Rectangle } from '@flowgram.ai/utils';
import { WorkflowNodeJSON, WorkflowNodeEntity, WorkflowPortEntity, WorkflowDragService, WorkflowLinesManager, WorkflowDocument } from '@flowgram.ai/free-layout-core';
import { HistoryService } from '@flowgram.ai/free-history-plugin';

interface NodePanelCallParams {
    /** 唤起节点面板的位置 */
    panelPosition: PositionSchema;
    /** 自定义传给面板组件的props */
    panelProps?: Record<string, any>;
    /** 指定父节点 */
    containerNode?: WorkflowNodeEntity;
    /** 创建节点后需连接的前序端口 */
    fromPort?: WorkflowPortEntity;
    /** 创建节点后需连接的后序端口 */
    toPort?: WorkflowPortEntity;
    /** 偏移后续节点默认间距 */
    autoOffsetPadding?: PositionSchema;
    /** 自定义节点位置 */
    customPosition?: (params: {
        nodeType: string;
        selectPosition: PositionSchema;
    }) => PositionSchema;
    /** 是否可以添加节点 */
    canAddNode?: (params: {
        nodeType: string;
        containerNode?: WorkflowNodeEntity;
    }) => boolean;
    /** 创建节点后 */
    afterAddNode?: (node?: WorkflowNodeEntity) => void;
    /** 是否创建线条 */
    enableBuildLine?: boolean;
    /** 是否使用选中位置作为节点位置 */
    enableSelectPosition?: boolean;
    /** 是否偏移后续节点 */
    enableAutoOffset?: boolean;
    /** 是否触发节点拖拽 */
    enableDragNode?: boolean;
    /** 是否可以添加多个节点 */
    enableMultiAdd?: boolean;
}
type NodePanelResult = {
    nodeType: string;
    nodeJSON?: WorkflowNodeJSON;
    selectEvent: React.MouseEvent;
} | undefined;
interface CallNodePanelParams {
    onSelect: (params?: NodePanelResult) => void;
    position: PositionSchema;
    onClose: () => void;
    panelProps?: Record<string, any>;
    enableMultiAdd?: boolean;
    containerNode?: WorkflowNodeEntity;
}
type CallNodePanel = (params: CallNodePanelParams) => Promise<void>;
interface NodePanelRenderProps extends CallNodePanelParams {
}
type NodePanelRender = React.FC<NodePanelRenderProps>;
interface NodePanelLayerOptions {
    renderer: NodePanelRender;
}
interface NodePanelPluginOptions extends NodePanelLayerOptions {
}

declare const createFreeNodePanelPlugin: _flowgram_ai_core.PluginCreator<NodePanelPluginOptions>;

/**
 * 添加节点面板服务
 */
declare class WorkflowNodePanelService {
    private readonly document;
    private readonly dragService;
    private readonly selectService;
    private readonly linesManager;
    private readonly playgroundConfig;
    private readonly historyService;
    private readonly toDispose;
    callNodePanel: CallNodePanel;
    /** 销毁 */
    dispose(): void;
    setCallNodePanel(callNodePanel: CallNodePanel): void;
    /** 唤起节点面板 */
    call(callParams: NodePanelCallParams): Promise<WorkflowNodeEntity | WorkflowNodeEntity[] | undefined>;
    /**
     * 唤起单选面板
     */
    singleSelectNodePanel(params: Omit<CallNodePanelParams, 'onSelect' | 'onClose' | 'enableMultiAdd'>): Promise<NodePanelResult | undefined>;
    /** 添加节点 */
    private addNode;
}

type IWaitNodeRender = () => Promise<void>;

type IUpdateSubSequentNodesPosition = (params: {
    node: WorkflowNodeEntity;
    subsequentNodes: WorkflowNodeEntity[];
    fromPort: WorkflowPortEntity;
    toPort: WorkflowPortEntity;
    historyService: HistoryService;
    dragService: WorkflowDragService;
    containerNode?: WorkflowNodeEntity;
    offset?: IPoint;
}) => void;

interface XYSchema {
    x: number;
    y: number;
}
type ISubPositionOffset = (params: {
    node: WorkflowNodeEntity;
    fromPort: WorkflowPortEntity;
    toPort: WorkflowPortEntity;
    padding: XYSchema;
}) => XYSchema | undefined;

type ISubNodesAutoOffset = (params: {
    node: WorkflowNodeEntity;
    fromPort: WorkflowPortEntity;
    toPort: WorkflowPortEntity;
    padding?: XYSchema;
    linesManager: WorkflowLinesManager;
    historyService: HistoryService;
    dragService: WorkflowDragService;
    containerNode?: WorkflowNodeEntity;
}) => void;

type IRectDistance = (rectA: Rectangle, rectB: Rectangle) => IPoint;

type IGetSubsequentNodes = (params: {
    node: WorkflowNodeEntity;
    linesManager: WorkflowLinesManager;
}) => WorkflowNodeEntity[];

type IGetPortBox = (port: WorkflowPortEntity, offset?: IPoint) => Rectangle;

type IGetContainerNode = (params: {
    containerNode?: WorkflowNodeEntity;
    fromPort?: WorkflowPortEntity;
    toPort?: WorkflowPortEntity;
}) => WorkflowNodeEntity | undefined;

type IBuildLine = (params: {
    node: WorkflowNodeEntity;
    linesManager: WorkflowLinesManager;
    fromPort?: WorkflowPortEntity;
    toPort?: WorkflowPortEntity;
}) => void;

type IAdjustNodePosition = (params: {
    nodeType: string;
    position: PositionSchema;
    document: WorkflowDocument;
    dragService: WorkflowDragService;
    fromPort?: WorkflowPortEntity;
    toPort?: WorkflowPortEntity;
    containerNode?: WorkflowNodeEntity;
}) => PositionSchema;

interface IWorkflowNodePanelUtils {
    adjustNodePosition: IAdjustNodePosition;
    buildLine: IBuildLine;
    getPortBox: IGetPortBox;
    getSubsequentNodes: IGetSubsequentNodes;
    getContainerNode: IGetContainerNode;
    rectDistance: IRectDistance;
    subNodesAutoOffset: ISubNodesAutoOffset;
    subPositionOffset: ISubPositionOffset;
    updateSubSequentNodesPosition: IUpdateSubSequentNodesPosition;
    waitNodeRender: IWaitNodeRender;
}
declare const WorkflowNodePanelUtils: IWorkflowNodePanelUtils;

export { type IWorkflowNodePanelUtils, type NodePanelPluginOptions, type NodePanelRender, type NodePanelRenderProps, type NodePanelResult, type NodePanelLayerOptions as NodePanelServiceOptions, WorkflowNodePanelService, WorkflowNodePanelUtils, createFreeNodePanelPlugin };
