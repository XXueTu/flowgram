var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result) __defProp(target, key, result);
  return result;
};

// src/create-shortcuts-plugin.ts
import { bindContributionProvider, definePluginCreator } from "@flowgram.ai/core";

// src/shortcuts-contribution.ts
import { inject, injectable, named, optional, postConstruct } from "inversify";
import { CommandRegistry, ContributionProvider } from "@flowgram.ai/core";
var ShortcutsContribution = Symbol("ShortcutsContribution");
var ShortcutsRegistry = class {
  constructor() {
    this.shortcutsHandlers = [];
  }
  addHandlers(...handlers) {
    handlers.forEach((handler) => {
      if (!this.commandRegistry.getCommand(handler.commandId)) {
        this.commandRegistry.registerCommand(
          { id: handler.commandId, ...handler.commandDetail || {} },
          { execute: handler.execute, isEnabled: handler.isEnabled }
        );
      } else {
        this.commandRegistry.registerHandler(handler.commandId, {
          execute: handler.execute,
          isEnabled: handler.isEnabled
        });
      }
    });
    this.shortcutsHandlers.unshift(...handlers);
  }
  addHandlersIfNotFound(...handlers) {
    handlers.forEach((handler) => {
      if (!this.has(handler.commandId)) {
        this.addHandlers(handler);
      }
    });
  }
  has(commandId) {
    return this.shortcutsHandlers.some((handler) => handler.commandId === commandId);
  }
  init() {
    this.contribs?.forEach((contrib) => contrib.registerShortcuts(this));
  }
};
__decorateClass([
  inject(ContributionProvider),
  named(ShortcutsContribution),
  optional()
], ShortcutsRegistry.prototype, "contribs", 2);
__decorateClass([
  inject(CommandRegistry)
], ShortcutsRegistry.prototype, "commandRegistry", 2);
__decorateClass([
  postConstruct()
], ShortcutsRegistry.prototype, "init", 1);
ShortcutsRegistry = __decorateClass([
  injectable()
], ShortcutsRegistry);

// src/layers/shortcuts-layer.tsx
import { inject as inject2, injectable as injectable2 } from "inversify";
import { Layer, SelectionService, Command as Command2 } from "@flowgram.ai/core";

// src/shortcuts-utils.ts
var isAppleDevice = /(mac|iphone|ipod|ipad)/i.test(
  typeof navigator !== "undefined" ? navigator?.platform : ""
);
var aliasKeyCodeMap = {
  "0": 48,
  "1": 49,
  "2": 50,
  "3": 51,
  "4": 52,
  "5": 53,
  "6": 54,
  "7": 55,
  "8": 56,
  "9": 57,
  backspace: 8,
  tab: 9,
  enter: 13,
  shift: 16,
  ctrl: 17,
  alt: 18,
  pausebreak: 19,
  capslock: 20,
  esc: 27,
  space: 32,
  pageup: 33,
  pagedown: 34,
  end: 35,
  home: 36,
  leftarrow: 37,
  uparrow: 38,
  rightarrow: 39,
  downarrow: 40,
  insert: 45,
  delete: 46,
  a: 65,
  b: 66,
  c: 67,
  d: 68,
  e: 69,
  f: 70,
  g: 71,
  h: 72,
  i: 73,
  j: 74,
  k: 75,
  l: 76,
  m: 77,
  n: 78,
  o: 79,
  p: 80,
  q: 81,
  r: 82,
  s: 83,
  t: 84,
  u: 85,
  v: 86,
  w: 87,
  x: 88,
  y: 89,
  z: 90,
  leftwindowkey: 91,
  rightwindowkey: 92,
  meta: isAppleDevice ? [91, 93] : [91, 92],
  selectkey: 93,
  numpad0: 96,
  numpad1: 97,
  numpad2: 98,
  numpad3: 99,
  numpad4: 100,
  numpad5: 101,
  numpad6: 102,
  numpad7: 103,
  numpad8: 104,
  numpad9: 105,
  multiply: 106,
  add: 107,
  subtract: 109,
  decimalpoint: 110,
  divide: 111,
  f1: 112,
  f2: 113,
  f3: 114,
  f4: 115,
  f5: 116,
  f6: 117,
  f7: 118,
  f8: 119,
  f9: 120,
  f10: 121,
  f11: 122,
  f12: 123,
  numlock: 144,
  scrolllock: 145,
  semicolon: 186,
  equalsign: 187,
  "=": 187,
  comma: 188,
  dash: 189,
  "-": 189,
  period: 190,
  forwardslash: 191,
  graveaccent: 192,
  openbracket: 219,
  backslash: 220,
  closebracket: 221,
  singlequote: 222
};
var modifierKey = {
  ctrl: (event) => event.ctrlKey,
  shift: (event) => event.shiftKey,
  alt: (event) => event.altKey,
  meta: (event) => {
    if (event.type === "keyup") {
      return aliasKeyCodeMap.meta.includes(event.keyCode);
    }
    return event.metaKey;
  }
};
function countKeyByEvent(event) {
  const countOfModifier = Object.keys(modifierKey).reduce((total, key) => {
    if (modifierKey[key](event)) {
      return total + 1;
    }
    return total;
  }, 0);
  return [16, 17, 18, 91, 92].includes(event.keyCode) ? countOfModifier : countOfModifier + 1;
}
function isKeyStringMatch(event, keyString, exactMatch = true) {
  if (!event.key || !keyString) {
    return false;
  }
  const genArr = keyString.split(/\s+/);
  let genLen = 0;
  for (const key of genArr) {
    const genModifier = modifierKey[key];
    const aliasKeyCode = aliasKeyCodeMap[key.toLowerCase()];
    if (genModifier && genModifier(event) || aliasKeyCode && aliasKeyCode === event.keyCode) {
      genLen++;
    }
  }
  if (exactMatch) {
    return genLen === genArr.length && countKeyByEvent(event) === genArr.length;
  }
  return genLen === genArr.length;
}
function isShortcutsMatch(event, shortcuts) {
  return shortcuts.some((keyString) => isKeyStringMatch(event, keyString));
}

// src/layers/shortcuts-layer.tsx
var ShortcutsLayer = class extends Layer {
  onReady() {
    this.shortcuts.addHandlersIfNotFound(
      /**
       * 放大
       */
      {
        commandId: Command2.Default.ZOOM_IN,
        shortcuts: ["meta =", "ctrl ="],
        execute: () => {
          this.config.zoomin();
        }
      },
      /**
       * 缩小
       */
      {
        commandId: Command2.Default.ZOOM_OUT,
        shortcuts: ["meta -", "ctrl -"],
        execute: () => {
          this.config.zoomout();
        }
      }
    );
    this.toDispose.pushAll([
      // 监听画布鼠标移动事件
      this.listenPlaygroundEvent("keydown", (e) => {
        if (!this.isFocused || e.target !== this.playgroundNode) {
          return;
        }
        this.shortcuts.shortcutsHandlers.some((shortcutsHandler) => {
          if (isShortcutsMatch(e, shortcutsHandler.shortcuts) && (!shortcutsHandler.isEnabled || shortcutsHandler.isEnabled(e))) {
            shortcutsHandler.execute(e);
            e.preventDefault();
            return true;
          }
        });
      })
    ]);
  }
};
ShortcutsLayer.type = "ShortcutsLayer";
__decorateClass([
  inject2(ShortcutsRegistry)
], ShortcutsLayer.prototype, "shortcuts", 2);
__decorateClass([
  inject2(SelectionService)
], ShortcutsLayer.prototype, "selection", 2);
ShortcutsLayer = __decorateClass([
  injectable2()
], ShortcutsLayer);

// src/create-shortcuts-plugin.ts
var createShortcutsPlugin = definePluginCreator({
  onBind: ({ bind }) => {
    bind(ShortcutsRegistry).toSelf().inSingletonScope();
    bindContributionProvider(bind, ShortcutsContribution);
  },
  onInit: (ctx) => {
    ctx.playground.registerLayer(ShortcutsLayer);
  },
  contributionKeys: [ShortcutsContribution]
});
export {
  ShortcutsContribution,
  ShortcutsRegistry,
  createShortcutsPlugin
};
//# sourceMappingURL=index.js.map