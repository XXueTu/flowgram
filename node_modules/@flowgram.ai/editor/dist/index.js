"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result) __defProp(target, key, result);
  return result;
};

// src/index.ts
var src_exports = {};
__export(src_exports, {
  AsyncContainerModule: () => import_inversify4.AsyncContainerModule,
  Container: () => import_inversify4.Container,
  ContainerModule: () => import_inversify4.ContainerModule,
  Editor: () => Editor,
  EditorProps: () => EditorProps,
  EditorProvider: () => EditorProvider,
  EditorRenderer: () => import_core8.PlaygroundReactRenderer,
  Field: () => import_form.Field,
  FieldArray: () => import_form.FieldArray,
  FlowEditorClient: () => FlowEditorClient,
  FlowNodeFormData: () => import_form_core.FlowNodeFormData,
  Form: () => import_form.Form,
  FormModel: () => import_node.FormModelV2,
  NodeClient: () => NodeClient,
  NodeFocusService: () => NodeFocusService,
  NodeRender: () => import_form_core.NodeRender,
  ValidateTrigger: () => import_form.ValidateTrigger,
  createDefaultPreset: () => createDefaultPreset,
  createFlowEditorClientPlugin: () => createFlowEditorClientPlugin,
  createFlowEditorClientPlugins: () => createFlowEditorClientPlugins,
  createPlaygroundReactPreset: () => import_playground_react.createPlaygroundReactPreset,
  highlightFormItem: () => highlightFormItem,
  inject: () => import_inversify4.inject,
  injectable: () => import_inversify4.injectable,
  multiInject: () => import_inversify4.multiInject,
  named: () => import_inversify4.named,
  postConstruct: () => import_inversify4.postConstruct,
  useCurrentField: () => import_form.useCurrentField,
  useCurrentFieldState: () => import_form.useCurrentFieldState,
  useField: () => import_form.useField,
  useFieldValidate: () => import_form.useFieldValidate,
  useFlowEditor: () => useFlowEditor,
  useForm: () => import_form.useForm,
  useHighlight: () => useHighlight,
  useWatch: () => import_form.useWatch
});
module.exports = __toCommonJS(src_exports);
var import_reflect_metadata = require("reflect-metadata");
var import_node = require("@flowgram.ai/node");
__reExport(src_exports, require("@flowgram.ai/utils"), module.exports);
__reExport(src_exports, require("@flowgram.ai/core"), module.exports);
__reExport(src_exports, require("@flowgram.ai/document"), module.exports);
__reExport(src_exports, require("@flowgram.ai/renderer"), module.exports);
__reExport(src_exports, require("@flowgram.ai/variable-plugin"), module.exports);
__reExport(src_exports, require("@flowgram.ai/shortcuts-plugin"), module.exports);
__reExport(src_exports, require("@flowgram.ai/node-core-plugin"), module.exports);
__reExport(src_exports, require("@flowgram.ai/i18n-plugin"), module.exports);
var import_inversify4 = require("inversify");
var import_form_core = require("@flowgram.ai/form-core");
var import_form = require("@flowgram.ai/form");
__reExport(src_exports, require("@flowgram.ai/node"), module.exports);

// src/preset/editor-props.ts
var EditorProps;
((EditorProps3) => {
  EditorProps3.DEFAULT = {
    background: {}
  };
})(EditorProps || (EditorProps = {}));

// src/preset/editor-default-preset.ts
var import_renderer = require("@flowgram.ai/renderer");
var import_redux_devtool_plugin = require("@flowgram.ai/redux-devtool-plugin");
var import_node_variable_plugin = require("@flowgram.ai/node-variable-plugin");
var import_node_core_plugin = require("@flowgram.ai/node-core-plugin");
var import_materials_plugin = require("@flowgram.ai/materials-plugin");
var import_i18n_plugin = require("@flowgram.ai/i18n-plugin");
var import_history_node_plugin = require("@flowgram.ai/history-node-plugin");
var import_document2 = require("@flowgram.ai/document");
var import_core6 = require("@flowgram.ai/core");

// src/utils/compose.ts
var compose = (fnList) => (node, data) => {
  const list = fnList.filter(Boolean);
  if (!list.length) {
    return data;
  }
  return list.reduce((acc, fn) => fn(node, acc), data);
};

// src/clients/flow-editor-client-plugins.ts
var import_core5 = require("@flowgram.ai/core");

// src/clients/node-client/create-node-client-plugins.ts
var import_core3 = require("@flowgram.ai/core");

// src/clients/node-client/node-focus-service.ts
var import_inversify = require("inversify");
var import_core = require("@flowgram.ai/core");

// src/clients/node-client/highlight/highlight-form-item.ts
var import_document = require("@flowgram.ai/document");

// src/clients/node-client/highlight/highlight-style.ts
var HIGHLIGHT_CLASSNAME = "flowide-highlight";
var styleText = `
@keyframes flowide-fade {
  from {
   opacity: 1.0;
  }
  to {
    opacity: 0;
  }
}
@-webkit-keyframes flowide-fade {
  from {
   opacity: 1.0;
  }
  to {
    opacity: 0;
  }
}
.${HIGHLIGHT_CLASSNAME} {
  background-color: rgba(238, 245, 40, 0.5);
  animation: flowide-fade 2s 1 forwards;
  -webkit-animation: flowide-fade 2s 1 forwards;
}
`;
var styleDom;
function createHighlightStyle() {
  if (styleDom) return;
  styleDom = document.createElement("style");
  styleDom.innerHTML = styleText;
  document.head.appendChild(styleDom);
}
function removeHighlightStyle() {
  styleDom?.remove();
  styleDom = void 0;
}

// src/clients/node-client/highlight/constants.ts
var DEFAULT_HIGHLIGHT_PADDING = 0;

// src/clients/node-client/highlight/highlight-form-item.ts
function highlightFormItem(formItem, options) {
  const parent = formItem.formModel.flowNodeEntity.getData(import_document.FlowNodeRenderData).node;
  const target = formItem.domRef.current;
  if (!target) {
    return void 0;
  }
  const overlay = document.createElement("div");
  const { padding = DEFAULT_HIGHLIGHT_PADDING, overlayClassName } = options || {};
  overlay.style.position = "absolute";
  overlay.style.top = "0";
  overlay.style.left = "0";
  overlay.style.width = "100%";
  overlay.style.height = "100%";
  overlay.style.zIndex = "9999";
  parent.appendChild(overlay);
  const parentRect = parent.getBoundingClientRect();
  const targetRect = target.getBoundingClientRect();
  overlay.style.top = targetRect.top - parentRect.top - padding + "px";
  overlay.style.left = targetRect.left - parentRect.left - padding + "px";
  overlay.style.width = targetRect.width + padding * 2 + "px";
  overlay.style.height = targetRect.height + padding * 2 + "px";
  overlay.className = overlayClassName || HIGHLIGHT_CLASSNAME;
  setTimeout(() => {
    overlay.remove();
  }, 2e3);
  return overlay;
}

// src/clients/node-client/highlight/use-highlight.ts
var import_react = require("react");
function useHighlight(props) {
  const ref = (0, import_react.useRef)(null);
  const { form, path } = props;
  const formItem = form.getFormItemByPath(path);
  if (!formItem) {
    return null;
  }
  formItem.domRef = ref;
  return ref;
}

// src/clients/node-client/node-focus-service.ts
var NodeFocusService = class {
  highlightNodeFormItem(formItem, options) {
    this.previousOverlay = highlightFormItem(formItem, options);
  }
  focusNodeFormItem(formItem, options) {
    const node = formItem.formModel.flowNodeEntity;
    const { canvas = {}, highlight } = options || {};
    if (this.previousOverlay) {
      this.previousOverlay.remove();
      this.previousOverlay = void 0;
    }
    const currentPromise = this.playground.scrollToView({ entities: [node], scrollToCenter: true, ...canvas }).then(() => {
      if (!formItem || !highlight || this.currentPromise !== currentPromise) {
        return;
      }
      this.highlightNodeFormItem(formItem, typeof highlight === "boolean" ? {} : highlight);
    });
    this.currentPromise = currentPromise;
    return this.currentPromise;
  }
};
__decorateClass([
  (0, import_inversify.inject)(import_core.Playground)
], NodeFocusService.prototype, "playground", 2);
NodeFocusService = __decorateClass([
  (0, import_inversify.injectable)()
], NodeFocusService);

// src/clients/node-client/node-client.ts
var import_inversify2 = require("inversify");
var NodeClient = class {
};
__decorateClass([
  (0, import_inversify2.inject)(NodeFocusService)
], NodeClient.prototype, "nodeFocusService", 2);
NodeClient = __decorateClass([
  (0, import_inversify2.injectable)()
], NodeClient);

// src/clients/node-client/highlight/create-node-highlight-plugin.ts
var import_core2 = require("@flowgram.ai/core");
var createNodeHighlightPlugin = (0, import_core2.definePluginCreator)({
  onInit() {
    createHighlightStyle();
  },
  onDispose() {
    removeHighlightStyle();
  }
});

// src/clients/node-client/create-node-client-plugins.ts
var createNodeClientPlugin = (0, import_core3.definePluginCreator)({
  onBind({ bind }) {
    bind(NodeFocusService).toSelf().inSingletonScope();
    bind(NodeClient).toSelf().inSingletonScope();
  }
});
var createNodeClientPlugins = () => [
  createNodeHighlightPlugin({}),
  createNodeClientPlugin({})
];

// src/clients/flow-editor-client.ts
var import_inversify3 = require("inversify");
var import_core4 = require("@flowgram.ai/core");
var FlowEditorClient = class {
  focusNodeFormItem(formItem, options) {
    this.nodeClient.nodeFocusService.focusNodeFormItem(formItem, options);
  }
  focusNode(node, options) {
    this.playground.scrollToView({ entities: [node], ...options });
  }
};
__decorateClass([
  (0, import_inversify3.inject)(NodeClient)
], FlowEditorClient.prototype, "nodeClient", 2);
__decorateClass([
  (0, import_inversify3.inject)(import_core4.Playground)
], FlowEditorClient.prototype, "playground", 2);
FlowEditorClient = __decorateClass([
  (0, import_inversify3.injectable)()
], FlowEditorClient);

// src/clients/flow-editor-client-plugins.ts
var createFlowEditorClientPlugin = (0, import_core5.definePluginCreator)({
  onBind({ bind }) {
    bind(FlowEditorClient).toSelf().inSingletonScope();
  }
});
var createFlowEditorClientPlugins = () => [
  ...createNodeClientPlugins(),
  createFlowEditorClientPlugin({})
];

// src/preset/editor-default-preset.ts
function createDefaultPreset(opts, plugins = []) {
  return (ctx) => {
    opts = { ...EditorProps.DEFAULT, ...opts };
    if (opts.i18n) {
      plugins.push((0, import_i18n_plugin.createI18nPlugin)(opts.i18n));
    }
    plugins.push(...createFlowEditorClientPlugins());
    if (opts.reduxDevTool?.enable) {
      plugins.push((0, import_redux_devtool_plugin.createReduxDevToolPlugin)(opts.reduxDevTool));
    }
    const defaultContainerModules = [
      import_document2.FlowDocumentContainerModule,
      // 默认文档
      import_renderer.FlowRendererContainerModule
      // 默认渲染
    ];
    plugins.push((0, import_materials_plugin.createMaterialsPlugin)(opts.materials || {}));
    if (opts.nodeEngine && opts.nodeEngine.enable !== false) {
      plugins.push((0, import_node_core_plugin.createNodeCorePlugin)({ materials: opts.nodeEngine.materials }));
      if (opts.variableEngine?.enable) {
        plugins.push((0, import_node_variable_plugin.createNodeVariablePlugin)({}));
      }
      if (opts.history?.enable) {
        plugins.push((0, import_history_node_plugin.createHistoryNodePlugin)({}));
      }
    }
    plugins.push(
      (0, import_core6.createPlaygroundPlugin)({
        onInit: (ctx2) => {
          if (opts.nodeRegistries) {
            ctx2.document.registerFlowNodes(...opts.nodeRegistries);
          }
          if (opts.constants) {
            ctx2.document.options.constants = opts.constants;
          }
          if (opts.formatNodeLines) {
            ctx2.document.options.formatNodeLines = compose([
              ctx2.document.options.formatNodeLines,
              opts.formatNodeLines
            ]);
          }
          if (opts.formatNodeLabels) {
            ctx2.document.options.formatNodeLabels = compose([
              ctx2.document.options.formatNodeLabels,
              opts.formatNodeLabels
            ]);
          }
          if (opts.getNodeDefaultRegistry) {
            ctx2.document.options.getNodeDefaultRegistry = opts.getNodeDefaultRegistry;
          }
          ctx2.get(import_renderer.FlowRendererRegistry).init();
        },
        onReady(ctx2) {
          if (opts.initialData) {
            ctx2.document.fromJSON(opts.initialData);
          }
          if (opts.readonly) {
            ctx2.playground.config.readonly = opts.readonly;
          }
          ctx2.document.load().then(() => {
            if (opts.onLoad) opts.onLoad(ctx2);
          });
        },
        onDispose(ctx2) {
          ctx2.document.dispose();
        },
        containerModules: defaultContainerModules
      })
    );
    return plugins;
  };
}

// src/components/editor-provider.tsx
var import_react2 = __toESM(require("react"));
var import_document3 = require("@flowgram.ai/document");
var import_core7 = require("@flowgram.ai/core");
var EditorProvider = (props) => {
  const { children, ...others } = props;
  const preset = (0, import_react2.useMemo)(() => createDefaultPreset(others), []);
  const customPluginContext = (0, import_react2.useCallback)(
    (container) => ({
      ...(0, import_core7.createPluginContextDefault)(container),
      get document() {
        return container.get(import_document3.FlowDocument);
      },
      get selection() {
        return container.get(import_core7.SelectionService);
      }
    }),
    []
  );
  return /* @__PURE__ */ import_react2.default.createElement(import_core7.PlaygroundReactProvider, { plugins: preset, customPluginContext }, children);
};

// src/components/editor-renderer.tsx
var import_core8 = require("@flowgram.ai/core");

// src/components/editor.tsx
var import_react3 = __toESM(require("react"));
var Editor = (props) => {
  const { children, ...otherProps } = props;
  return /* @__PURE__ */ import_react3.default.createElement(EditorProvider, { ...otherProps }, /* @__PURE__ */ import_react3.default.createElement(import_core8.PlaygroundReactRenderer, null, children));
};

// src/hooks/use-flow-editor.ts
var import_core9 = require("@flowgram.ai/core");
function useFlowEditor() {
  return (0, import_core9.useService)(FlowEditorClient);
}

// src/index.ts
__reExport(src_exports, require("@flowgram.ai/node-variable-plugin"), module.exports);
var import_playground_react = require("@flowgram.ai/playground-react");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AsyncContainerModule,
  Container,
  ContainerModule,
  Editor,
  EditorProps,
  EditorProvider,
  EditorRenderer,
  Field,
  FieldArray,
  FlowEditorClient,
  FlowNodeFormData,
  Form,
  FormModel,
  NodeClient,
  NodeFocusService,
  NodeRender,
  ValidateTrigger,
  createDefaultPreset,
  createFlowEditorClientPlugin,
  createFlowEditorClientPlugins,
  createPlaygroundReactPreset,
  highlightFormItem,
  inject,
  injectable,
  multiInject,
  named,
  postConstruct,
  useCurrentField,
  useCurrentFieldState,
  useField,
  useFieldValidate,
  useFlowEditor,
  useForm,
  useHighlight,
  useWatch,
  ...require("@flowgram.ai/utils"),
  ...require("@flowgram.ai/core"),
  ...require("@flowgram.ai/document"),
  ...require("@flowgram.ai/renderer"),
  ...require("@flowgram.ai/variable-plugin"),
  ...require("@flowgram.ai/shortcuts-plugin"),
  ...require("@flowgram.ai/node-core-plugin"),
  ...require("@flowgram.ai/i18n-plugin"),
  ...require("@flowgram.ai/node"),
  ...require("@flowgram.ai/node-variable-plugin")
});
//# sourceMappingURL=index.js.map