export * from '@flowgram.ai/node';
export { FormModelV2 as FormModel } from '@flowgram.ai/node';
export * from '@flowgram.ai/utils';
import * as _flowgram_ai_core from '@flowgram.ai/core';
import { PluginContext, Plugin, PluginsProvider, PlaygroundConfigRevealOpts, Playground } from '@flowgram.ai/core';
export * from '@flowgram.ai/core';
export { PlaygroundReactRenderer as EditorRenderer } from '@flowgram.ai/core';
import { FlowDocument, FlowDocumentJSON, FlowNodeRegistry, FlowNodeType, FlowNodeEntity, FlowNodeJSON, FlowTransitionLine, FlowTransitionLabel } from '@flowgram.ai/document';
export * from '@flowgram.ai/document';
export * from '@flowgram.ai/renderer';
import { VariablePluginOptions } from '@flowgram.ai/variable-plugin';
export * from '@flowgram.ai/variable-plugin';
export * from '@flowgram.ai/shortcuts-plugin';
import { NodeCorePluginOptions } from '@flowgram.ai/node-core-plugin';
export * from '@flowgram.ai/node-core-plugin';
import { I18nPluginOptions } from '@flowgram.ai/i18n-plugin';
export * from '@flowgram.ai/i18n-plugin';
export { AsyncContainerModule, Container, ContainerModule, inject, injectable, interfaces, multiInject, named, postConstruct } from 'inversify';
import { FormMetaOrFormMetaGenerator, FormItem, FormModel } from '@flowgram.ai/form-core';
export { FlowNodeFormData, NodeRender, NodeRenderProps } from '@flowgram.ai/form-core';
export { Errors, Field, FieldArray, FieldArrayRenderProps, FieldError, FieldName, FieldRenderProps, FieldState, FieldWarning, Form, FormControl, FormRenderProps, FormState, IField, IFieldArray, IForm, Validate, ValidateTrigger, Warnings, useCurrentField, useCurrentFieldState, useField, useFieldValidate, useForm, useWatch } from '@flowgram.ai/form';
import { ReduxDevToolPluginOptions } from '@flowgram.ai/redux-devtool-plugin';
import { SelectionService, PlaygroundReactProps } from '@flowgram.ai/playground-react';
export { createPlaygroundReactPreset } from '@flowgram.ai/playground-react';
import { MaterialsPluginOptions } from '@flowgram.ai/materials-plugin';
import { HistoryPluginOptions } from '@flowgram.ai/history';
import * as React from 'react';
import React__default from 'react';
export * from '@flowgram.ai/node-variable-plugin';

interface EditorPluginContext extends PluginContext {
    document: FlowDocument;
    selection: SelectionService;
}
/**
 * 固定布局配置
 */
interface EditorProps<CTX extends EditorPluginContext = EditorPluginContext, JSON = FlowDocumentJSON> extends PlaygroundReactProps<CTX> {
    /**
     * 初始化数据
     */
    initialData?: JSON;
    /**
     * 是否为 readonly
     */
    readonly?: boolean;
    /**
     * 节点定义
     */
    nodeRegistries?: FlowNodeRegistry[];
    /**
     * 获取默认的节点配置
     */
    getNodeDefaultRegistry?: (type: FlowNodeType) => FlowNodeRegistry;
    /**
     * 节点引擎配置
     */
    nodeEngine?: NodeCorePluginOptions & {
        /**
         * 默认FormMeta
         */
        createDefaultFormMeta?: (node: FlowNodeEntity) => FormMetaOrFormMetaGenerator;
        /**
         * 开启
         */
        enable?: boolean;
    };
    /**
     * 默认是否展开所有节点
     */
    allNodesDefaultExpanded?: boolean;
    /**
     * 画布物料
     */
    materials?: MaterialsPluginOptions;
    /**
     * 画布数据加载完成, 请使用 onAllLayersRendered 替代
     * @deprecated
     * */
    onLoad?: (ctx: CTX) => void;
    /**
     * 是否开启变量引擎
     */
    variableEngine?: VariablePluginOptions;
    /**
     * 是否开启历史
     */
    history?: HistoryPluginOptions<CTX> & {
        disableShortcuts?: boolean;
    };
    /**
     * redux 开发者工具配置
     */
    reduxDevTool?: ReduxDevToolPluginOptions;
    scroll?: {
        disableScrollLimit?: boolean;
        disableScrollBar?: boolean;
    };
    /**
     * 节点数据导出
     * - node 当前节点
     * - json 当前节点数据
     */
    toNodeJSON?(node: FlowNodeEntity, json: FlowNodeJSON): FlowNodeJSON;
    /**
     * 节点数据导入
     * - node 当前节点
     * - json 当前节点数据
     * - isFirstCreate 是否是第一次创建
     */
    fromNodeJSON?(node: FlowNodeEntity, json: FlowNodeJSON, isFirstCreate: boolean): FlowNodeJSON;
    /**
     * 画布内部常量自定义
     */
    constants?: Record<string, any>;
    /**
     * 自定义节点线条
     */
    formatNodeLines?: (node: FlowNodeEntity, lines: FlowTransitionLine[]) => FlowTransitionLine[];
    /**
     * 自定义节点 label
     */
    formatNodeLabels?: (node: FlowNodeEntity, lines: FlowTransitionLabel[]) => FlowTransitionLabel[];
    /**
     * 国际化
     */
    i18n?: I18nPluginOptions;
}
declare namespace EditorProps {
    /**
     * 默认配置
     */
    const DEFAULT: EditorProps;
}

declare function createDefaultPreset<CTX extends EditorPluginContext = EditorPluginContext>(opts: EditorProps<CTX>, plugins?: Plugin[]): PluginsProvider<CTX>;

declare const EditorProvider: React__default.FC<EditorProps>;

/**
 * 画布编辑器
 * @param props
 * @constructor
 */
declare const Editor: React__default.FC<EditorProps>;

interface HighLightOptions {
    padding?: number;
    overlayClassName?: string;
}
declare function highlightFormItem(formItem: FormItem, options?: HighLightOptions): HTMLDivElement | undefined;

interface HighlightProps {
    form: FormModel;
    path: string;
}
declare function useHighlight(props: HighlightProps): React.MutableRefObject<any> | null;

type FocusNodeCanvasOptions = PlaygroundConfigRevealOpts;
interface FocusNodeFormItemOptions {
    canvas?: FocusNodeCanvasOptions;
    highlight?: boolean | HighLightOptions;
}
declare class NodeFocusService {
    readonly playground: Playground;
    protected previousOverlay: HTMLDivElement | undefined;
    protected currentPromise: Promise<void> | undefined;
    highlightNodeFormItem(formItem: FormItem, options?: HighLightOptions): void;
    focusNodeFormItem(formItem: FormItem, options?: FocusNodeFormItemOptions): Promise<void>;
}

declare class NodeClient {
    nodeFocusService: NodeFocusService;
}

interface FocusNodeOptions {
    zoom?: PlaygroundConfigRevealOpts['zoom'];
    easing?: PlaygroundConfigRevealOpts['easing'];
    easingDuration?: PlaygroundConfigRevealOpts['easingDuration'];
    scrollToCenter?: PlaygroundConfigRevealOpts['scrollToCenter'];
}
declare class FlowEditorClient {
    readonly nodeClient: NodeClient;
    readonly playground: Playground;
    focusNodeFormItem(formItem: FormItem, options?: FocusNodeFormItemOptions): void;
    focusNode(node: FlowNodeEntity, options?: FocusNodeOptions): void;
}

declare const createFlowEditorClientPlugin: _flowgram_ai_core.PluginCreator<{}>;
declare const createFlowEditorClientPlugins: () => _flowgram_ai_core.Plugin<{}>[];

declare function useFlowEditor(): FlowEditorClient;

export { Editor, type EditorPluginContext, EditorProps, EditorProvider, FlowEditorClient, type FocusNodeCanvasOptions, type FocusNodeFormItemOptions, type HighLightOptions, NodeClient, NodeFocusService, createDefaultPreset, createFlowEditorClientPlugin, createFlowEditorClientPlugins, highlightFormItem, useFlowEditor, useHighlight };
