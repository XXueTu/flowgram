import * as _flowgram_ai_core from '@flowgram.ai/core';
import { Entity } from '@flowgram.ai/core';
import { WorkflowEntityHoverable, WorkflowNodeEntity, WorkflowLineEntity } from '@flowgram.ai/free-layout-core';

declare const createFreeStackPlugin: _flowgram_ai_core.PluginCreator<unknown>;

declare class StackingContextManager {
    private readonly document;
    private readonly entityManager;
    private readonly pipelineRenderer;
    private readonly pipelineRegistry;
    private readonly hoverService;
    private readonly selectService;
    readonly node: HTMLDivElement;
    private disposers;
    constructor();
    init(): void;
    ready(): void;
    dispose(): void;
    /**
     * 触发计算
     * 10ms内仅计算一次
     */
    private compute;
    private _compute;
    private get nodes();
    private get lines();
    private get context();
    private mountListener;
    private onZoom;
    private onHover;
    private onEntityChange;
    private onSelect;
}

declare enum StackingItem {
    Line = "line",
    Node = "node"
}
declare enum StackingType {
    Line = "line",
    Node = "node"
}
declare const StackingBaseIndex: Record<StackingType, number>;
declare const StackingConfig: {
    /** index 起始值 */
    startIndex: number;
    /** 允许存在的层级 */
    allowLevel: number;
    /** 每层 index 跨度 */
    levelIndexStep: number;
    /** 叠加计算后出现的最深层级 */
    maxLevel: number;
    /** 最大 index */
    maxIndex: number;
};

type StackingContext = {
    hoveredEntity?: WorkflowEntityHoverable;
    hoveredEntityID?: string;
    selectedEntities: Entity[];
    selectedIDs: string[];
};

declare const layersComputing: (params: {
    nodes: WorkflowNodeEntity[];
    lines: WorkflowLineEntity[];
    context: StackingContext;
}) => void;

declare class StackingComputing {
    private currentLevel;
    private topLevel;
    private maxLevel;
    private nodeIndexes;
    private nodeLevel;
    private lineLevel;
    private context;
    compute(params: {
        root: WorkflowNodeEntity;
        nodes: WorkflowNodeEntity[];
        context: StackingContext;
    }): {
        /** 节点层级 */
        nodeLevel: Map<string, number>;
        /** 线条层级 */
        lineLevel: Map<string, number>;
        /** 正常渲染的最高层级 */
        topLevel: number;
        /** 选中计算叠加后可能计算出的最高层级 */
        maxLevel: number;
    };
    private clearCache;
    private computeNodeIndexesMap;
    private computeTopLevel;
    private layerHandler;
    private sortNodes;
    private getNodesAllLines;
    private isHigherFirstLine;
    private getLevel;
    private levelIncrease;
}

export { StackingBaseIndex, StackingComputing, StackingConfig, type StackingContext, StackingContextManager, StackingItem, StackingType, createFreeStackPlugin, layersComputing };
