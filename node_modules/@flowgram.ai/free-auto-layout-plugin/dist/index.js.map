{"version":3,"sources":["../src/index.ts","../src/dagre-lib/greedy-fas.js","../src/dagre-lib/data/list.js","../src/dagre-lib/util.js","../src/dagre-lib/acyclic.js","../src/dagre-lib/normalize.js","../src/dagre-lib/rank/util.js","../src/dagre-lib/rank/feasible-tree.js","../src/dagre-lib/rank/network-simplex.js","../src/dagre-lib/rank/index.js","../src/dagre-lib/parent-dummy-chains.js","../src/dagre-lib/nesting-graph.js","../src/dagre-lib/add-border-segments.js","../src/dagre-lib/coordinate-system.js","../src/dagre-lib/order/init-order.js","../src/dagre-lib/order/cross-count.js","../src/dagre-lib/order/barycenter.js","../src/dagre-lib/order/resolve-conflicts.js","../src/dagre-lib/order/sort.js","../src/dagre-lib/order/sort-subgraph.js","../src/dagre-lib/order/build-layer-graph.js","../src/dagre-lib/order/add-subgraph-constraints.js","../src/dagre-lib/order/index.js","../src/dagre-lib/position/bk.js","../src/dagre-lib/position/index.js","../src/dagre-lib/layout.js","../src/dagre-lib/index.js","../src/create-auto-layout-plugin.tsx","../src/services.ts","../src/layout/store.ts","../src/layout/position.ts","../src/layout/dagre.ts","../src/layout/constant.ts","../src/layout/layout.ts"],"sourcesContent":["export { dagreLib } from './dagre-lib';\nexport { createFreeAutoLayoutPlugin } from './create-auto-layout-plugin';\nexport { AutoLayoutService } from './services';\nexport { Graph as DagreGraph } from '@dagrejs/graphlib';\nexport * from './layout';\n","import { Graph } from '@dagrejs/graphlib';\nimport List from './data/list';\n\n/*\n * A greedy heuristic for finding a feedback arc set for a graph. A feedback\n * arc set is a set of edges that can be removed to make a graph acyclic.\n * The algorithm comes from: P. Eades, X. Lin, and W. F. Smyth, \"A fast and\n * effective heuristic for the feedback arc set problem.\" This implementation\n * adjusts that from the paper to allow for weighted edges.\n */\nexport { greedyFAS };\nexport default greedyFAS;\n\nlet DEFAULT_WEIGHT_FN = () => 1;\n\nfunction greedyFAS(g, weightFn) {\n  if (g.nodeCount() <= 1) {\n    return [];\n  }\n  let state = buildState(g, weightFn || DEFAULT_WEIGHT_FN);\n  let results = doGreedyFAS(state.graph, state.buckets, state.zeroIdx);\n\n  // Expand multi-edges\n  return results.flatMap((e) => g.outEdges(e.v, e.w));\n}\n\nfunction doGreedyFAS(g, buckets, zeroIdx) {\n  let results = [];\n  let sources = buckets[buckets.length - 1];\n  let sinks = buckets[0];\n\n  let entry;\n  while (g.nodeCount()) {\n    while ((entry = sinks.dequeue())) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n    while ((entry = sources.dequeue())) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n    if (g.nodeCount()) {\n      for (let i = buckets.length - 2; i > 0; --i) {\n        entry = buckets[i].dequeue();\n        if (entry) {\n          results = results.concat(removeNode(g, buckets, zeroIdx, entry, true));\n          break;\n        }\n      }\n    }\n  }\n\n  return results;\n}\n\nfunction removeNode(g, buckets, zeroIdx, entry, collectPredecessors) {\n  let results = collectPredecessors ? [] : undefined;\n\n  g.inEdges(entry.v).forEach((edge) => {\n    let weight = g.edge(edge);\n    let uEntry = g.node(edge.v);\n\n    if (collectPredecessors) {\n      results.push({ v: edge.v, w: edge.w });\n    }\n\n    uEntry.out -= weight;\n    assignBucket(buckets, zeroIdx, uEntry);\n  });\n\n  g.outEdges(entry.v).forEach((edge) => {\n    let weight = g.edge(edge);\n    let w = edge.w;\n    let wEntry = g.node(w);\n    wEntry['in'] -= weight;\n    assignBucket(buckets, zeroIdx, wEntry);\n  });\n\n  g.removeNode(entry.v);\n\n  return results;\n}\n\nfunction buildState(g, weightFn) {\n  let fasGraph = new Graph();\n  let maxIn = 0;\n  let maxOut = 0;\n\n  g.nodes().forEach((v) => {\n    fasGraph.setNode(v, { v: v, in: 0, out: 0 });\n  });\n\n  // Aggregate weights on nodes, but also sum the weights across multi-edges\n  // into a single edge for the fasGraph.\n  g.edges().forEach((e) => {\n    let prevWeight = fasGraph.edge(e.v, e.w) || 0;\n    let weight = weightFn(e);\n    let edgeWeight = prevWeight + weight;\n    fasGraph.setEdge(e.v, e.w, edgeWeight);\n    maxOut = Math.max(maxOut, (fasGraph.node(e.v).out += weight));\n    maxIn = Math.max(maxIn, (fasGraph.node(e.w)['in'] += weight));\n  });\n\n  let buckets = range(maxOut + maxIn + 3).map(() => new List());\n  let zeroIdx = maxIn + 1;\n\n  fasGraph.nodes().forEach((v) => {\n    assignBucket(buckets, zeroIdx, fasGraph.node(v));\n  });\n\n  return { graph: fasGraph, buckets: buckets, zeroIdx: zeroIdx };\n}\n\nfunction assignBucket(buckets, zeroIdx, entry) {\n  if (!entry.out) {\n    buckets[0].enqueue(entry);\n  } else if (!entry['in']) {\n    buckets[buckets.length - 1].enqueue(entry);\n  } else {\n    buckets[entry.out - entry['in'] + zeroIdx].enqueue(entry);\n  }\n}\n\nfunction range(limit) {\n  const range = [];\n  for (let i = 0; i < limit; i++) {\n    range.push(i);\n  }\n\n  return range;\n}\n","/*\n * Simple doubly linked list implementation derived from Cormen, et al.,\n * \"Introduction to Algorithms\".\n */\n\nclass List {\n  constructor() {\n    let sentinel = {};\n    sentinel._next = sentinel._prev = sentinel;\n    this._sentinel = sentinel;\n  }\n\n  dequeue() {\n    let sentinel = this._sentinel;\n    let entry = sentinel._prev;\n    if (entry !== sentinel) {\n      unlink(entry);\n      return entry;\n    }\n  }\n\n  enqueue(entry) {\n    let sentinel = this._sentinel;\n    if (entry._prev && entry._next) {\n      unlink(entry);\n    }\n    entry._next = sentinel._next;\n    sentinel._next._prev = entry;\n    sentinel._next = entry;\n    entry._prev = sentinel;\n  }\n\n  toString() {\n    let strs = [];\n    let sentinel = this._sentinel;\n    let curr = sentinel._prev;\n    while (curr !== sentinel) {\n      strs.push(JSON.stringify(curr, filterOutLinks));\n      curr = curr._prev;\n    }\n    return '[' + strs.join(', ') + ']';\n  }\n}\n\nfunction unlink(entry) {\n  entry._prev._next = entry._next;\n  entry._next._prev = entry._prev;\n  delete entry._next;\n  delete entry._prev;\n}\n\nfunction filterOutLinks(k, v) {\n  if (k !== '_next' && k !== '_prev') {\n    return v;\n  }\n}\n\nexport default List;\n","/* eslint \"no-console\": off */\n\n'use strict';\n\nimport { Graph } from '@dagrejs/graphlib';\n\nconst util = {\n  addBorderNode,\n  addDummyNode,\n  applyWithChunking,\n  asNonCompoundGraph,\n  buildLayerMatrix,\n  intersectRect,\n  mapValues,\n  maxRank,\n  normalizeRanks,\n  notime,\n  partition,\n  pick,\n  predecessorWeights,\n  range,\n  removeEmptyRanks,\n  simplify,\n  successorWeights,\n  time,\n  uniqueId,\n  zipObject,\n};\n\nexport {\n  util,\n  addBorderNode,\n  addDummyNode,\n  applyWithChunking,\n  asNonCompoundGraph,\n  buildLayerMatrix,\n  intersectRect,\n  mapValues,\n  maxRank,\n  normalizeRanks,\n  notime,\n  partition,\n  pick,\n  predecessorWeights,\n  range,\n  removeEmptyRanks,\n  simplify,\n  successorWeights,\n  time,\n  uniqueId,\n  zipObject,\n};\n\nexport default util;\n\n/*\n * Adds a dummy node to the graph and return v.\n */\nfunction addDummyNode(g, type, attrs, name) {\n  let v;\n  do {\n    v = uniqueId(name);\n  } while (g.hasNode(v));\n\n  attrs.dummy = type;\n  g.setNode(v, attrs);\n  return v;\n}\n\n/*\n * Returns a new graph with only simple edges. Handles aggregation of data\n * associated with multi-edges.\n */\nfunction simplify(g) {\n  let simplified = new Graph().setGraph(g.graph());\n  g.nodes().forEach((v) => simplified.setNode(v, g.node(v)));\n  g.edges().forEach((e) => {\n    let simpleLabel = simplified.edge(e.v, e.w) || { weight: 0, minlen: 1 };\n    let label = g.edge(e);\n    simplified.setEdge(e.v, e.w, {\n      weight: simpleLabel.weight + label.weight,\n      minlen: Math.max(simpleLabel.minlen, label.minlen),\n    });\n  });\n  return simplified;\n}\n\nfunction asNonCompoundGraph(g) {\n  let simplified = new Graph({ multigraph: g.isMultigraph() }).setGraph(g.graph());\n  g.nodes().forEach((v) => {\n    if (!g.children(v).length) {\n      simplified.setNode(v, g.node(v));\n    }\n  });\n  g.edges().forEach((e) => {\n    simplified.setEdge(e, g.edge(e));\n  });\n  return simplified;\n}\n\nfunction successorWeights(g) {\n  let weightMap = g.nodes().map((v) => {\n    let sucs = {};\n    g.outEdges(v).forEach((e) => {\n      sucs[e.w] = (sucs[e.w] || 0) + g.edge(e).weight;\n    });\n    return sucs;\n  });\n  return zipObject(g.nodes(), weightMap);\n}\n\nfunction predecessorWeights(g) {\n  let weightMap = g.nodes().map((v) => {\n    let preds = {};\n    g.inEdges(v).forEach((e) => {\n      preds[e.v] = (preds[e.v] || 0) + g.edge(e).weight;\n    });\n    return preds;\n  });\n  return zipObject(g.nodes(), weightMap);\n}\n\n/*\n * Finds where a line starting at point ({x, y}) would intersect a rectangle\n * ({x, y, width, height}) if it were pointing at the rectangle's center.\n */\nfunction intersectRect(rect, point) {\n  let x = rect.x;\n  let y = rect.y;\n\n  // Rectangle intersection algorithm from:\n  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes\n  let dx = point.x - x;\n  let dy = point.y - y;\n  let w = rect.width / 2;\n  let h = rect.height / 2;\n\n  if (!dx && !dy) {\n    throw new Error('Not possible to find intersection inside of the rectangle');\n  }\n\n  let sx, sy;\n  if (Math.abs(dy) * w > Math.abs(dx) * h) {\n    // Intersection is top or bottom of rect.\n    if (dy < 0) {\n      h = -h;\n    }\n    sx = (h * dx) / dy;\n    sy = h;\n  } else {\n    // Intersection is left or right of rect.\n    if (dx < 0) {\n      w = -w;\n    }\n    sx = w;\n    sy = (w * dy) / dx;\n  }\n\n  return { x: x + sx, y: y + sy };\n}\n\n/*\n * Given a DAG with each node assigned \"rank\" and \"order\" properties, this\n * function will produce a matrix with the ids of each node.\n */\nfunction buildLayerMatrix(g) {\n  let layering = range(maxRank(g) + 1).map(() => []);\n  g.nodes().forEach((v) => {\n    let node = g.node(v);\n    let rank = node.rank;\n    if (rank !== undefined) {\n      layering[rank][node.order] = v;\n    }\n  });\n  return layering;\n}\n\n/*\n * Adjusts the ranks for all nodes in the graph such that all nodes v have\n * rank(v) >= 0 and at least one node w has rank(w) = 0.\n */\nfunction normalizeRanks(g) {\n  let nodeRanks = g.nodes().map((v) => {\n    let rank = g.node(v).rank;\n    if (rank === undefined) {\n      return Number.MAX_VALUE;\n    }\n\n    return rank;\n  });\n  let min = applyWithChunking(Math.min, nodeRanks);\n  g.nodes().forEach((v) => {\n    let node = g.node(v);\n    if (Object.hasOwn(node, 'rank')) {\n      node.rank -= min;\n    }\n  });\n}\n\nfunction removeEmptyRanks(g) {\n  // Ranks may not start at 0, so we need to offset them\n  let nodeRanks = g.nodes().map((v) => g.node(v).rank);\n  let offset = applyWithChunking(Math.min, nodeRanks);\n\n  let layers = [];\n  g.nodes().forEach((v) => {\n    let rank = g.node(v).rank - offset;\n    if (!layers[rank]) {\n      layers[rank] = [];\n    }\n    layers[rank].push(v);\n  });\n\n  let delta = 0;\n  let nodeRankFactor = g.graph().nodeRankFactor;\n  Array.from(layers).forEach((vs, i) => {\n    if (vs === undefined && i % nodeRankFactor !== 0) {\n      --delta;\n    } else if (vs !== undefined && delta) {\n      vs.forEach((v) => (g.node(v).rank += delta));\n    }\n  });\n}\n\nfunction addBorderNode(g, prefix, rank, order) {\n  let node = {\n    width: 0,\n    height: 0,\n  };\n  if (arguments.length >= 4) {\n    node.rank = rank;\n    node.order = order;\n  }\n  return addDummyNode(g, 'border', node, prefix);\n}\n\nfunction splitToChunks(array, chunkSize = CHUNKING_THRESHOLD) {\n  const chunks = [];\n  for (let i = 0; i < array.length; i += chunkSize) {\n    const chunk = array.slice(i, i + chunkSize);\n    chunks.push(chunk);\n  }\n  return chunks;\n}\n\nconst CHUNKING_THRESHOLD = 65535;\n\nfunction applyWithChunking(fn, argsArray) {\n  if (argsArray.length > CHUNKING_THRESHOLD) {\n    const chunks = splitToChunks(argsArray);\n    return fn.apply(\n      null,\n      chunks.map((chunk) => fn.apply(null, chunk))\n    );\n  } else {\n    return fn.apply(null, argsArray);\n  }\n}\n\nfunction maxRank(g) {\n  const nodes = g.nodes();\n  const nodeRanks = nodes.map((v) => {\n    let rank = g.node(v).rank;\n    if (rank === undefined) {\n      return Number.MIN_VALUE;\n    }\n    return rank;\n  });\n\n  return applyWithChunking(Math.max, nodeRanks);\n}\n\n/*\n * Partition a collection into two groups: `lhs` and `rhs`. If the supplied\n * function returns true for an entry it goes into `lhs`. Otherwise it goes\n * into `rhs.\n */\nfunction partition(collection, fn) {\n  let result = { lhs: [], rhs: [] };\n  collection.forEach((value) => {\n    if (fn(value)) {\n      result.lhs.push(value);\n    } else {\n      result.rhs.push(value);\n    }\n  });\n  return result;\n}\n\n/*\n * Returns a new function that wraps `fn` with a timer. The wrapper logs the\n * time it takes to execute the function.\n */\nfunction time(name, fn) {\n  let start = Date.now();\n  try {\n    return fn();\n  } finally {\n    console.log(name + ' time: ' + (Date.now() - start) + 'ms');\n  }\n}\n\nfunction notime(name, fn) {\n  return fn();\n}\n\nlet idCounter = 0;\nfunction uniqueId(prefix) {\n  var id = ++idCounter;\n  return toString(prefix) + id;\n}\n\nfunction range(start, limit, step = 1) {\n  if (limit == null) {\n    limit = start;\n    start = 0;\n  }\n\n  let endCon = (i) => i < limit;\n  if (step < 0) {\n    endCon = (i) => limit < i;\n  }\n\n  const range = [];\n  for (let i = start; endCon(i); i += step) {\n    range.push(i);\n  }\n\n  return range;\n}\n\nfunction pick(source, keys) {\n  const dest = {};\n  for (const key of keys) {\n    if (source[key] !== undefined) {\n      dest[key] = source[key];\n    }\n  }\n\n  return dest;\n}\n\nfunction mapValues(obj, funcOrProp) {\n  let func = funcOrProp;\n  if (typeof funcOrProp === 'string') {\n    func = (val) => val[funcOrProp];\n  }\n\n  return Object.entries(obj).reduce((acc, [k, v]) => {\n    acc[k] = func(v, k);\n    return acc;\n  }, {});\n}\n\nfunction zipObject(props, values) {\n  return props.reduce((acc, key, i) => {\n    acc[key] = values[i];\n    return acc;\n  }, {});\n}\n","'use strict';\n\nimport greedyFAS from './greedy-fas';\nimport { uniqueId } from './util';\n\nexport const acyclic = {\n  run,\n  undo,\n};\n\nexport default acyclic;\n\nfunction run(g) {\n  let fas = g.graph().acyclicer === 'greedy' ? greedyFAS(g, weightFn(g)) : dfsFAS(g);\n  fas.forEach((e) => {\n    let label = g.edge(e);\n    g.removeEdge(e);\n    label.forwardName = e.name;\n    label.reversed = true;\n    g.setEdge(e.w, e.v, label, uniqueId('rev'));\n  });\n\n  function weightFn(g) {\n    return (e) => {\n      return g.edge(e).weight;\n    };\n  }\n}\n\nfunction dfsFAS(g) {\n  let fas = [];\n  let stack = {};\n  let visited = {};\n\n  function dfs(v) {\n    if (Object.hasOwn(visited, v)) {\n      return;\n    }\n    visited[v] = true;\n    stack[v] = true;\n    g.outEdges(v).forEach((e) => {\n      if (Object.hasOwn(stack, e.w)) {\n        fas.push(e);\n      } else {\n        dfs(e.w);\n      }\n    });\n    delete stack[v];\n  }\n\n  g.nodes().forEach(dfs);\n  return fas;\n}\n\nfunction undo(g) {\n  g.edges().forEach((e) => {\n    let label = g.edge(e);\n    if (label.reversed) {\n      g.removeEdge(e);\n\n      let forwardName = label.forwardName;\n      delete label.reversed;\n      delete label.forwardName;\n      g.setEdge(e.w, e.v, label, forwardName);\n    }\n  });\n}\n","'use strict';\n\nimport { util } from './util';\n\nexport const normalize = {\n  run,\n  undo,\n};\n\nexport default normalize;\n\n/*\n * Breaks any long edges in the graph into short segments that span 1 layer\n * each. This operation is undoable with the denormalize function.\n *\n * Pre-conditions:\n *\n *    1. The input graph is a DAG.\n *    2. Each node in the graph has a \"rank\" property.\n *\n * Post-condition:\n *\n *    1. All edges in the graph have a length of 1.\n *    2. Dummy nodes are added where edges have been split into segments.\n *    3. The graph is augmented with a \"dummyChains\" attribute which contains\n *       the first dummy in each chain of dummy nodes produced.\n */\nfunction run(g) {\n  g.graph().dummyChains = [];\n  g.edges().forEach((edge) => normalizeEdge(g, edge));\n}\n\nfunction normalizeEdge(g, e) {\n  let v = e.v;\n  let vRank = g.node(v).rank;\n  let w = e.w;\n  let wRank = g.node(w).rank;\n  let name = e.name;\n  let edgeLabel = g.edge(e);\n  let labelRank = edgeLabel.labelRank;\n\n  if (wRank === vRank + 1) return;\n\n  g.removeEdge(e);\n\n  let dummy, attrs, i;\n  for (i = 0, ++vRank; vRank < wRank; ++i, ++vRank) {\n    edgeLabel.points = [];\n    attrs = {\n      width: 0,\n      height: 0,\n      edgeLabel: edgeLabel,\n      edgeObj: e,\n      rank: vRank,\n    };\n    dummy = util.addDummyNode(g, 'edge', attrs, '_d');\n    if (vRank === labelRank) {\n      attrs.width = edgeLabel.width;\n      attrs.height = edgeLabel.height;\n      attrs.dummy = 'edge-label';\n      attrs.labelpos = edgeLabel.labelpos;\n    }\n    g.setEdge(v, dummy, { weight: edgeLabel.weight }, name);\n    if (i === 0) {\n      g.graph().dummyChains.push(dummy);\n    }\n    v = dummy;\n  }\n\n  g.setEdge(v, w, { weight: edgeLabel.weight }, name);\n}\n\nfunction undo(g) {\n  g.graph().dummyChains.forEach((v) => {\n    let node = g.node(v);\n    let origLabel = node.edgeLabel;\n    let w;\n    g.setEdge(node.edgeObj, origLabel);\n    while (node.dummy) {\n      w = g.successors(v)[0];\n      g.removeNode(v);\n      origLabel.points.push({ x: node.x, y: node.y });\n      if (node.dummy === 'edge-label') {\n        origLabel.x = node.x;\n        origLabel.y = node.y;\n        origLabel.width = node.width;\n        origLabel.height = node.height;\n      }\n      v = w;\n      node = g.node(v);\n    }\n  });\n}\n","'use strict';\n\nimport { applyWithChunking } from '../util';\n\nexport { longestPath, slack };\nexport default { longestPath, slack };\n\n/*\n * Initializes ranks for the input graph using the longest path algorithm. This\n * algorithm scales well and is fast in practice, it yields rather poor\n * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom\n * ranks wide and leaving edges longer than necessary. However, due to its\n * speed, this algorithm is good for getting an initial ranking that can be fed\n * into other algorithms.\n *\n * This algorithm does not normalize layers because it will be used by other\n * algorithms in most cases. If using this algorithm directly, be sure to\n * run normalize at the end.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG.\n *    2. Input graph node labels can be assigned properties.\n *\n * Post-conditions:\n *\n *    1. Each node will be assign an (unnormalized) \"rank\" property.\n */\nfunction longestPath(g) {\n  var visited = {};\n\n  function dfs(v) {\n    var label = g.node(v);\n    if (Object.hasOwn(visited, v)) {\n      return label.rank;\n    }\n    visited[v] = true;\n\n    let outEdgesMinLens = g.outEdges(v).map((e) => {\n      if (e == null) {\n        return Number.POSITIVE_INFINITY;\n      }\n\n      return dfs(e.w) - g.edge(e).minlen;\n    });\n\n    var rank = applyWithChunking(Math.min, outEdgesMinLens);\n\n    if (rank === Number.POSITIVE_INFINITY) {\n      rank = 0;\n    }\n\n    return (label.rank = rank);\n  }\n\n  g.sources().forEach(dfs);\n}\n\n/*\n * Returns the amount of slack for the given edge. The slack is defined as the\n * difference between the length of the edge and its minimum length.\n */\nfunction slack(g, e) {\n  return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;\n}\n","'use strict';\n\nimport { Graph } from '@dagrejs/graphlib';\nimport { slack } from './util';\n\nexport { feasibleTree };\nexport default feasibleTree;\n\n/*\n * Constructs a spanning tree with tight edges and adjusted the input node's\n * ranks to achieve this. A tight edge is one that is has a length that matches\n * its \"minlen\" attribute.\n *\n * The basic structure for this function is derived from Gansner, et al., \"A\n * Technique for Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a DAG.\n *    2. Graph must be connected.\n *    3. Graph must have at least one node.\n *    5. Graph nodes must have been previously assigned a \"rank\" property that\n *       respects the \"minlen\" property of incident edges.\n *    6. Graph edges must have a \"minlen\" property.\n *\n * Post-conditions:\n *\n *    - Graph nodes will have their rank adjusted to ensure that all edges are\n *      tight.\n *\n * Returns a tree (undirected graph) that is constructed using only \"tight\"\n * edges.\n */\nfunction feasibleTree(g) {\n  var t = new Graph({ directed: false });\n\n  // Choose arbitrary node from which to start our tree\n  var start = g.nodes()[0];\n  var size = g.nodeCount();\n  t.setNode(start, {});\n\n  var edge, delta;\n  while (tightTree(t, g) < size) {\n    edge = findMinSlackEdge(t, g);\n    delta = t.hasNode(edge.v) ? slack(g, edge) : -slack(g, edge);\n    shiftRanks(t, g, delta);\n  }\n\n  return t;\n}\n\n/*\n * Finds a maximal tree of tight edges and returns the number of nodes in the\n * tree.\n */\nfunction tightTree(t, g) {\n  function dfs(v) {\n    g.nodeEdges(v).forEach((e) => {\n      var edgeV = e.v,\n        w = v === edgeV ? e.w : edgeV;\n      if (!t.hasNode(w) && !slack(g, e)) {\n        t.setNode(w, {});\n        t.setEdge(v, w, {});\n        dfs(w);\n      }\n    });\n  }\n\n  t.nodes().forEach(dfs);\n  return t.nodeCount();\n}\n\n/*\n * Finds the edge with the smallest slack that is incident on tree and returns\n * it.\n */\nfunction findMinSlackEdge(t, g) {\n  const edges = g.edges();\n\n  return edges.reduce(\n    (acc, edge) => {\n      let edgeSlack = Number.POSITIVE_INFINITY;\n      if (t.hasNode(edge.v) !== t.hasNode(edge.w)) {\n        edgeSlack = slack(g, edge);\n      }\n\n      if (edgeSlack < acc[0]) {\n        return [edgeSlack, edge];\n      }\n\n      return acc;\n    },\n    [Number.POSITIVE_INFINITY, null]\n  )[1];\n}\n\nfunction shiftRanks(t, g, delta) {\n  t.nodes().forEach((v) => (g.node(v).rank += delta));\n}\n","'use strict';\n\nimport { alg } from '@dagrejs/graphlib';\nimport { feasibleTree } from './feasible-tree';\nimport { slack, longestPath as initRank } from './util';\nimport { simplify } from '../util';\n\nconst { preorder, postorder } = alg;\n\nexport { networkSimplex };\nexport default networkSimplex;\n\n// Expose some internals for testing purposes\nnetworkSimplex.initLowLimValues = initLowLimValues;\nnetworkSimplex.initCutValues = initCutValues;\nnetworkSimplex.calcCutValue = calcCutValue;\nnetworkSimplex.leaveEdge = leaveEdge;\nnetworkSimplex.enterEdge = enterEdge;\nnetworkSimplex.exchangeEdges = exchangeEdges;\n\n/*\n * The network simplex algorithm assigns ranks to each node in the input graph\n * and iteratively improves the ranking to reduce the length of edges.\n *\n * Preconditions:\n *\n *    1. The input graph must be a DAG.\n *    2. All nodes in the graph must have an object value.\n *    3. All edges in the graph must have \"minlen\" and \"weight\" attributes.\n *\n * Postconditions:\n *\n *    1. All nodes in the graph will have an assigned \"rank\" attribute that has\n *       been optimized by the network simplex algorithm. Ranks start at 0.\n *\n *\n * A rough sketch of the algorithm is as follows:\n *\n *    1. Assign initial ranks to each node. We use the longest path algorithm,\n *       which assigns ranks to the lowest position possible. In general this\n *       leads to very wide bottom ranks and unnecessarily long edges.\n *    2. Construct a feasible tight tree. A tight tree is one such that all\n *       edges in the tree have no slack (difference between length of edge\n *       and minlen for the edge). This by itself greatly improves the assigned\n *       rankings by shorting edges.\n *    3. Iteratively find edges that have negative cut values. Generally a\n *       negative cut value indicates that the edge could be removed and a new\n *       tree edge could be added to produce a more compact graph.\n *\n * Much of the algorithms here are derived from Gansner, et al., \"A Technique\n * for Drawing Directed Graphs.\" The structure of the file roughly follows the\n * structure of the overall algorithm.\n */\nfunction networkSimplex(g) {\n  g = simplify(g);\n  initRank(g);\n  var t = feasibleTree(g);\n  initLowLimValues(t);\n  initCutValues(t, g);\n\n  var e, f;\n  while ((e = leaveEdge(t))) {\n    f = enterEdge(t, g, e);\n    exchangeEdges(t, g, e, f);\n  }\n}\n\n/*\n * Initializes cut values for all edges in the tree.\n */\nfunction initCutValues(t, g) {\n  var vs = postorder(t, t.nodes());\n  vs = vs.slice(0, vs.length - 1);\n  vs.forEach((v) => assignCutValue(t, g, v));\n}\n\nfunction assignCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  t.edge(child, parent).cutvalue = calcCutValue(t, g, child);\n}\n\n/*\n * Given the tight tree, its graph, and a child in the graph calculate and\n * return the cut value for the edge between the child and its parent.\n */\nfunction calcCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  // True if the child is on the tail end of the edge in the directed graph\n  var childIsTail = true;\n  // The graph's view of the tree edge we're inspecting\n  var graphEdge = g.edge(child, parent);\n  // The accumulated cut value for the edge between this node and its parent\n  var cutValue = 0;\n\n  if (!graphEdge) {\n    childIsTail = false;\n    graphEdge = g.edge(parent, child);\n  }\n\n  cutValue = graphEdge.weight;\n\n  g.nodeEdges(child).forEach((e) => {\n    var isOutEdge = e.v === child,\n      other = isOutEdge ? e.w : e.v;\n\n    if (other !== parent) {\n      var pointsToHead = isOutEdge === childIsTail,\n        otherWeight = g.edge(e).weight;\n\n      cutValue += pointsToHead ? otherWeight : -otherWeight;\n      if (isTreeEdge(t, child, other)) {\n        var otherCutValue = t.edge(child, other).cutvalue;\n        cutValue += pointsToHead ? -otherCutValue : otherCutValue;\n      }\n    }\n  });\n\n  return cutValue;\n}\n\nfunction initLowLimValues(tree, root) {\n  if (arguments.length < 2) {\n    root = tree.nodes()[0];\n  }\n  dfsAssignLowLim(tree, {}, 1, root);\n}\n\nfunction dfsAssignLowLim(tree, visited, nextLim, v, parent) {\n  var low = nextLim;\n  var label = tree.node(v);\n\n  visited[v] = true;\n  tree.neighbors(v).forEach((w) => {\n    if (!Object.hasOwn(visited, w)) {\n      nextLim = dfsAssignLowLim(tree, visited, nextLim, w, v);\n    }\n  });\n\n  label.low = low;\n  label.lim = nextLim++;\n  if (parent) {\n    label.parent = parent;\n  } else {\n    // TODO should be able to remove this when we incrementally update low lim\n    delete label.parent;\n  }\n\n  return nextLim;\n}\n\nfunction leaveEdge(tree) {\n  return tree.edges().find((e) => tree.edge(e).cutvalue < 0);\n}\n\nfunction enterEdge(t, g, edge) {\n  var v = edge.v;\n  var w = edge.w;\n\n  // For the rest of this function we assume that v is the tail and w is the\n  // head, so if we don't have this edge in the graph we should flip it to\n  // match the correct orientation.\n  if (!g.hasEdge(v, w)) {\n    v = edge.w;\n    w = edge.v;\n  }\n\n  var vLabel = t.node(v);\n  var wLabel = t.node(w);\n  var tailLabel = vLabel;\n  var flip = false;\n\n  // If the root is in the tail of the edge then we need to flip the logic that\n  // checks for the head and tail nodes in the candidates function below.\n  if (vLabel.lim > wLabel.lim) {\n    tailLabel = wLabel;\n    flip = true;\n  }\n\n  var candidates = g.edges().filter((edge) => {\n    return (\n      flip === isDescendant(t, t.node(edge.v), tailLabel) &&\n      flip !== isDescendant(t, t.node(edge.w), tailLabel)\n    );\n  });\n\n  return candidates.reduce((acc, edge) => {\n    if (slack(g, edge) < slack(g, acc)) {\n      return edge;\n    }\n\n    return acc;\n  });\n}\n\nfunction exchangeEdges(t, g, e, f) {\n  var v = e.v;\n  var w = e.w;\n  t.removeEdge(v, w);\n  t.setEdge(f.v, f.w, {});\n  initLowLimValues(t);\n  initCutValues(t, g);\n  updateRanks(t, g);\n}\n\nfunction updateRanks(t, g) {\n  var root = t.nodes().find((v) => !g.node(v).parent);\n  var vs = preorder(t, root);\n  vs = vs.slice(1);\n  vs.forEach((v) => {\n    var parent = t.node(v).parent,\n      edge = g.edge(v, parent),\n      flipped = false;\n\n    if (!edge) {\n      edge = g.edge(parent, v);\n      flipped = true;\n    }\n\n    g.node(v).rank = g.node(parent).rank + (flipped ? edge.minlen : -edge.minlen);\n  });\n}\n\n/*\n * Returns true if the edge is in the tree.\n */\nfunction isTreeEdge(tree, u, v) {\n  return tree.hasEdge(u, v);\n}\n\n/*\n * Returns true if the specified node is descendant of the root node per the\n * assigned low and lim attributes in the tree.\n */\nfunction isDescendant(tree, vLabel, rootLabel) {\n  return rootLabel.low <= vLabel.lim && vLabel.lim <= rootLabel.lim;\n}\n","'use strict';\n\nimport rankUtil from './util';\nimport { longestPath } from './util';\nimport feasibleTree from './feasible-tree';\nimport networkSimplex from './network-simplex';\n\nexport { rank };\nexport default rank;\n\n/*\n * Assigns a rank to each node in the input graph that respects the \"minlen\"\n * constraint specified on edges between nodes.\n *\n * This basic structure is derived from Gansner, et al., \"A Technique for\n * Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a connected DAG\n *    2. Graph nodes must be objects\n *    3. Graph edges must have \"weight\" and \"minlen\" attributes\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have a \"rank\" attribute based on the results of the\n *       algorithm. Ranks can start at any index (including negative), we'll\n *       fix them up later.\n */\nfunction rank(g) {\n  switch (g.graph().ranker) {\n    case 'network-simplex':\n      networkSimplexRanker(g);\n      break;\n    case 'tight-tree':\n      tightTreeRanker(g);\n      break;\n    case 'longest-path':\n      longestPathRanker(g);\n      break;\n    default:\n      networkSimplexRanker(g);\n  }\n}\n\n// A fast and simple ranker, but results are far from optimal.\nvar longestPathRanker = longestPath;\n\nfunction tightTreeRanker(g) {\n  longestPath(g);\n  feasibleTree(g);\n}\n\nfunction networkSimplexRanker(g) {\n  networkSimplex(g);\n}\n","export { parentDummyChains };\nexport default parentDummyChains;\n\nfunction parentDummyChains(g) {\n  let postorderNums = postorder(g);\n\n  g.graph().dummyChains.forEach((v) => {\n    let node = g.node(v);\n    let edgeObj = node.edgeObj;\n    let pathData = findPath(g, postorderNums, edgeObj.v, edgeObj.w);\n    let path = pathData.path;\n    let lca = pathData.lca;\n    let pathIdx = 0;\n    let pathV = path[pathIdx];\n    let ascending = true;\n\n    while (v !== edgeObj.w) {\n      node = g.node(v);\n\n      if (ascending) {\n        while ((pathV = path[pathIdx]) !== lca && g.node(pathV).maxRank < node.rank) {\n          pathIdx++;\n        }\n\n        if (pathV === lca) {\n          ascending = false;\n        }\n      }\n\n      if (!ascending) {\n        while (\n          pathIdx < path.length - 1 &&\n          g.node((pathV = path[pathIdx + 1])).minRank <= node.rank\n        ) {\n          pathIdx++;\n        }\n        pathV = path[pathIdx];\n      }\n\n      g.setParent(v, pathV);\n      v = g.successors(v)[0];\n    }\n  });\n}\n\n// Find a path from v to w through the lowest common ancestor (LCA). Return the\n// full path and the LCA.\nfunction findPath(g, postorderNums, v, w) {\n  let vPath = [];\n  let wPath = [];\n  let low = Math.min(postorderNums[v].low, postorderNums[w].low);\n  let lim = Math.max(postorderNums[v].lim, postorderNums[w].lim);\n  let parent;\n  let lca;\n\n  // Traverse up from v to find the LCA\n  parent = v;\n  do {\n    parent = g.parent(parent);\n    vPath.push(parent);\n  } while (parent && (postorderNums[parent].low > low || lim > postorderNums[parent].lim));\n  lca = parent;\n\n  // Traverse from w to LCA\n  parent = w;\n  while ((parent = g.parent(parent)) !== lca) {\n    wPath.push(parent);\n  }\n\n  return { path: vPath.concat(wPath.reverse()), lca: lca };\n}\n\nfunction postorder(g) {\n  let result = {};\n  let lim = 0;\n\n  function dfs(v) {\n    let low = lim;\n    g.children(v).forEach(dfs);\n    result[v] = { low: low, lim: lim++ };\n  }\n  g.children().forEach(dfs);\n\n  return result;\n}\n","import { util } from './util';\n\nexport const nestingGraph = {\n  run,\n  cleanup,\n};\n\nexport default nestingGraph;\n\n/*\n * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,\n * adds appropriate edges to ensure that all cluster nodes are placed between\n * these boundaries, and ensures that the graph is connected.\n *\n * In addition we ensure, through the use of the minlen property, that nodes\n * and subgraph border nodes to not end up on the same rank.\n *\n * Preconditions:\n *\n *    1. Input graph is a DAG\n *    2. Nodes in the input graph has a minlen attribute\n *\n * Postconditions:\n *\n *    1. Input graph is connected.\n *    2. Dummy nodes are added for the tops and bottoms of subgraphs.\n *    3. The minlen attribute for nodes is adjusted to ensure nodes do not\n *       get placed on the same rank as subgraph border nodes.\n *\n * The nesting graph idea comes from Sander, \"Layout of Compound Directed\n * Graphs.\"\n */\nfunction run(g) {\n  let root = util.addDummyNode(g, 'root', {}, '_root');\n  let depths = treeDepths(g);\n  let depthsArr = Object.values(depths);\n  let height = util.applyWithChunking(Math.max, depthsArr) - 1; // Note: depths is an Object not an array\n  let nodeSep = 2 * height + 1;\n\n  g.graph().nestingRoot = root;\n\n  // Multiply minlen by nodeSep to align nodes on non-border ranks.\n  g.edges().forEach((e) => (g.edge(e).minlen *= nodeSep));\n\n  // Calculate a weight that is sufficient to keep subgraphs vertically compact\n  let weight = sumWeights(g) + 1;\n\n  // Create border nodes and link them up\n  g.children().forEach((child) => dfs(g, root, nodeSep, weight, height, depths, child));\n\n  // Save the multiplier for node layers for later removal of empty border\n  // layers.\n  g.graph().nodeRankFactor = nodeSep;\n}\n\nfunction dfs(g, root, nodeSep, weight, height, depths, v) {\n  let children = g.children(v);\n  if (!children.length) {\n    if (v !== root) {\n      g.setEdge(root, v, { weight: 0, minlen: nodeSep });\n    }\n    return;\n  }\n\n  let top = util.addBorderNode(g, '_bt');\n  let bottom = util.addBorderNode(g, '_bb');\n  let label = g.node(v);\n\n  g.setParent(top, v);\n  label.borderTop = top;\n  g.setParent(bottom, v);\n  label.borderBottom = bottom;\n\n  children.forEach((child) => {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n\n    let childNode = g.node(child);\n    let childTop = childNode.borderTop ? childNode.borderTop : child;\n    let childBottom = childNode.borderBottom ? childNode.borderBottom : child;\n    let thisWeight = childNode.borderTop ? weight : 2 * weight;\n    let minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;\n\n    g.setEdge(top, childTop, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true,\n    });\n\n    g.setEdge(childBottom, bottom, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true,\n    });\n  });\n\n  if (!g.parent(v)) {\n    g.setEdge(root, top, { weight: 0, minlen: height + depths[v] });\n  }\n}\n\nfunction treeDepths(g) {\n  var depths = {};\n  function dfs(v, depth) {\n    var children = g.children(v);\n    if (children && children.length) {\n      children.forEach((child) => dfs(child, depth + 1));\n    }\n    depths[v] = depth;\n  }\n  g.children().forEach((v) => dfs(v, 1));\n  return depths;\n}\n\nfunction sumWeights(g) {\n  return g.edges().reduce((acc, e) => acc + g.edge(e).weight, 0);\n}\n\nfunction cleanup(g) {\n  var graphLabel = g.graph();\n  g.removeNode(graphLabel.nestingRoot);\n  delete graphLabel.nestingRoot;\n  g.edges().forEach((e) => {\n    var edge = g.edge(e);\n    if (edge.nestingEdge) {\n      g.removeEdge(e);\n    }\n  });\n}\n","import { util } from './util';\n\nexport { addBorderSegments };\nexport default addBorderSegments;\n\nfunction addBorderSegments(g) {\n  function dfs(v) {\n    let children = g.children(v);\n    let node = g.node(v);\n    if (children.length) {\n      children.forEach(dfs);\n    }\n\n    if (Object.hasOwn(node, 'minRank')) {\n      node.borderLeft = [];\n      node.borderRight = [];\n      for (let rank = node.minRank, maxRank = node.maxRank + 1; rank < maxRank; ++rank) {\n        addBorderNode(g, 'borderLeft', '_bl', v, node, rank);\n        addBorderNode(g, 'borderRight', '_br', v, node, rank);\n      }\n    }\n  }\n\n  g.children().forEach(dfs);\n}\n\nfunction addBorderNode(g, prop, prefix, sg, sgNode, rank) {\n  let label = { width: 0, height: 0, rank: rank, borderType: prop };\n  let prev = sgNode[prop][rank - 1];\n  let curr = util.addDummyNode(g, 'border', label, prefix);\n  sgNode[prop][rank] = curr;\n  g.setParent(curr, sg);\n  if (prev) {\n    g.setEdge(prev, curr, { weight: 1 });\n  }\n}\n","'use strict';\n\nexport const coordinateSystem = {\n  adjust,\n  undo,\n};\n\nexport default coordinateSystem;\n\nfunction adjust(g) {\n  let rankDir = g.graph().rankdir.toLowerCase();\n  if (rankDir === 'lr' || rankDir === 'rl') {\n    swapWidthHeight(g);\n  }\n}\n\nfunction undo(g) {\n  let rankDir = g.graph().rankdir.toLowerCase();\n  if (rankDir === 'bt' || rankDir === 'rl') {\n    reverseY(g);\n  }\n\n  if (rankDir === 'lr' || rankDir === 'rl') {\n    swapXY(g);\n    swapWidthHeight(g);\n  }\n}\n\nfunction swapWidthHeight(g) {\n  g.nodes().forEach((v) => swapWidthHeightOne(g.node(v)));\n  g.edges().forEach((e) => swapWidthHeightOne(g.edge(e)));\n}\n\nfunction swapWidthHeightOne(attrs) {\n  let w = attrs.width;\n  attrs.width = attrs.height;\n  attrs.height = w;\n}\n\nfunction reverseY(g) {\n  g.nodes().forEach((v) => reverseYOne(g.node(v)));\n\n  g.edges().forEach((e) => {\n    let edge = g.edge(e);\n    edge.points.forEach(reverseYOne);\n    if (Object.hasOwn(edge, 'y')) {\n      reverseYOne(edge);\n    }\n  });\n}\n\nfunction reverseYOne(attrs) {\n  attrs.y = -attrs.y;\n}\n\nfunction swapXY(g) {\n  g.nodes().forEach((v) => swapXYOne(g.node(v)));\n\n  g.edges().forEach((e) => {\n    let edge = g.edge(e);\n    edge.points.forEach(swapXYOne);\n    if (Object.hasOwn(edge, 'x')) {\n      swapXYOne(edge);\n    }\n  });\n}\n\nfunction swapXYOne(attrs) {\n  let x = attrs.x;\n  attrs.x = attrs.y;\n  attrs.y = x;\n}\n","'use strict';\n\nimport { util } from '../util';\n\nexport { initOrder };\nexport default initOrder;\n\n/*\n * Assigns an initial order value for each node by performing a DFS search\n * starting from nodes in the first rank. Nodes are assigned an order in their\n * rank as they are first visited.\n *\n * This approach comes from Gansner, et al., \"A Technique for Drawing Directed\n * Graphs.\"\n *\n * Returns a layering matrix with an array per layer and each layer sorted by\n * the order of its nodes.\n */\nfunction initOrder(g) {\n  let visited = {};\n  let simpleNodes = g.nodes().filter((v) => !g.children(v).length);\n  let simpleNodesRanks = simpleNodes.map((v) => g.node(v).rank);\n  let maxRank = util.applyWithChunking(Math.max, simpleNodesRanks);\n  let layers = util.range(maxRank + 1).map(() => []);\n\n  function dfs(v) {\n    if (visited[v]) return;\n    visited[v] = true;\n    let node = g.node(v);\n    layers[node.rank].push(v);\n    g.successors(v).forEach(dfs);\n  }\n\n  let orderedVs = simpleNodes.sort((a, b) => g.node(a).rank - g.node(b).rank);\n  orderedVs.forEach(dfs);\n\n  return layers;\n}\n","'use strict';\n\nimport { zipObject } from '../util';\n\nexport { crossCount };\nexport default crossCount;\n\n/*\n * A function that takes a layering (an array of layers, each with an array of\n * ordererd nodes) and a graph and returns a weighted crossing count.\n *\n * Pre-conditions:\n *\n *    1. Input graph must be simple (not a multigraph), directed, and include\n *       only simple edges.\n *    2. Edges in the input graph must have assigned weights.\n *\n * Post-conditions:\n *\n *    1. The graph and layering matrix are left unchanged.\n *\n * This algorithm is derived from Barth, et al., \"Bilayer Cross Counting.\"\n */\nfunction crossCount(g, layering) {\n  let cc = 0;\n  for (let i = 1; i < layering.length; ++i) {\n    cc += twoLayerCrossCount(g, layering[i - 1], layering[i]);\n  }\n  return cc;\n}\n\nfunction twoLayerCrossCount(g, northLayer, southLayer) {\n  // Sort all of the edges between the north and south layers by their position\n  // in the north layer and then the south. Map these edges to the position of\n  // their head in the south layer.\n  let southPos = zipObject(\n    southLayer,\n    southLayer.map((v, i) => i)\n  );\n  let southEntries = northLayer.flatMap((v) => {\n    return g\n      .outEdges(v)\n      .map((e) => {\n        return { pos: southPos[e.w], weight: g.edge(e).weight };\n      })\n      .sort((a, b) => a.pos - b.pos);\n  });\n\n  // Build the accumulator tree\n  let firstIndex = 1;\n  while (firstIndex < southLayer.length) firstIndex <<= 1;\n  let treeSize = 2 * firstIndex - 1;\n  firstIndex -= 1;\n  let tree = new Array(treeSize).fill(0);\n\n  // Calculate the weighted crossings\n  let cc = 0;\n  southEntries.forEach((entry) => {\n    let index = entry.pos + firstIndex;\n    tree[index] += entry.weight;\n    let weightSum = 0;\n    while (index > 0) {\n      if (index % 2) {\n        weightSum += tree[index + 1];\n      }\n      index = (index - 1) >> 1;\n      tree[index] += entry.weight;\n    }\n    cc += entry.weight * weightSum;\n  });\n\n  return cc;\n}\n","export { barycenter };\nexport default barycenter;\n\nfunction barycenter(g, movable = []) {\n  return movable.map((v) => {\n    let inV = g.inEdges(v);\n    if (!inV.length) {\n      return { v: v };\n    } else {\n      let result = inV.reduce(\n        (acc, e) => {\n          let edge = g.edge(e),\n            nodeU = g.node(e.v);\n          return {\n            sum: acc.sum + edge.weight * nodeU.order,\n            weight: acc.weight + edge.weight,\n          };\n        },\n        { sum: 0, weight: 0 }\n      );\n\n      return {\n        v: v,\n        barycenter: result.sum / result.weight,\n        weight: result.weight,\n      };\n    }\n  });\n}\n","'use strict';\n\nimport util from '../util';\n\nexport { resolveConflicts };\nexport default resolveConflicts;\n\n/*\n * Given a list of entries of the form {v, barycenter, weight} and a\n * constraint graph this function will resolve any conflicts between the\n * constraint graph and the barycenters for the entries. If the barycenters for\n * an entry would violate a constraint in the constraint graph then we coalesce\n * the nodes in the conflict into a new node that respects the contraint and\n * aggregates barycenter and weight information.\n *\n * This implementation is based on the description in Forster, \"A Fast and\n * Simple Hueristic for Constrained Two-Level Crossing Reduction,\" thought it\n * differs in some specific details.\n *\n * Pre-conditions:\n *\n *    1. Each entry has the form {v, barycenter, weight}, or if the node has\n *       no barycenter, then {v}.\n *\n * Returns:\n *\n *    A new list of entries of the form {vs, i, barycenter, weight}. The list\n *    `vs` may either be a singleton or it may be an aggregation of nodes\n *    ordered such that they do not violate constraints from the constraint\n *    graph. The property `i` is the lowest original index of any of the\n *    elements in `vs`.\n */\nfunction resolveConflicts(entries, cg) {\n  let mappedEntries = {};\n  entries.forEach((entry, i) => {\n    let tmp = (mappedEntries[entry.v] = {\n      indegree: 0,\n      in: [],\n      out: [],\n      vs: [entry.v],\n      i: i,\n    });\n    if (entry.barycenter !== undefined) {\n      tmp.barycenter = entry.barycenter;\n      tmp.weight = entry.weight;\n    }\n  });\n\n  cg.edges().forEach((e) => {\n    let entryV = mappedEntries[e.v];\n    let entryW = mappedEntries[e.w];\n    if (entryV !== undefined && entryW !== undefined) {\n      entryW.indegree++;\n      entryV.out.push(mappedEntries[e.w]);\n    }\n  });\n\n  let sourceSet = Object.values(mappedEntries).filter((entry) => !entry.indegree);\n\n  return doResolveConflicts(sourceSet);\n}\n\nfunction doResolveConflicts(sourceSet) {\n  let entries = [];\n\n  function handleIn(vEntry) {\n    return (uEntry) => {\n      if (uEntry.merged) {\n        return;\n      }\n      if (\n        uEntry.barycenter === undefined ||\n        vEntry.barycenter === undefined ||\n        uEntry.barycenter >= vEntry.barycenter\n      ) {\n        mergeEntries(vEntry, uEntry);\n      }\n    };\n  }\n\n  function handleOut(vEntry) {\n    return (wEntry) => {\n      wEntry['in'].push(vEntry);\n      if (--wEntry.indegree === 0) {\n        sourceSet.push(wEntry);\n      }\n    };\n  }\n\n  while (sourceSet.length) {\n    let entry = sourceSet.pop();\n    entries.push(entry);\n    entry['in'].reverse().forEach(handleIn(entry));\n    entry.out.forEach(handleOut(entry));\n  }\n\n  return entries\n    .filter((entry) => !entry.merged)\n    .map((entry) => {\n      return util.pick(entry, ['vs', 'i', 'barycenter', 'weight']);\n    });\n}\n\nfunction mergeEntries(target, source) {\n  let sum = 0;\n  let weight = 0;\n\n  if (target.weight) {\n    sum += target.barycenter * target.weight;\n    weight += target.weight;\n  }\n\n  if (source.weight) {\n    sum += source.barycenter * source.weight;\n    weight += source.weight;\n  }\n\n  target.vs = source.vs.concat(target.vs);\n  target.barycenter = sum / weight;\n  target.weight = weight;\n  target.i = Math.min(source.i, target.i);\n  source.merged = true;\n}\n","import util from '../util';\n\nexport { sort };\nexport default sort;\n\nfunction sort(entries, biasRight) {\n  let parts = util.partition(entries, (entry) => {\n    return Object.hasOwn(entry, 'barycenter');\n  });\n  let sortable = parts.lhs,\n    unsortable = parts.rhs.sort((a, b) => b.i - a.i),\n    vs = [],\n    sum = 0,\n    weight = 0,\n    vsIndex = 0;\n\n  sortable.sort(compareWithBias(!!biasRight));\n\n  vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n\n  sortable.forEach((entry) => {\n    vsIndex += entry.vs.length;\n    vs.push(entry.vs);\n    sum += entry.barycenter * entry.weight;\n    weight += entry.weight;\n    vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n  });\n\n  let result = { vs: vs.flat(true) };\n  if (weight) {\n    result.barycenter = sum / weight;\n    result.weight = weight;\n  }\n  return result;\n}\n\nfunction consumeUnsortable(vs, unsortable, index) {\n  let last;\n  while (unsortable.length && (last = unsortable[unsortable.length - 1]).i <= index) {\n    unsortable.pop();\n    vs.push(last.vs);\n    index++;\n  }\n  return index;\n}\n\nfunction compareWithBias(bias) {\n  return (entryV, entryW) => {\n    if (entryV.barycenter < entryW.barycenter) {\n      return -1;\n    } else if (entryV.barycenter > entryW.barycenter) {\n      return 1;\n    }\n\n    return !bias ? entryV.i - entryW.i : entryW.i - entryV.i;\n  };\n}\n","import barycenter from './barycenter';\nimport resolveConflicts from './resolve-conflicts';\nimport sort from './sort';\n\nexport { sortSubgraph };\nexport default sortSubgraph;\n\nfunction sortSubgraph(g, v, cg, biasRight) {\n  let movable = g.children(v);\n  let node = g.node(v);\n  let bl = node ? node.borderLeft : undefined;\n  let br = node ? node.borderRight : undefined;\n  let subgraphs = {};\n\n  if (bl) {\n    movable = movable.filter((w) => w !== bl && w !== br);\n  }\n\n  let barycenters = barycenter(g, movable);\n  barycenters.forEach((entry) => {\n    if (g.children(entry.v).length) {\n      let subgraphResult = sortSubgraph(g, entry.v, cg, biasRight);\n      subgraphs[entry.v] = subgraphResult;\n      if (Object.hasOwn(subgraphResult, 'barycenter')) {\n        mergeBarycenters(entry, subgraphResult);\n      }\n    }\n  });\n\n  let entries = resolveConflicts(barycenters, cg);\n  expandSubgraphs(entries, subgraphs);\n\n  let result = sort(entries, biasRight);\n\n  if (bl) {\n    result.vs = [bl, result.vs, br].flat(true);\n    if (g.predecessors(bl).length) {\n      let blPred = g.node(g.predecessors(bl)[0]),\n        brPred = g.node(g.predecessors(br)[0]);\n      if (!Object.hasOwn(result, 'barycenter')) {\n        result.barycenter = 0;\n        result.weight = 0;\n      }\n      result.barycenter =\n        (result.barycenter * result.weight + blPred.order + brPred.order) / (result.weight + 2);\n      result.weight += 2;\n    }\n  }\n\n  return result;\n}\n\nfunction expandSubgraphs(entries, subgraphs) {\n  entries.forEach((entry) => {\n    entry.vs = entry.vs.flatMap((v) => {\n      if (subgraphs[v]) {\n        return subgraphs[v].vs;\n      }\n      return v;\n    });\n  });\n}\n\nfunction mergeBarycenters(target, other) {\n  if (target.barycenter !== undefined) {\n    target.barycenter =\n      (target.barycenter * target.weight + other.barycenter * other.weight) /\n      (target.weight + other.weight);\n    target.weight += other.weight;\n  } else {\n    target.barycenter = other.barycenter;\n    target.weight = other.weight;\n  }\n}\n","import { Graph } from '@dagrejs/graphlib';\nimport { util } from '../util';\n\nexport { buildLayerGraph };\nexport default buildLayerGraph;\n\n/*\n * Constructs a graph that can be used to sort a layer of nodes. The graph will\n * contain all base and subgraph nodes from the request layer in their original\n * hierarchy and any edges that are incident on these nodes and are of the type\n * requested by the \"relationship\" parameter.\n *\n * Nodes from the requested rank that do not have parents are assigned a root\n * node in the output graph, which is set in the root graph attribute. This\n * makes it easy to walk the hierarchy of movable nodes during ordering.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG\n *    2. Base nodes in the input graph have a rank attribute\n *    3. Subgraph nodes in the input graph has minRank and maxRank attributes\n *    4. Edges have an assigned weight\n *\n * Post-conditions:\n *\n *    1. Output graph has all nodes in the movable rank with preserved\n *       hierarchy.\n *    2. Root nodes in the movable layer are made children of the node\n *       indicated by the root attribute of the graph.\n *    3. Non-movable nodes incident on movable nodes, selected by the\n *       relationship parameter, are included in the graph (without hierarchy).\n *    4. Edges incident on movable nodes, selected by the relationship\n *       parameter, are added to the output graph.\n *    5. The weights for copied edges are aggregated as need, since the output\n *       graph is not a multi-graph.\n */\nfunction buildLayerGraph(g, rank, relationship) {\n  let root = createRootNode(g),\n    result = new Graph({ compound: true })\n      .setGraph({ root: root })\n      .setDefaultNodeLabel((v) => g.node(v));\n\n  g.nodes().forEach((v) => {\n    let node = g.node(v),\n      parent = g.parent(v);\n\n    if (node.rank === rank || (node.minRank <= rank && rank <= node.maxRank)) {\n      result.setNode(v);\n      result.setParent(v, parent || root);\n\n      // This assumes we have only short edges!\n      g[relationship](v).forEach((e) => {\n        let u = e.v === v ? e.w : e.v,\n          edge = result.edge(u, v),\n          weight = edge !== undefined ? edge.weight : 0;\n        result.setEdge(u, v, { weight: g.edge(e).weight + weight });\n      });\n\n      if (Object.hasOwn(node, 'minRank')) {\n        result.setNode(v, {\n          borderLeft: node.borderLeft[rank],\n          borderRight: node.borderRight[rank],\n        });\n      }\n    }\n  });\n\n  return result;\n}\n\nfunction createRootNode(g) {\n  var v;\n  while (g.hasNode((v = util.uniqueId('_root'))));\n  return v;\n}\n","export { addSubgraphConstraints };\nexport default addSubgraphConstraints;\n\nfunction addSubgraphConstraints(g, cg, vs) {\n  let prev = {},\n    rootPrev;\n\n  vs.forEach((v) => {\n    let child = g.parent(v),\n      parent,\n      prevChild;\n    while (child) {\n      parent = g.parent(child);\n      if (parent) {\n        prevChild = prev[parent];\n        prev[parent] = child;\n      } else {\n        prevChild = rootPrev;\n        rootPrev = child;\n      }\n      if (prevChild && prevChild !== child) {\n        cg.setEdge(prevChild, child);\n        return;\n      }\n      child = parent;\n    }\n  });\n\n  /*\n  function dfs(v) {\n    var children = v ? g.children(v) : g.children();\n    if (children.length) {\n      var min = Number.POSITIVE_INFINITY,\n          subgraphs = [];\n      children.forEach(function(child) {\n        var childMin = dfs(child);\n        if (g.children(child).length) {\n          subgraphs.push({ v: child, order: childMin });\n        }\n        min = Math.min(min, childMin);\n      });\n      _.sortBy(subgraphs, \"order\").reduce(function(prev, curr) {\n        cg.setEdge(prev.v, curr.v);\n        return curr;\n      });\n      return min;\n    }\n    return g.node(v).order;\n  }\n  dfs(undefined);\n  */\n}\n","'use strict';\n\nimport initOrder from './init-order';\nimport crossCount from './cross-count';\nimport sortSubgraph from './sort-subgraph';\nimport buildLayerGraph from './build-layer-graph';\nimport addSubgraphConstraints from './add-subgraph-constraints';\nimport { Graph } from '@dagrejs/graphlib';\nimport { util } from '../util';\n\nexport default order;\n\n/*\n * Applies heuristics to minimize edge crossings in the graph and sets the best\n * order solution as an order attribute on each node.\n *\n * Pre-conditions:\n *\n *    1. Graph must be DAG\n *    2. Graph nodes must be objects with a \"rank\" attribute\n *    3. Graph edges must have the \"weight\" attribute\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have an \"order\" attribute based on the results of the\n *       algorithm.\n */\nfunction order(g, opts) {\n  if (opts && typeof opts.customOrder === 'function') {\n    opts.customOrder(g, order);\n    return;\n  }\n\n  let maxRank = util.maxRank(g),\n    downLayerGraphs = buildLayerGraphs(g, util.range(1, maxRank + 1), 'inEdges'),\n    upLayerGraphs = buildLayerGraphs(g, util.range(maxRank - 1, -1, -1), 'outEdges');\n\n  let layering = initOrder(g);\n  assignOrder(g, layering);\n\n  if (opts && opts.disableOptimalOrderHeuristic) {\n    return;\n  }\n\n  let bestCC = Number.POSITIVE_INFINITY,\n    best;\n\n  for (let i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {\n    sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2);\n\n    layering = util.buildLayerMatrix(g);\n    let cc = crossCount(g, layering);\n    if (cc < bestCC) {\n      lastBest = 0;\n      best = Object.assign({}, layering);\n      bestCC = cc;\n    }\n  }\n\n  assignOrder(g, best);\n}\n\nfunction buildLayerGraphs(g, ranks, relationship) {\n  return ranks.map(function (rank) {\n    return buildLayerGraph(g, rank, relationship);\n  });\n}\n\nfunction sweepLayerGraphs(layerGraphs, biasRight) {\n  let cg = new Graph();\n  layerGraphs.forEach(function (lg) {\n    let root = lg.graph().root;\n    let sorted = sortSubgraph(lg, root, cg, biasRight);\n    sorted.vs.forEach((v, i) => (lg.node(v).order = i));\n    addSubgraphConstraints(lg, cg, sorted.vs);\n  });\n}\n\nfunction assignOrder(g, layering) {\n  Object.values(layering).forEach((layer) => layer.forEach((v, i) => (g.node(v).order = i)));\n}\n","'use strict';\n\nimport { Graph } from '@dagrejs/graphlib';\nimport { util } from '../util';\n\n/*\n * This module provides coordinate assignment based on Brandes and Köpf, \"Fast\n * and Simple Horizontal Coordinate Assignment.\"\n */\n\nexport {\n  positionX,\n  findType1Conflicts,\n  findType2Conflicts,\n  addConflict,\n  hasConflict,\n  verticalAlignment,\n  horizontalCompaction,\n  alignCoordinates,\n  findSmallestWidthAlignment,\n  balance,\n};\n\n/*\n * Marks all edges in the graph with a type-1 conflict with the \"type1Conflict\"\n * property. A type-1 conflict is one where a non-inner segment crosses an\n * inner segment. An inner segment is an edge with both incident nodes marked\n * with the \"dummy\" property.\n *\n * This algorithm scans layer by layer, starting with the second, for type-1\n * conflicts between the current layer and the previous layer. For each layer\n * it scans the nodes from left to right until it reaches one that is incident\n * on an inner segment. It then scans predecessors to determine if they have\n * edges that cross that inner segment. At the end a final scan is done for all\n * nodes on the current rank to see if they cross the last visited inner\n * segment.\n *\n * This algorithm (safely) assumes that a dummy node will only be incident on a\n * single node in the layers being scanned.\n */\nfunction findType1Conflicts(g, layering) {\n  let conflicts = {};\n\n  function visitLayer(prevLayer, layer) {\n    let // last visited node in the previous layer that is incident on an inner\n      // segment.\n      k0 = 0,\n      // Tracks the last node in this layer scanned for crossings with a type-1\n      // segment.\n      scanPos = 0,\n      prevLayerLength = prevLayer.length,\n      lastNode = layer[layer.length - 1];\n\n    layer.forEach((v, i) => {\n      let w = findOtherInnerSegmentNode(g, v),\n        k1 = w ? g.node(w).order : prevLayerLength;\n\n      if (w || v === lastNode) {\n        layer.slice(scanPos, i + 1).forEach((scanNode) => {\n          g.predecessors(scanNode).forEach((u) => {\n            let uLabel = g.node(u),\n              uPos = uLabel.order;\n            if ((uPos < k0 || k1 < uPos) && !(uLabel.dummy && g.node(scanNode).dummy)) {\n              addConflict(conflicts, u, scanNode);\n            }\n          });\n        });\n        scanPos = i + 1;\n        k0 = k1;\n      }\n    });\n\n    return layer;\n  }\n\n  layering.length && layering.reduce(visitLayer);\n\n  return conflicts;\n}\n\nfunction findType2Conflicts(g, layering) {\n  let conflicts = {};\n\n  function scan(south, southPos, southEnd, prevNorthBorder, nextNorthBorder) {\n    let v;\n    util.range(southPos, southEnd).forEach((i) => {\n      v = south[i];\n      if (g.node(v).dummy) {\n        g.predecessors(v).forEach((u) => {\n          let uNode = g.node(u);\n          if (uNode.dummy && (uNode.order < prevNorthBorder || uNode.order > nextNorthBorder)) {\n            addConflict(conflicts, u, v);\n          }\n        });\n      }\n    });\n  }\n\n  function visitLayer(north, south) {\n    let prevNorthPos = -1,\n      nextNorthPos,\n      southPos = 0;\n\n    south.forEach((v, southLookahead) => {\n      if (g.node(v).dummy === 'border') {\n        let predecessors = g.predecessors(v);\n        if (predecessors.length) {\n          nextNorthPos = g.node(predecessors[0]).order;\n          scan(south, southPos, southLookahead, prevNorthPos, nextNorthPos);\n          southPos = southLookahead;\n          prevNorthPos = nextNorthPos;\n        }\n      }\n      scan(south, southPos, south.length, nextNorthPos, north.length);\n    });\n\n    return south;\n  }\n\n  layering.length && layering.reduce(visitLayer);\n\n  return conflicts;\n}\n\nfunction findOtherInnerSegmentNode(g, v) {\n  if (g.node(v).dummy) {\n    return g.predecessors(v).find((u) => g.node(u).dummy);\n  }\n}\n\nfunction addConflict(conflicts, v, w) {\n  if (v > w) {\n    let tmp = v;\n    v = w;\n    w = tmp;\n  }\n\n  let conflictsV = conflicts[v];\n  if (!conflictsV) {\n    conflicts[v] = conflictsV = {};\n  }\n  conflictsV[w] = true;\n}\n\nfunction hasConflict(conflicts, v, w) {\n  if (v > w) {\n    let tmp = v;\n    v = w;\n    w = tmp;\n  }\n  return !!conflicts[v] && Object.hasOwn(conflicts[v], w);\n}\n\n/*\n * Try to align nodes into vertical \"blocks\" where possible. This algorithm\n * attempts to align a node with one of its median neighbors. If the edge\n * connecting a neighbor is a type-1 conflict then we ignore that possibility.\n * If a previous node has already formed a block with a node after the node\n * we're trying to form a block with, we also ignore that possibility - our\n * blocks would be split in that scenario.\n */\nfunction verticalAlignment(g, layering, conflicts, neighborFn) {\n  let root = {},\n    align = {},\n    pos = {};\n\n  // We cache the position here based on the layering because the graph and\n  // layering may be out of sync. The layering matrix is manipulated to\n  // generate different extreme alignments.\n  layering.forEach((layer) => {\n    layer.forEach((v, order) => {\n      root[v] = v;\n      align[v] = v;\n      pos[v] = order;\n    });\n  });\n\n  layering.forEach((layer) => {\n    let prevIdx = -1;\n    layer.forEach((v) => {\n      let ws = neighborFn(v);\n      if (ws.length) {\n        ws = ws.sort((a, b) => pos[a] - pos[b]);\n        let mp = (ws.length - 1) / 2;\n        for (let i = Math.floor(mp), il = Math.ceil(mp); i <= il; ++i) {\n          let w = ws[i];\n          if (align[v] === v && prevIdx < pos[w] && !hasConflict(conflicts, v, w)) {\n            align[w] = v;\n            align[v] = root[v] = root[w];\n            prevIdx = pos[w];\n          }\n        }\n      }\n    });\n  });\n\n  return { root: root, align: align };\n}\n\nfunction horizontalCompaction(g, layering, root, align, reverseSep) {\n  // This portion of the algorithm differs from BK due to a number of problems.\n  // Instead of their algorithm we construct a new block graph and do two\n  // sweeps. The first sweep places blocks with the smallest possible\n  // coordinates. The second sweep removes unused space by moving blocks to the\n  // greatest coordinates without violating separation.\n  let xs = {},\n    blockG = buildBlockGraph(g, layering, root, reverseSep),\n    borderType = reverseSep ? 'borderLeft' : 'borderRight';\n\n  function iterate(setXsFunc, nextNodesFunc) {\n    let stack = blockG.nodes();\n    let elem = stack.pop();\n    let visited = {};\n    while (elem) {\n      if (visited[elem]) {\n        setXsFunc(elem);\n      } else {\n        visited[elem] = true;\n        stack.push(elem);\n        stack = stack.concat(nextNodesFunc(elem));\n      }\n\n      elem = stack.pop();\n    }\n  }\n\n  // First pass, assign smallest coordinates\n  function pass1(elem) {\n    xs[elem] = blockG.inEdges(elem).reduce((acc, e) => {\n      return Math.max(acc, xs[e.v] + blockG.edge(e));\n    }, 0);\n  }\n\n  // Second pass, assign greatest coordinates\n  function pass2(elem) {\n    let min = blockG.outEdges(elem).reduce((acc, e) => {\n      return Math.min(acc, xs[e.w] - blockG.edge(e));\n    }, Number.POSITIVE_INFINITY);\n\n    let node = g.node(elem);\n    if (min !== Number.POSITIVE_INFINITY && node.borderType !== borderType) {\n      xs[elem] = Math.max(xs[elem], min);\n    }\n  }\n\n  iterate(pass1, blockG.predecessors.bind(blockG));\n  iterate(pass2, blockG.successors.bind(blockG));\n\n  // Assign x coordinates to all nodes\n  Object.keys(align).forEach((v) => (xs[v] = xs[root[v]]));\n\n  return xs;\n}\n\nfunction buildBlockGraph(g, layering, root, reverseSep) {\n  let blockGraph = new Graph(),\n    graphLabel = g.graph(),\n    sepFn = sep(graphLabel.nodesep, graphLabel.edgesep, reverseSep);\n\n  layering.forEach((layer) => {\n    let u;\n    layer.forEach((v) => {\n      let vRoot = root[v];\n      blockGraph.setNode(vRoot);\n      if (u) {\n        var uRoot = root[u],\n          prevMax = blockGraph.edge(uRoot, vRoot);\n        blockGraph.setEdge(uRoot, vRoot, Math.max(sepFn(g, v, u), prevMax || 0));\n      }\n      u = v;\n    });\n  });\n\n  return blockGraph;\n}\n\n/*\n * Returns the alignment that has the smallest width of the given alignments.\n */\nfunction findSmallestWidthAlignment(g, xss) {\n  return Object.values(xss).reduce(\n    (currentMinAndXs, xs) => {\n      let max = Number.NEGATIVE_INFINITY;\n      let min = Number.POSITIVE_INFINITY;\n\n      Object.entries(xs).forEach(([v, x]) => {\n        let halfWidth = width(g, v) / 2;\n\n        max = Math.max(x + halfWidth, max);\n        min = Math.min(x - halfWidth, min);\n      });\n\n      const newMin = max - min;\n      if (newMin < currentMinAndXs[0]) {\n        currentMinAndXs = [newMin, xs];\n      }\n      return currentMinAndXs;\n    },\n    [Number.POSITIVE_INFINITY, null]\n  )[1];\n}\n\n/*\n * Align the coordinates of each of the layout alignments such that\n * left-biased alignments have their minimum coordinate at the same point as\n * the minimum coordinate of the smallest width alignment and right-biased\n * alignments have their maximum coordinate at the same point as the maximum\n * coordinate of the smallest width alignment.\n */\nfunction alignCoordinates(xss, alignTo) {\n  let alignToVals = Object.values(alignTo),\n    alignToMin = util.applyWithChunking(Math.min, alignToVals),\n    alignToMax = util.applyWithChunking(Math.max, alignToVals);\n\n  ['u', 'd'].forEach((vert) => {\n    ['l', 'r'].forEach((horiz) => {\n      let alignment = vert + horiz,\n        xs = xss[alignment];\n\n      if (xs === alignTo) return;\n\n      let xsVals = Object.values(xs);\n      let delta = alignToMin - util.applyWithChunking(Math.min, xsVals);\n      if (horiz !== 'l') {\n        delta = alignToMax - util.applyWithChunking(Math.max, xsVals);\n      }\n\n      if (delta) {\n        xss[alignment] = util.mapValues(xs, (x) => x + delta);\n      }\n    });\n  });\n}\n\nfunction balance(xss, align) {\n  return util.mapValues(xss.ul, (num, v) => {\n    if (align) {\n      return xss[align.toLowerCase()][v];\n    } else {\n      let xs = Object.values(xss)\n        .map((xs) => xs[v])\n        .sort((a, b) => a - b);\n      return (xs[1] + xs[2]) / 2;\n    }\n  });\n}\n\nfunction positionX(g) {\n  let layering = util.buildLayerMatrix(g);\n  let conflicts = Object.assign(findType1Conflicts(g, layering), findType2Conflicts(g, layering));\n\n  let xss = {};\n  let adjustedLayering;\n  ['u', 'd'].forEach((vert) => {\n    adjustedLayering = vert === 'u' ? layering : Object.values(layering).reverse();\n    ['l', 'r'].forEach((horiz) => {\n      if (horiz === 'r') {\n        adjustedLayering = adjustedLayering.map((inner) => {\n          return Object.values(inner).reverse();\n        });\n      }\n\n      let neighborFn = (vert === 'u' ? g.predecessors : g.successors).bind(g);\n      let align = verticalAlignment(g, adjustedLayering, conflicts, neighborFn);\n      let xs = horizontalCompaction(g, adjustedLayering, align.root, align.align, horiz === 'r');\n      if (horiz === 'r') {\n        xs = util.mapValues(xs, (x) => -x);\n      }\n      xss[vert + horiz] = xs;\n    });\n  });\n\n  let smallestWidth = findSmallestWidthAlignment(g, xss);\n  alignCoordinates(xss, smallestWidth);\n  return balance(xss, g.graph().align);\n}\n\nfunction sep(nodeSep, edgeSep, reverseSep) {\n  return (g, v, w) => {\n    let vLabel = g.node(v);\n    let wLabel = g.node(w);\n    let sum = 0;\n    let delta;\n\n    sum += vLabel.width / 2;\n    if (Object.hasOwn(vLabel, 'labelpos')) {\n      switch (vLabel.labelpos.toLowerCase()) {\n        case 'l':\n          delta = -vLabel.width / 2;\n          break;\n        case 'r':\n          delta = vLabel.width / 2;\n          break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    sum += (vLabel.dummy ? edgeSep : nodeSep) / 2;\n    sum += (wLabel.dummy ? edgeSep : nodeSep) / 2;\n\n    sum += wLabel.width / 2;\n    if (Object.hasOwn(wLabel, 'labelpos')) {\n      switch (wLabel.labelpos.toLowerCase()) {\n        case 'l':\n          delta = wLabel.width / 2;\n          break;\n        case 'r':\n          delta = -wLabel.width / 2;\n          break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    return sum;\n  };\n}\n\nfunction width(g, v) {\n  return g.node(v).width;\n}\n","'use strict';\n\nimport util from '../util';\nimport { positionX } from './bk';\n\nexport { position };\nexport default position;\n\nfunction position(g) {\n  g = util.asNonCompoundGraph(g);\n\n  positionY(g);\n  Object.entries(positionX(g)).forEach(([v, x]) => (g.node(v).x = x));\n}\n\nfunction positionY(g) {\n  let layering = util.buildLayerMatrix(g);\n  let rankSep = g.graph().ranksep;\n  let prevY = 0;\n  layering.forEach((layer) => {\n    const maxHeight = layer.reduce((acc, v) => {\n      const height = g.node(v).height;\n      if (acc > height) {\n        return acc;\n      } else {\n        return height;\n      }\n    }, 0);\n    layer.forEach((v) => (g.node(v).y = prevY + maxHeight / 2));\n    prevY += maxHeight + rankSep;\n  });\n}\n","'use strict';\n\nimport acyclic from './acyclic';\nimport normalize from './normalize';\nimport rank from './rank';\nimport { normalizeRanks, removeEmptyRanks, util } from './util';\nimport parentDummyChains from './parent-dummy-chains';\nimport nestingGraph from './nesting-graph';\nimport addBorderSegments from './add-border-segments';\nimport coordinateSystem from './coordinate-system';\nimport order from './order';\nimport position from './position';\nimport { Graph } from '@dagrejs/graphlib';\n\nexport {\n  layout,\n  buildLayoutGraph,\n  updateInputGraph,\n  makeSpaceForEdgeLabels,\n  removeSelfEdges,\n  injectEdgeLabelProxies,\n  assignRankMinMax,\n  removeEdgeLabelProxies,\n  insertSelfEdges,\n  positionSelfEdges,\n  removeBorderNodes,\n  fixupEdgeLabelCoords,\n  translateGraph,\n  assignNodeIntersects,\n  reversePointsForReversedEdges,\n};\n\nfunction layout(g, opts) {\n  let time = opts && opts.debugTiming ? util.time : util.notime;\n  time('layout', () => {\n    let layoutGraph = time('  buildLayoutGraph', () => buildLayoutGraph(g));\n    time('  runLayout', () => runLayout(layoutGraph, time, opts));\n    time('  updateInputGraph', () => updateInputGraph(g, layoutGraph));\n  });\n}\n\nfunction runLayout(g, time, opts) {\n  time('    makeSpaceForEdgeLabels', () => makeSpaceForEdgeLabels(g));\n  time('    removeSelfEdges', () => removeSelfEdges(g));\n  time('    acyclic', () => acyclic.run(g));\n  time('    nestingGraph.run', () => nestingGraph.run(g));\n  time('    rank', () => rank(util.asNonCompoundGraph(g)));\n  time('    injectEdgeLabelProxies', () => injectEdgeLabelProxies(g));\n  time('    removeEmptyRanks', () => removeEmptyRanks(g));\n  time('    nestingGraph.cleanup', () => nestingGraph.cleanup(g));\n  time('    normalizeRanks', () => normalizeRanks(g));\n  time('    assignRankMinMax', () => assignRankMinMax(g));\n  time('    removeEdgeLabelProxies', () => removeEdgeLabelProxies(g));\n  time('    normalize.run', () => normalize.run(g));\n  time('    parentDummyChains', () => parentDummyChains(g));\n  time('    addBorderSegments', () => addBorderSegments(g));\n  time('    order', () => order(g, opts));\n  time('    insertSelfEdges', () => insertSelfEdges(g));\n  time('    adjustCoordinateSystem', () => coordinateSystem.adjust(g));\n  time('    position', () => position(g));\n  time('    positionSelfEdges', () => positionSelfEdges(g));\n  time('    removeBorderNodes', () => removeBorderNodes(g));\n  time('    normalize.undo', () => normalize.undo(g));\n  time('    fixupEdgeLabelCoords', () => fixupEdgeLabelCoords(g));\n  time('    undoCoordinateSystem', () => coordinateSystem.undo(g));\n  time('    translateGraph', () => translateGraph(g));\n  time('    assignNodeIntersects', () => assignNodeIntersects(g));\n  time('    reversePoints', () => reversePointsForReversedEdges(g));\n  time('    acyclic.undo', () => acyclic.undo(g));\n}\n\n/*\n * Copies final layout information from the layout graph back to the input\n * graph. This process only copies whitelisted attributes from the layout graph\n * to the input graph, so it serves as a good place to determine what\n * attributes can influence layout.\n */\nfunction updateInputGraph(inputGraph, layoutGraph) {\n  inputGraph.nodes().forEach((v) => {\n    let inputLabel = inputGraph.node(v);\n    let layoutLabel = layoutGraph.node(v);\n\n    if (inputLabel) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n      inputLabel.rank = layoutLabel.rank;\n\n      if (layoutGraph.children(v).length) {\n        inputLabel.width = layoutLabel.width;\n        inputLabel.height = layoutLabel.height;\n      }\n    }\n  });\n\n  inputGraph.edges().forEach((e) => {\n    let inputLabel = inputGraph.edge(e);\n    let layoutLabel = layoutGraph.edge(e);\n\n    inputLabel.points = layoutLabel.points;\n    if (Object.hasOwn(layoutLabel, 'x')) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n    }\n  });\n\n  inputGraph.graph().width = layoutGraph.graph().width;\n  inputGraph.graph().height = layoutGraph.graph().height;\n}\n\nlet graphNumAttrs = ['nodesep', 'edgesep', 'ranksep', 'marginx', 'marginy'];\nlet graphDefaults = { ranksep: 50, edgesep: 20, nodesep: 50, rankdir: 'tb' };\nlet graphAttrs = ['acyclicer', 'ranker', 'rankdir', 'align'];\nlet nodeNumAttrs = ['width', 'height'];\nlet nodeDefaults = { width: 0, height: 0 };\nlet edgeNumAttrs = ['minlen', 'weight', 'width', 'height', 'labeloffset'];\nlet edgeDefaults = {\n  minlen: 1,\n  weight: 1,\n  width: 0,\n  height: 0,\n  labeloffset: 10,\n  labelpos: 'r',\n};\nlet edgeAttrs = ['labelpos'];\n\n/*\n * Constructs a new graph from the input graph, which can be used for layout.\n * This process copies only whitelisted attributes from the input graph to the\n * layout graph. Thus this function serves as a good place to determine what\n * attributes can influence layout.\n */\nfunction buildLayoutGraph(inputGraph) {\n  let g = new Graph({ multigraph: true, compound: true });\n  let graph = canonicalize(inputGraph.graph());\n\n  g.setGraph(\n    Object.assign(\n      {},\n      graphDefaults,\n      selectNumberAttrs(graph, graphNumAttrs),\n      util.pick(graph, graphAttrs)\n    )\n  );\n\n  inputGraph.nodes().forEach((v) => {\n    let node = canonicalize(inputGraph.node(v));\n    const newNode = selectNumberAttrs(node, nodeNumAttrs);\n    Object.keys(nodeDefaults).forEach((k) => {\n      if (newNode[k] === undefined) {\n        newNode[k] = nodeDefaults[k];\n      }\n    });\n\n    g.setNode(v, newNode);\n    g.setParent(v, inputGraph.parent(v));\n  });\n\n  inputGraph.edges().forEach((e) => {\n    let edge = canonicalize(inputGraph.edge(e));\n    g.setEdge(\n      e,\n      Object.assign(\n        {},\n        edgeDefaults,\n        selectNumberAttrs(edge, edgeNumAttrs),\n        util.pick(edge, edgeAttrs)\n      )\n    );\n  });\n\n  return g;\n}\n\n/*\n * This idea comes from the Gansner paper: to account for edge labels in our\n * layout we split each rank in half by doubling minlen and halving ranksep.\n * Then we can place labels at these mid-points between nodes.\n *\n * We also add some minimal padding to the width to push the label for the edge\n * away from the edge itself a bit.\n */\nfunction makeSpaceForEdgeLabels(g) {\n  let graph = g.graph();\n  graph.ranksep /= 2;\n  g.edges().forEach((e) => {\n    let edge = g.edge(e);\n    edge.minlen *= 2;\n    if (edge.labelpos.toLowerCase() !== 'c') {\n      if (graph.rankdir === 'TB' || graph.rankdir === 'BT') {\n        edge.width += edge.labeloffset;\n      } else {\n        edge.height += edge.labeloffset;\n      }\n    }\n  });\n}\n\n/*\n * Creates temporary dummy nodes that capture the rank in which each edge's\n * label is going to, if it has one of non-zero width and height. We do this\n * so that we can safely remove empty ranks while preserving balance for the\n * label's position.\n */\nfunction injectEdgeLabelProxies(g) {\n  g.edges().forEach((e) => {\n    let edge = g.edge(e);\n    if (edge.width && edge.height) {\n      let v = g.node(e.v);\n      let w = g.node(e.w);\n      let label = { rank: (w.rank - v.rank) / 2 + v.rank, e: e };\n      util.addDummyNode(g, 'edge-proxy', label, '_ep');\n    }\n  });\n}\n\nfunction assignRankMinMax(g) {\n  let maxRank = 0;\n  g.nodes().forEach((v) => {\n    let node = g.node(v);\n    if (node.borderTop) {\n      node.minRank = g.node(node.borderTop).rank;\n      node.maxRank = g.node(node.borderBottom).rank;\n      maxRank = Math.max(maxRank, node.maxRank);\n    }\n  });\n  g.graph().maxRank = maxRank;\n}\n\nfunction removeEdgeLabelProxies(g) {\n  g.nodes().forEach((v) => {\n    let node = g.node(v);\n    if (node.dummy === 'edge-proxy') {\n      g.edge(node.e).labelRank = node.rank;\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction translateGraph(g) {\n  let minX = Number.POSITIVE_INFINITY;\n  let maxX = 0;\n  let minY = Number.POSITIVE_INFINITY;\n  let maxY = 0;\n  let graphLabel = g.graph();\n  let marginX = graphLabel.marginx || 0;\n  let marginY = graphLabel.marginy || 0;\n\n  function getExtremes(attrs) {\n    let x = attrs.x;\n    let y = attrs.y;\n    let w = attrs.width;\n    let h = attrs.height;\n    minX = Math.min(minX, x - w / 2);\n    maxX = Math.max(maxX, x + w / 2);\n    minY = Math.min(minY, y - h / 2);\n    maxY = Math.max(maxY, y + h / 2);\n  }\n\n  g.nodes().forEach((v) => getExtremes(g.node(v)));\n  g.edges().forEach((e) => {\n    let edge = g.edge(e);\n    if (Object.hasOwn(edge, 'x')) {\n      getExtremes(edge);\n    }\n  });\n\n  minX -= marginX;\n  minY -= marginY;\n\n  g.nodes().forEach((v) => {\n    let node = g.node(v);\n    node.x -= minX;\n    node.y -= minY;\n  });\n\n  g.edges().forEach((e) => {\n    let edge = g.edge(e);\n    edge.points.forEach((p) => {\n      p.x -= minX;\n      p.y -= minY;\n    });\n    if (Object.hasOwn(edge, 'x')) {\n      edge.x -= minX;\n    }\n    if (Object.hasOwn(edge, 'y')) {\n      edge.y -= minY;\n    }\n  });\n\n  graphLabel.width = maxX - minX + marginX;\n  graphLabel.height = maxY - minY + marginY;\n}\n\nfunction assignNodeIntersects(g) {\n  g.edges().forEach((e) => {\n    let edge = g.edge(e);\n    let nodeV = g.node(e.v);\n    let nodeW = g.node(e.w);\n    let p1, p2;\n    if (!edge.points) {\n      edge.points = [];\n      p1 = nodeW;\n      p2 = nodeV;\n    } else {\n      p1 = edge.points[0];\n      p2 = edge.points[edge.points.length - 1];\n    }\n    edge.points.unshift(util.intersectRect(nodeV, p1));\n    edge.points.push(util.intersectRect(nodeW, p2));\n  });\n}\n\nfunction fixupEdgeLabelCoords(g) {\n  g.edges().forEach((e) => {\n    let edge = g.edge(e);\n    if (Object.hasOwn(edge, 'x')) {\n      if (edge.labelpos === 'l' || edge.labelpos === 'r') {\n        edge.width -= edge.labeloffset;\n      }\n      switch (edge.labelpos) {\n        case 'l':\n          edge.x -= edge.width / 2 + edge.labeloffset;\n          break;\n        case 'r':\n          edge.x += edge.width / 2 + edge.labeloffset;\n          break;\n      }\n    }\n  });\n}\n\nfunction reversePointsForReversedEdges(g) {\n  g.edges().forEach((e) => {\n    let edge = g.edge(e);\n    if (edge.reversed) {\n      edge.points.reverse();\n    }\n  });\n}\n\nfunction removeBorderNodes(g) {\n  g.nodes().forEach((v) => {\n    if (g.children(v).length) {\n      let node = g.node(v);\n      let t = g.node(node.borderTop);\n      let b = g.node(node.borderBottom);\n      let l = g.node(node.borderLeft[node.borderLeft.length - 1]);\n      let r = g.node(node.borderRight[node.borderRight.length - 1]);\n\n      node.width = Math.abs(r.x - l.x);\n      node.height = Math.abs(b.y - t.y);\n      node.x = l.x + node.width / 2;\n      node.y = t.y + node.height / 2;\n    }\n  });\n\n  g.nodes().forEach((v) => {\n    if (g.node(v).dummy === 'border') {\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction removeSelfEdges(g) {\n  g.edges().forEach((e) => {\n    if (e.v === e.w) {\n      var node = g.node(e.v);\n      if (!node.selfEdges) {\n        node.selfEdges = [];\n      }\n      node.selfEdges.push({ e: e, label: g.edge(e) });\n      g.removeEdge(e);\n    }\n  });\n}\n\nfunction insertSelfEdges(g) {\n  var layers = util.buildLayerMatrix(g);\n  layers.forEach((layer) => {\n    var orderShift = 0;\n    layer.forEach((v, i) => {\n      var node = g.node(v);\n      node.order = i + orderShift;\n      (node.selfEdges || []).forEach((selfEdge) => {\n        util.addDummyNode(\n          g,\n          'selfedge',\n          {\n            width: selfEdge.label.width,\n            height: selfEdge.label.height,\n            rank: node.rank,\n            order: i + ++orderShift,\n            e: selfEdge.e,\n            label: selfEdge.label,\n          },\n          '_se'\n        );\n      });\n      delete node.selfEdges;\n    });\n  });\n}\n\nfunction positionSelfEdges(g) {\n  g.nodes().forEach((v) => {\n    var node = g.node(v);\n    if (node.dummy === 'selfedge') {\n      var selfNode = g.node(node.e.v);\n      var x = selfNode.x + selfNode.width / 2;\n      var y = selfNode.y;\n      var dx = node.x - x;\n      var dy = selfNode.height / 2;\n      g.setEdge(node.e, node.label);\n      g.removeNode(v);\n      node.label.points = [\n        { x: x + (2 * dx) / 3, y: y - dy },\n        { x: x + (5 * dx) / 6, y: y - dy },\n        { x: x + dx, y: y },\n        { x: x + (5 * dx) / 6, y: y + dy },\n        { x: x + (2 * dx) / 3, y: y + dy },\n      ];\n      node.label.x = node.x;\n      node.label.y = node.y;\n    }\n  });\n}\n\nfunction selectNumberAttrs(obj, attrs) {\n  return util.mapValues(util.pick(obj, attrs), Number);\n}\n\nfunction canonicalize(attrs) {\n  var newAttrs = {};\n  if (attrs) {\n    Object.entries(attrs).forEach(([k, v]) => {\n      if (typeof k === 'string') {\n        k = k.toLowerCase();\n      }\n\n      newAttrs[k] = v;\n    });\n  }\n  return newAttrs;\n}\n","'use strict';\n\n/**\n * Dagre DAG 布局库\n * 开源协议 - MIT\n * 源码 - https://github.com/dagrejs/dagre\n * 论文 - https://graphviz.org/documentation/TSE93.pdf\n */\n\nimport acyclic from './acyclic';\nimport normalize from './normalize';\nimport rank from './rank';\nimport { normalizeRanks, removeEmptyRanks } from './util';\nimport parentDummyChains from './parent-dummy-chains';\nimport nestingGraph from './nesting-graph';\nimport addBorderSegments from './add-border-segments';\nimport coordinateSystem from './coordinate-system';\nimport order from './order';\nimport position from './position';\nimport { util } from './util';\n\nimport {\n  layout,\n  buildLayoutGraph,\n  updateInputGraph,\n  makeSpaceForEdgeLabels,\n  removeSelfEdges,\n  injectEdgeLabelProxies,\n  assignRankMinMax,\n  removeEdgeLabelProxies,\n  insertSelfEdges,\n  positionSelfEdges,\n  removeBorderNodes,\n  fixupEdgeLabelCoords,\n  translateGraph,\n  assignNodeIntersects,\n  reversePointsForReversedEdges,\n} from './layout';\n\nconst dagreLib = {\n  layout,\n  buildLayoutGraph,\n  updateInputGraph,\n  makeSpaceForEdgeLabels,\n  removeSelfEdges,\n  acyclic,\n  nestingGraph,\n  rank,\n  util,\n  injectEdgeLabelProxies,\n  removeEmptyRanks,\n  normalizeRanks,\n  assignRankMinMax,\n  removeEdgeLabelProxies,\n  normalize,\n  parentDummyChains,\n  addBorderSegments,\n  order,\n  insertSelfEdges,\n  coordinateSystem,\n  position,\n  positionSelfEdges,\n  removeBorderNodes,\n  fixupEdgeLabelCoords,\n  translateGraph,\n  assignNodeIntersects,\n  reversePointsForReversedEdges,\n};\n\nexport { dagreLib };\n","import { definePluginCreator } from '@flowgram.ai/core';\n\nimport { AutoLayoutService } from './services';\n\nexport const createFreeAutoLayoutPlugin = definePluginCreator({\n  onBind: ({ bind }) => {\n    bind(AutoLayoutService).toSelf().inSingletonScope();\n  },\n});\n","import { inject, injectable } from 'inversify';\nimport {\n  WorkflowDocument,\n  WorkflowLineEntity,\n  WorkflowNodeEntity,\n  WorkflowNodeLinesData,\n} from '@flowgram.ai/free-layout-core';\n\nimport { Layout, type LayoutOptions } from './layout';\n\n@injectable()\nexport class AutoLayoutService {\n  @inject(WorkflowDocument) private readonly document: WorkflowDocument;\n\n  public async layout(options: LayoutOptions = {}): Promise<void> {\n    await this.layoutNode(this.document.root, options);\n  }\n\n  private async layoutNode(node: WorkflowNodeEntity, options: LayoutOptions): Promise<void> {\n    // 获取子节点\n    const nodes = node.blocks;\n    if (!nodes || !Array.isArray(nodes) || !nodes.length) {\n      return;\n    }\n\n    // 获取子线条\n    const edges = this.getNodesAllLines(nodes);\n\n    // 先递归执行子节点 autoLayout\n    await Promise.all(nodes.map(async (child) => this.layoutNode(child, options)));\n\n    const layout = new Layout();\n    layout.init({ nodes, edges, container: node }, options);\n    layout.layout();\n    await layout.position();\n  }\n\n  private getNodesAllLines(nodes: WorkflowNodeEntity[]): WorkflowLineEntity[] {\n    const lines = nodes\n      .map((node) => {\n        const linesData = node.getData<WorkflowNodeLinesData>(WorkflowNodeLinesData);\n        const outputLines = linesData.outputLines.filter(Boolean);\n        const inputLines = linesData.inputLines.filter(Boolean);\n        return [...outputLines, ...inputLines];\n      })\n      .flat();\n\n    return lines;\n  }\n}\n","import {\n  WorkflowLineEntity,\n  WorkflowNodeEntity,\n  WorkflowNodeLinesData,\n} from '@flowgram.ai/free-layout-core';\nimport { FlowNodeBaseType, FlowNodeTransformData } from '@flowgram.ai/document';\n\nimport { LayoutEdge, LayoutNode, LayoutParams } from './type';\n\ninterface LayoutStoreData {\n  nodes: Map<string, LayoutNode>;\n  edges: Map<string, LayoutEdge>;\n}\n\nexport class LayoutStore {\n  private indexMap: Map<string, string>;\n\n  private init: boolean = false;\n\n  private store: LayoutStoreData;\n\n  private container: WorkflowNodeEntity;\n\n  public get initialized(): boolean {\n    return this.init;\n  }\n\n  public getNode(id: string): LayoutNode | undefined {\n    return this.store.nodes.get(id);\n  }\n\n  public getNodeByIndex(index: string): LayoutNode | undefined {\n    const id = this.indexMap.get(index);\n    return id ? this.getNode(id) : undefined;\n  }\n\n  public getEdge(id: string): LayoutEdge | undefined {\n    return this.store.edges.get(id);\n  }\n\n  public get nodes(): LayoutNode[] {\n    return Array.from(this.store.nodes.values());\n  }\n\n  public get edges(): LayoutEdge[] {\n    return Array.from(this.store.edges.values());\n  }\n\n  public create(params: LayoutParams): void {\n    this.store = this.createStore(params);\n    this.indexMap = this.createIndexMap();\n    this.init = true;\n  }\n\n  /** 创建布局数据 */\n  private createStore(params: LayoutParams): LayoutStoreData {\n    const { nodes, edges, container } = params;\n    this.container = container;\n    const layoutNodes = this.createLayoutNodes(nodes);\n    const layoutEdges = this.createEdgesStore(edges);\n    const virtualEdges = this.createVirtualEdges(params);\n    const store = {\n      nodes: new Map(),\n      edges: new Map(),\n    };\n    layoutNodes.forEach((node) => store.nodes.set(node.id, node));\n    layoutEdges.concat(virtualEdges).forEach((edge) => store.edges.set(edge.id, edge));\n    return store;\n  }\n\n  /** 创建节点布局数据 */\n  private createLayoutNodes(nodes: WorkflowNodeEntity[]): LayoutNode[] {\n    const layoutNodes = nodes.map((node, index) => {\n      const { bounds } = node.getData(FlowNodeTransformData);\n      const layoutNode: LayoutNode = {\n        id: node.id,\n        entity: node,\n        index: '', // 初始化时，index 未计算\n        rank: -1, // 初始化时，节点还未布局，层级为-1\n        order: -1, // 初始化时，节点还未布局，顺序为-1\n        position: { x: bounds.center.x, y: bounds.center.y },\n        offset: { x: 0, y: 0 },\n        size: { width: bounds.width, height: bounds.height },\n        hasChildren: node.collapsedChildren?.length > 0,\n      };\n      return layoutNode;\n    });\n    return layoutNodes;\n  }\n\n  /** 创建线条布局数据 */\n  private createEdgesStore(edges: WorkflowLineEntity[]): LayoutEdge[] {\n    const layoutEdges = edges\n      .map((edge) => {\n        const { from, to } = edge.info;\n        if (!from || !to || edge.vertical) {\n          return;\n        }\n        const layoutEdge: LayoutEdge = {\n          id: edge.id,\n          entity: edge,\n          from,\n          to,\n          fromIndex: '', // 初始化时，index 未计算\n          toIndex: '', // 初始化时，index 未计算\n          name: edge.id,\n        };\n        return layoutEdge;\n      })\n      .filter(Boolean) as LayoutEdge[];\n    return layoutEdges;\n  }\n\n  /** 创建虚拟线条数据 */\n  private createVirtualEdges(params: {\n    nodes: WorkflowNodeEntity[];\n    edges: WorkflowLineEntity[];\n  }): LayoutEdge[] {\n    const { nodes, edges } = params;\n    const groupNodes = nodes.filter((n) => n.flowNodeType === FlowNodeBaseType.GROUP);\n    const virtualEdges = groupNodes\n      .map((group) => {\n        const { id: groupId, blocks = [] } = group;\n        const blockIdSet = new Set(blocks.map((b) => b.id));\n        const groupFromEdges = edges\n          .filter((edge) => blockIdSet.has(edge.to?.id ?? ''))\n          .map((edge) => {\n            const { from, to } = edge.info;\n            if (!from || !to || edge.vertical) {\n              return;\n            }\n            const id = `virtual_${groupId}_${to}`;\n            const layoutEdge: LayoutEdge = {\n              id: id,\n              entity: edge,\n              from,\n              to: groupId,\n              fromIndex: '', // 初始化时，index 未计算\n              toIndex: '', // 初始化时，index 未计算\n              name: id,\n            };\n            return layoutEdge;\n          })\n          .filter(Boolean) as LayoutEdge[];\n        const groupToEdges = edges\n          .filter((edge) => blockIdSet.has(edge.from.id ?? ''))\n          .map((edge) => {\n            const { from, to } = edge.info;\n            if (!from || !to || edge.vertical) {\n              return;\n            }\n            const id = `virtual_${groupId}_${from}`;\n            const layoutEdge: LayoutEdge = {\n              id: id,\n              entity: edge,\n              from: groupId,\n              to,\n              fromIndex: '', // 初始化时，index 未计算\n              toIndex: '', // 初始化时，index 未计算\n              name: id,\n            };\n            return layoutEdge;\n          })\n          .filter(Boolean) as LayoutEdge[];\n        return [...groupFromEdges, ...groupToEdges];\n      })\n      .flat();\n    return virtualEdges;\n  }\n\n  /** 创建节点索引映射 */\n  private createIndexMap(): Map<string, string> {\n    const nodeIndexes = this.sortNodes();\n    const nodeToIndex = new Map<string, string>();\n\n    // 创建节点索引映射\n    nodeIndexes.forEach((nodeId, nodeIndex) => {\n      const node = this.getNode(nodeId);\n      if (!node) {\n        return;\n      }\n      const graphIndex = String(100000 + nodeIndex);\n      nodeToIndex.set(node.id, graphIndex);\n      node.index = graphIndex;\n    });\n\n    // 创建连线索引映射\n    this.edges.forEach((edge) => {\n      const fromIndex = nodeToIndex.get(edge.from);\n      const toIndex = nodeToIndex.get(edge.to);\n      if (!fromIndex || !toIndex) {\n        this.store.edges.delete(edge.id);\n        return;\n      }\n      edge.fromIndex = fromIndex;\n      edge.toIndex = toIndex;\n    });\n\n    // 创建索引到节点的映射\n    const indexToNode = new Map();\n    nodeToIndex.forEach((index, id) => {\n      indexToNode.set(index, id);\n    });\n\n    return indexToNode;\n  }\n\n  /** 节点排序 */\n  private sortNodes(): Array<string> {\n    // 节点 id 列表，id 可能重复\n    const nodeIdList: string[] = [];\n\n    // 第1级排序：按照 node 添加顺序排序\n    this.nodes.forEach((node) => {\n      nodeIdList.push(node.id);\n    });\n\n    // 第2级排序：被连线节点排序靠后\n    this.edges.forEach((edge) => {\n      nodeIdList.push(edge.to);\n    });\n\n    // 第3级排序：按照从开始节点进行遍历排序\n    const visited = new Set<string>();\n    const visit = (node: WorkflowNodeEntity) => {\n      if (visited.has(node.id)) {\n        return;\n      }\n      visited.add(node.id);\n      nodeIdList.push(node.id);\n      // 访问子节点\n      node.blocks.forEach((child) => {\n        visit(child);\n      });\n      // 访问后续节点\n      const { outputLines } = node.getData(WorkflowNodeLinesData);\n      const sortedLines = outputLines.sort((a, b) => {\n        const aPort = a.fromPort;\n        const bPort = b.fromPort;\n        if (aPort && bPort) {\n          return aPort.point.y - bPort.point.y;\n        }\n        return 0;\n      });\n      sortedLines.forEach((line) => {\n        const { to } = line;\n        if (!to) {\n          return;\n        }\n        visit(to);\n      });\n    };\n    visit(this.container);\n\n    // 使用 reduceRight 去重并保留最后一个出现的节点 id\n    const uniqueNodeIds: string[] = nodeIdList.reduceRight((acc: string[], nodeId: string) => {\n      if (!acc.includes(nodeId)) {\n        acc.unshift(nodeId);\n      }\n      return acc;\n    }, []);\n\n    return uniqueNodeIds;\n  }\n}\n","import { WorkflowDocument } from '@flowgram.ai/free-layout-core';\nimport { PositionSchema, startTween, TransformData } from '@flowgram.ai/core';\n\nimport { LayoutNode } from './type';\nimport { LayoutStore } from './store';\n\nexport class LayoutPosition {\n  constructor(private readonly store: LayoutStore) {}\n\n  public async position(): Promise<void> {\n    return new Promise((resolve) => {\n      startTween({\n        from: { d: 0 },\n        to: { d: 100 },\n        duration: 300,\n        onUpdate: (v) => {\n          this.store.nodes.forEach((layoutNode) => {\n            this.updateNodePosition({ layoutNode, step: v.d });\n          });\n        },\n        onComplete: () => {\n          resolve();\n        },\n      });\n    });\n  }\n\n  private updateNodePosition(params: { layoutNode: LayoutNode; step: number }): void {\n    const { layoutNode, step } = params;\n    const transform = layoutNode.entity.getData(TransformData);\n    const position: PositionSchema = {\n      x: layoutNode.position.x + layoutNode.offset.x,\n      y: layoutNode.position.y + layoutNode.offset.y,\n    };\n    const deltaX = ((position.x - transform.position.x) * step) / 100;\n    const deltaY = ((position.y - transform.bounds.height / 2 - transform.position.y) * step) / 100;\n\n    transform.update({\n      position: {\n        x: transform.position.x + deltaX,\n        y: transform.position.y + deltaY,\n      },\n    });\n    const document = layoutNode.entity.document as WorkflowDocument;\n    document.layout.updateAffectedTransform(layoutNode.entity);\n  }\n}\n","import { FlowNodeTransformData } from '@flowgram.ai/document';\nimport { Graph as DagreGraph } from '@dagrejs/graphlib';\n\nimport { dagreLib } from '../dagre-lib/index';\nimport { DagreNode, LayoutNode } from './type';\nimport { LayoutStore } from './store';\nimport { DagreLayoutOptions } from './constant';\n\nexport class DagreLayout {\n  private readonly graph: DagreGraph;\n\n  constructor(private readonly store: LayoutStore) {\n    this.graph = this.createGraph();\n  }\n\n  public layout(): void {\n    this.graphSetData();\n    this.dagreLayout();\n    this.layoutSetPosition();\n  }\n\n  private dagreLayout(): void {\n    let layoutGraph = dagreLib.buildLayoutGraph(this.graph);\n    this.runLayout(layoutGraph);\n    dagreLib.updateInputGraph(this.graph, layoutGraph);\n  }\n\n  private runLayout(graph: DagreGraph): void {\n    dagreLib.makeSpaceForEdgeLabels(graph);\n    dagreLib.removeSelfEdges(graph);\n    dagreLib.acyclic.run(graph);\n    dagreLib.nestingGraph.run(graph);\n    dagreLib.rank(dagreLib.util.asNonCompoundGraph(graph));\n    dagreLib.injectEdgeLabelProxies(graph);\n    dagreLib.removeEmptyRanks(graph);\n    dagreLib.nestingGraph.cleanup(graph);\n    dagreLib.normalizeRanks(graph);\n    dagreLib.assignRankMinMax(graph);\n    dagreLib.removeEdgeLabelProxies(graph);\n    dagreLib.normalize.run(graph);\n    dagreLib.parentDummyChains(graph);\n    dagreLib.addBorderSegments(graph);\n    dagreLib.order(graph);\n    this.setOrderAndRank(graph);\n    dagreLib.insertSelfEdges(graph);\n    dagreLib.coordinateSystem.adjust(graph);\n    dagreLib.position(graph);\n    dagreLib.positionSelfEdges(graph);\n    dagreLib.removeBorderNodes(graph);\n    dagreLib.normalize.undo(graph);\n    dagreLib.fixupEdgeLabelCoords(graph);\n    dagreLib.coordinateSystem.undo(graph);\n    dagreLib.translateGraph(graph);\n    dagreLib.assignNodeIntersects(graph);\n    dagreLib.reversePointsForReversedEdges(graph);\n    dagreLib.acyclic.undo(graph);\n  }\n\n  private createGraph(): DagreGraph {\n    const graph = new DagreGraph({ multigraph: true });\n    graph.setDefaultEdgeLabel(() => ({}));\n    graph.setGraph(DagreLayoutOptions);\n    return graph;\n  }\n\n  private graphSetData(): void {\n    const nodes = Array.from(this.store.nodes.values());\n    const edges = Array.from(this.store.edges.values()).sort((next, prev) => {\n      if (next.fromIndex === prev.fromIndex) {\n        return next.toIndex! < prev.toIndex! ? -1 : 1;\n      }\n      return next.fromIndex < prev.fromIndex ? -1 : 1;\n    });\n    nodes.forEach((layoutNode) => {\n      this.graph.setNode(layoutNode.index, {\n        originID: layoutNode.id,\n        width: layoutNode.size.width,\n        height: layoutNode.size.height,\n      });\n    });\n    edges.forEach((layoutEdge) => {\n      this.graph.setEdge({\n        v: layoutEdge.fromIndex,\n        w: layoutEdge.toIndex,\n        name: layoutEdge.name,\n      });\n    });\n  }\n\n  private layoutSetPosition(): void {\n    this.store.nodes.forEach((layoutNode) => {\n      const offsetX = this.getOffsetX(layoutNode);\n      const graphNode = this.graph.node(layoutNode.index);\n      if (!graphNode) {\n        // 异常兜底，一般不会出现\n        layoutNode.rank = -1;\n        layoutNode.position = {\n          x: layoutNode.position.x + offsetX,\n          y: layoutNode.position.y,\n        };\n        return;\n      }\n      layoutNode.rank = graphNode.rank ?? -1;\n      layoutNode.position = {\n        x: this.normalizeNumber(graphNode.x) + offsetX,\n        y: this.normalizeNumber(graphNode.y),\n      };\n    });\n  }\n\n  private normalizeNumber(number: number): number {\n    // NaN 转为 0，异常兜底，一般不会出现\n    return Number.isNaN(number) ? 0 : number;\n  }\n\n  private getOffsetX(layoutNode: LayoutNode): number {\n    if (!layoutNode.hasChildren) {\n      return 0;\n    }\n    // 存在子节点才需计算padding带来的偏移\n    const nodeTransform = layoutNode.entity.getData(FlowNodeTransformData);\n    const { bounds, padding } = nodeTransform;\n    const leftOffset = -bounds.width / 2 + padding.left;\n    return leftOffset;\n  }\n\n  private setOrderAndRank(g: DagreGraph): DagreGraph {\n    // 跟随调整\n    this.followAdjust(g);\n    // 重新排序\n    this.normalizeOrder(g);\n    return g;\n  }\n\n  /** 跟随调整 */\n  private followAdjust(g: DagreGraph): void {\n    const rankGroup = this.rankGroup(g);\n    g.nodes().forEach((i) => {\n      const graphNode: DagreNode = g.node(i);\n      const layoutNode = this.store.getNodeByIndex(i);\n\n      // 没有跟随节点，则不调整\n      if (!graphNode || !layoutNode?.followedBy) return;\n      const { followedBy } = layoutNode;\n      const { rank: targetRank, order: targetOrder } = graphNode;\n\n      // 跟随节点索引\n      const followIndexes = followedBy\n        .map((id) => this.store.getNode(id)?.index)\n        .filter(Boolean) as string[];\n      const followSet = new Set(followIndexes);\n\n      // 目标节点之后的节点\n      const rankIndexes = rankGroup.get(targetRank);\n      if (!rankIndexes) return;\n      const afterIndexes = Array.from(rankIndexes).filter((index) => {\n        if (followSet.has(index)) return false;\n        const graphNode = g.node(index);\n        return graphNode.order > targetOrder;\n      });\n\n      // 目标节点之后的节点 order 增加跟随节点数量\n      afterIndexes.forEach((index) => {\n        const graphNode = g.node(index);\n        graphNode.order = graphNode.order + followedBy.length;\n      });\n\n      // 跟随节点 order 增加\n      followIndexes.forEach((followIndex, index) => {\n        const graphNode = g.node(followIndex);\n        graphNode.order = targetOrder + index + 1;\n        // 更新 rank 分组缓存\n        const originRank = graphNode.rank;\n        graphNode.rank = targetRank;\n        rankGroup.get(originRank)?.delete(followIndex);\n        rankGroup.get(targetRank)?.add(followIndex);\n      });\n    });\n  }\n\n  /** rank 内 order 可能不连续，需要重新排序 */\n  private normalizeOrder(g: DagreGraph): void {\n    const rankGroup = this.rankGroup(g);\n    rankGroup.forEach((indexSet, rank) => {\n      const graphNodes: DagreNode[] = Array.from(indexSet).map((id) => g.node(id));\n      graphNodes.sort((a, b) => a.order - b.order);\n      graphNodes.forEach((node, index) => {\n        node.order = index;\n      });\n    });\n  }\n\n  /** 获取 rank 分组 */\n  private rankGroup(g: DagreGraph): Map<number, Set<string>> {\n    const rankGroup = new Map<number, Set<string>>();\n    g.nodes().forEach((i) => {\n      const graphNode = g.node(i);\n      const rank = graphNode.rank;\n      if (!rankGroup.has(rank)) {\n        rankGroup.set(rank, new Set());\n      }\n      rankGroup.get(rank)?.add(i);\n    });\n    return rankGroup;\n  }\n}\n","export const DagreLayoutOptions = {\n  rankdir: 'LR',\n  nodesep: 100,\n  ranksep: 100,\n  ranker: 'network-simplex',\n};\n","import { GetFollowNode, LayoutOptions, LayoutParams } from './type';\nimport { LayoutStore } from './store';\nimport { LayoutPosition } from './position';\nimport { DagreLayout } from './dagre';\n\nexport class Layout {\n  private readonly _store: LayoutStore;\n\n  private readonly _layout: DagreLayout;\n\n  private readonly _position: LayoutPosition;\n\n  constructor() {\n    this._store = new LayoutStore();\n    this._layout = new DagreLayout(this._store);\n    this._position = new LayoutPosition(this._store);\n  }\n\n  public init(params: LayoutParams, options: LayoutOptions = {}): void {\n    this._store.create(params);\n    this.setFollowNode(options.getFollowNode);\n  }\n\n  public layout(): void {\n    if (!this._store.initialized) {\n      return;\n    }\n    this._layout.layout();\n  }\n\n  public async position(): Promise<void> {\n    if (!this._store.initialized) {\n      return;\n    }\n    return await this._position.position();\n  }\n\n  public setFollowNode(getFollowNode?: GetFollowNode): void {\n    if (!getFollowNode) return;\n    const context = { store: this._store };\n    this._store.nodes.forEach((node) => {\n      const followTo = getFollowNode(node, context)?.followTo;\n      if (!followTo) return;\n      const followToNode = this._store.getNode(followTo);\n      if (!followToNode) return;\n      if (!followToNode.followedBy) {\n        followToNode.followedBy = [];\n      }\n      followToNode.followedBy.push(node.id);\n      node.followTo = followTo;\n    });\n  }\n}\n"],"mappings":"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","names":["range","import_graphlib","range","range","rank","order","g","dfs","run","undo","dfs","rank","import_graphlib","dfs","import_graphlib","edge","postorder","dfs","run","dfs","dfs","rank","maxRank","addBorderNode","undo","maxRank","dfs","import_graphlib","rank","import_graphlib","maxRank","rank","import_graphlib","order","xs","import_graphlib","time","maxRank","import_core","import_free_layout_core","position","import_document","import_graphlib","DagreGraph","graphNode","rank","layout","import_graphlib"]}