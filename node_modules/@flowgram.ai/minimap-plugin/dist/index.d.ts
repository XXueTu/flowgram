import React, { CSSProperties } from 'react';
import { Rectangle, IPoint, Disposable } from '@flowgram.ai/utils';
import * as _flowgram_ai_core from '@flowgram.ai/core';
import { Layer } from '@flowgram.ai/core';

interface MinimapCanvasStyle {
    canvasWidth: number;
    canvasHeight: number;
    canvasPadding: number;
    canvasBackground: string;
    canvasBorderRadius: number | undefined;
    viewportBackground: string;
    viewportBorderRadius: number | undefined;
    viewportBorderColor: string;
    viewportBorderWidth: number;
    viewportBorderDashLength: number | undefined;
    nodeColor: string;
    nodeBorderRadius: number | undefined;
    nodeBorderWidth: number;
    nodeBorderColor: string | undefined;
    overlayColor: string;
}
interface MinimapInactiveStyle {
    scale: number;
    opacity: number;
    translateX: number;
    translateY: number;
}
interface MinimapServiceOptions {
    canvasStyle: Partial<MinimapCanvasStyle>;
    canvasClassName: string;
    enableInactiveDebounce: boolean;
    enableActiveDebounce: boolean;
    enableDisplayAllNodes: boolean;
    activeDebounceTime: number;
    inactiveDebounceTime: number;
}
interface MinimapLayerOptions {
    disableLayer?: boolean;
    panelStyles?: CSSProperties;
    containerStyles?: CSSProperties;
    inactiveStyle?: Partial<MinimapInactiveStyle>;
}
interface CreateMinimapPluginOptions extends MinimapLayerOptions, Partial<MinimapServiceOptions> {
}
interface MinimapRenderContext {
    canvas: HTMLCanvasElement;
    context2D: CanvasRenderingContext2D;
    nodeRects: Rectangle[];
    viewRect: Rectangle;
    renderRect: Rectangle;
    canvasRect: Rectangle;
    scale: number;
    offset: IPoint;
}

declare class FlowMinimapService {
    private readonly document;
    private readonly entityManager;
    private readonly playgroundConfig;
    readonly canvas: HTMLCanvasElement;
    readonly context2D: CanvasRenderingContext2D;
    activated: boolean;
    private onActiveCallbacks;
    private options;
    private toDispose;
    private initialized;
    private isDragging;
    private style;
    private dragStart?;
    constructor();
    init(options?: Partial<MinimapServiceOptions>): void;
    dispose(): void;
    setActivate(activate: boolean): void;
    onActive: (callback: (activated: boolean) => void) => Disposable;
    private initStyle;
    private setDebounce;
    /**
     * 触发渲染
     */
    private render;
    private _render;
    private createRenderContext;
    private renderCanvas;
    private calculateScaleAndOffset;
    private get nodes();
    private nodeTransforms;
    private renderRect;
    private viewRect;
    private mountListener;
    /** 计算画布坐标系下的矩形 */
    private rectOnCanvas;
    private isPointInRect;
    private addEventListeners;
    private removeEventListeners;
    private handleWheel;
    private handleStartDrag;
    private handleDragging;
    private handleEndDrag;
    private handleCursor;
    private isMouseInCanvas;
    private updateScrollPosition;
}

interface MinimapProps {
    service: FlowMinimapService;
    panelStyles?: CSSProperties;
    containerStyles?: CSSProperties;
    inactiveStyle?: Partial<MinimapInactiveStyle>;
}
declare const MinimapRender: React.FC<MinimapProps>;

declare const MinimapDefaultCanvasStyle: MinimapCanvasStyle;
declare const MinimapDefaultInactiveStyle: MinimapInactiveStyle;
declare const MinimapDefaultOptions: MinimapServiceOptions;

declare const createMinimapPlugin: _flowgram_ai_core.PluginCreator<CreateMinimapPluginOptions>;

declare class FlowMinimapLayer extends Layer<MinimapLayerOptions> {
    static type: string;
    private readonly service;
    readonly node: HTMLElement;
    private readonly className;
    constructor();
    render(): JSX.Element;
}

export { type CreateMinimapPluginOptions, FlowMinimapLayer, FlowMinimapService, type MinimapCanvasStyle, MinimapDefaultCanvasStyle, MinimapDefaultInactiveStyle, MinimapDefaultOptions, type MinimapInactiveStyle, type MinimapLayerOptions, MinimapRender, type MinimapRenderContext, type MinimapServiceOptions, createMinimapPlugin };
