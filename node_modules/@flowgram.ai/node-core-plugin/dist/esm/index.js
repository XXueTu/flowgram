// src/create-node-core-plugin.ts
import { FormModelV2 } from "@flowgram.ai/node";
import {
  createNodeContainerModules,
  createNodeEntityDatas,
  FlowNodeFormData,
  FormManager as FormManager2,
  NodeManager as NodeManager2
} from "@flowgram.ai/form-core";
import { FlowDocument } from "@flowgram.ai/document";
import { definePluginCreator, EntityManager } from "@flowgram.ai/core";

// src/utils.ts
import {
  DecoratorAbility,
  EffectAbility,
  registerNodeErrorRender,
  registerNodePlaceholderRender,
  SetterAbility,
  ValidationAbility
} from "@flowgram.ai/form-core";
function registerNodeMaterial({
  nodeManager,
  formManager,
  material
}) {
  const {
    setters = [],
    decorators = [],
    effects = [],
    validators = [],
    nodeErrorRender,
    nodePlaceholderRender
  } = material;
  if (nodeErrorRender) {
    registerNodeErrorRender(nodeManager, nodeErrorRender);
  }
  if (nodePlaceholderRender) {
    registerNodePlaceholderRender(nodeManager, nodePlaceholderRender);
  }
  setters.forEach((setter) => {
    formManager.registerAbilityExtension(SetterAbility.type, setter);
  });
  decorators.forEach((decorator) => {
    formManager.registerAbilityExtension(DecoratorAbility.type, decorator);
  });
  effects.forEach((effect) => {
    formManager.registerAbilityExtension(EffectAbility.type, effect);
  });
  validators.forEach((validator) => {
    formManager.registerAbilityExtension(ValidationAbility.type, validator);
  });
}

// src/create-node-core-plugin.ts
var createNodeCorePlugin = definePluginCreator({
  onInit(ctx, options) {
    ctx.get(FlowDocument).registerNodeDatas(...createNodeEntityDatas());
    const formModelFactory = (entity) => new FormModelV2(entity);
    const entityManager = ctx.get(EntityManager);
    entityManager.registerEntityData(
      FlowNodeFormData,
      () => ({
        formModelFactory
      })
    );
    if (!options.materials) {
      return;
    }
    const nodeManager = ctx.get(NodeManager2);
    const formManager = ctx.get(FormManager2);
    if (!nodeManager || !formManager) {
      throw new Error("NodeCorePlugin Error: nodeManager or formManager not found");
    }
    registerNodeMaterial({ nodeManager, formManager, material: options.materials });
  },
  onDispose(ctx) {
    ctx.get(FormManager2)?.dispose();
  },
  containerModules: createNodeContainerModules()
  // onBind: ({ bind }) => {
  //   bindContributions(bind, FormNodeContribution, [NodeContribution]);
  // },
});
export {
  createNodeCorePlugin,
  registerNodeMaterial
};
//# sourceMappingURL=index.js.map