{"version":3,"sources":["../../src/create-node-core-plugin.ts","../../src/utils.ts"],"sourcesContent":["import { FormModelV2 } from '@flowgram.ai/node';\nimport {\n  createNodeContainerModules,\n  createNodeEntityDatas,\n  FlowNodeFormData,\n  FormManager,\n  NodeManager,\n} from '@flowgram.ai/form-core';\nimport { FlowDocument, FlowNodeEntity } from '@flowgram.ai/document';\nimport { definePluginCreator, EntityManager } from '@flowgram.ai/core';\n\nimport { registerNodeMaterial } from './utils';\nimport { NodeEngineMaterialOptions } from './types';\n\nexport interface NodeCorePluginOptions {\n  materials?: NodeEngineMaterialOptions;\n}\n\nexport const createNodeCorePlugin = definePluginCreator<NodeCorePluginOptions>({\n  onInit(ctx, options) {\n    /**\n     * 注册NodeEngine 相关 EntityData 到flowDocument\n     */\n    ctx.get<FlowDocument>(FlowDocument).registerNodeDatas(...createNodeEntityDatas());\n\n    const formModelFactory = (entity: FlowNodeEntity) => new FormModelV2(entity);\n    const entityManager = ctx.get<EntityManager>(EntityManager);\n    entityManager.registerEntityData(\n      FlowNodeFormData,\n      () =>\n        ({\n          formModelFactory: formModelFactory,\n        } as any)\n    );\n\n    if (!options.materials) {\n      return;\n    }\n\n    const nodeManager = ctx.get<NodeManager>(NodeManager);\n    const formManager = ctx.get<FormManager>(FormManager);\n\n    if (!nodeManager || !formManager) {\n      throw new Error('NodeCorePlugin Error: nodeManager or formManager not found');\n    }\n\n    registerNodeMaterial({ nodeManager, formManager, material: options.materials! });\n  },\n  onDispose(ctx) {\n    ctx.get<FormManager>(FormManager)?.dispose();\n  },\n  containerModules: createNodeContainerModules(),\n  // onBind: ({ bind }) => {\n  //   bindContributions(bind, FormNodeContribution, [NodeContribution]);\n  // },\n});\n","import {\n  DecoratorAbility,\n  DecoratorExtension,\n  EffectAbility,\n  EffectExtension,\n  FormManager,\n  NodeManager,\n  registerNodeErrorRender,\n  registerNodePlaceholderRender,\n  SetterAbility,\n  SetterExtension,\n  ValidationAbility,\n  ValidationExtension,\n} from '@flowgram.ai/form-core';\n\nimport { NodeEngineMaterialOptions } from './types';\n\ninterface RegisterNodeMaterialProps {\n  nodeManager: NodeManager;\n  formManager: FormManager;\n  material: NodeEngineMaterialOptions;\n}\n\nexport function registerNodeMaterial({\n  nodeManager,\n  formManager,\n  material,\n}: RegisterNodeMaterialProps) {\n  const {\n    setters = [],\n    decorators = [],\n    effects = [],\n    validators = [],\n    nodeErrorRender,\n    nodePlaceholderRender,\n  } = material;\n\n  if (nodeErrorRender) {\n    registerNodeErrorRender(nodeManager, nodeErrorRender);\n  }\n  if (nodePlaceholderRender) {\n    registerNodePlaceholderRender(nodeManager, nodePlaceholderRender);\n  }\n  setters.forEach((setter: SetterExtension) => {\n    formManager.registerAbilityExtension(SetterAbility.type, setter);\n  });\n  decorators.forEach((decorator: DecoratorExtension) => {\n    formManager.registerAbilityExtension(DecoratorAbility.type, decorator);\n  });\n  effects.forEach((effect: EffectExtension) => {\n    formManager.registerAbilityExtension(EffectAbility.type, effect);\n  });\n  validators.forEach((validator: ValidationExtension) => {\n    formManager.registerAbilityExtension(ValidationAbility.type, validator);\n  });\n}\n"],"mappings":";AAAA,SAAS,mBAAmB;AAC5B;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA,eAAAA;AAAA,EACA,eAAAC;AAAA,OACK;AACP,SAAS,oBAAoC;AAC7C,SAAS,qBAAqB,qBAAqB;;;ACTnD;AAAA,EACE;AAAA,EAEA;AAAA,EAIA;AAAA,EACA;AAAA,EACA;AAAA,EAEA;AAAA,OAEK;AAUA,SAAS,qBAAqB;AAAA,EACnC;AAAA,EACA;AAAA,EACA;AACF,GAA8B;AAC5B,QAAM;AAAA,IACJ,UAAU,CAAC;AAAA,IACX,aAAa,CAAC;AAAA,IACd,UAAU,CAAC;AAAA,IACX,aAAa,CAAC;AAAA,IACd;AAAA,IACA;AAAA,EACF,IAAI;AAEJ,MAAI,iBAAiB;AACnB,4BAAwB,aAAa,eAAe;AAAA,EACtD;AACA,MAAI,uBAAuB;AACzB,kCAA8B,aAAa,qBAAqB;AAAA,EAClE;AACA,UAAQ,QAAQ,CAAC,WAA4B;AAC3C,gBAAY,yBAAyB,cAAc,MAAM,MAAM;AAAA,EACjE,CAAC;AACD,aAAW,QAAQ,CAAC,cAAkC;AACpD,gBAAY,yBAAyB,iBAAiB,MAAM,SAAS;AAAA,EACvE,CAAC;AACD,UAAQ,QAAQ,CAAC,WAA4B;AAC3C,gBAAY,yBAAyB,cAAc,MAAM,MAAM;AAAA,EACjE,CAAC;AACD,aAAW,QAAQ,CAAC,cAAmC;AACrD,gBAAY,yBAAyB,kBAAkB,MAAM,SAAS;AAAA,EACxE,CAAC;AACH;;;ADrCO,IAAM,uBAAuB,oBAA2C;AAAA,EAC7E,OAAO,KAAK,SAAS;AAInB,QAAI,IAAkB,YAAY,EAAE,kBAAkB,GAAG,sBAAsB,CAAC;AAEhF,UAAM,mBAAmB,CAAC,WAA2B,IAAI,YAAY,MAAM;AAC3E,UAAM,gBAAgB,IAAI,IAAmB,aAAa;AAC1D,kBAAc;AAAA,MACZ;AAAA,MACA,OACG;AAAA,QACC;AAAA,MACF;AAAA,IACJ;AAEA,QAAI,CAAC,QAAQ,WAAW;AACtB;AAAA,IACF;AAEA,UAAM,cAAc,IAAI,IAAiBC,YAAW;AACpD,UAAM,cAAc,IAAI,IAAiBC,YAAW;AAEpD,QAAI,CAAC,eAAe,CAAC,aAAa;AAChC,YAAM,IAAI,MAAM,4DAA4D;AAAA,IAC9E;AAEA,yBAAqB,EAAE,aAAa,aAAa,UAAU,QAAQ,UAAW,CAAC;AAAA,EACjF;AAAA,EACA,UAAU,KAAK;AACb,QAAI,IAAiBA,YAAW,GAAG,QAAQ;AAAA,EAC7C;AAAA,EACA,kBAAkB,2BAA2B;AAAA;AAAA;AAAA;AAI/C,CAAC;","names":["FormManager","NodeManager","NodeManager","FormManager"]}