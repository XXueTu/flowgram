"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  createNodeCorePlugin: () => createNodeCorePlugin,
  registerNodeMaterial: () => registerNodeMaterial
});
module.exports = __toCommonJS(src_exports);

// src/create-node-core-plugin.ts
var import_node = require("@flowgram.ai/node");
var import_form_core2 = require("@flowgram.ai/form-core");
var import_document = require("@flowgram.ai/document");
var import_core = require("@flowgram.ai/core");

// src/utils.ts
var import_form_core = require("@flowgram.ai/form-core");
function registerNodeMaterial({
  nodeManager,
  formManager,
  material
}) {
  const {
    setters = [],
    decorators = [],
    effects = [],
    validators = [],
    nodeErrorRender,
    nodePlaceholderRender
  } = material;
  if (nodeErrorRender) {
    (0, import_form_core.registerNodeErrorRender)(nodeManager, nodeErrorRender);
  }
  if (nodePlaceholderRender) {
    (0, import_form_core.registerNodePlaceholderRender)(nodeManager, nodePlaceholderRender);
  }
  setters.forEach((setter) => {
    formManager.registerAbilityExtension(import_form_core.SetterAbility.type, setter);
  });
  decorators.forEach((decorator) => {
    formManager.registerAbilityExtension(import_form_core.DecoratorAbility.type, decorator);
  });
  effects.forEach((effect) => {
    formManager.registerAbilityExtension(import_form_core.EffectAbility.type, effect);
  });
  validators.forEach((validator) => {
    formManager.registerAbilityExtension(import_form_core.ValidationAbility.type, validator);
  });
}

// src/create-node-core-plugin.ts
var createNodeCorePlugin = (0, import_core.definePluginCreator)({
  onInit(ctx, options) {
    ctx.get(import_document.FlowDocument).registerNodeDatas(...(0, import_form_core2.createNodeEntityDatas)());
    const formModelFactory = (entity) => new import_node.FormModelV2(entity);
    const entityManager = ctx.get(import_core.EntityManager);
    entityManager.registerEntityData(
      import_form_core2.FlowNodeFormData,
      () => ({
        formModelFactory
      })
    );
    if (!options.materials) {
      return;
    }
    const nodeManager = ctx.get(import_form_core2.NodeManager);
    const formManager = ctx.get(import_form_core2.FormManager);
    if (!nodeManager || !formManager) {
      throw new Error("NodeCorePlugin Error: nodeManager or formManager not found");
    }
    registerNodeMaterial({ nodeManager, formManager, material: options.materials });
  },
  onDispose(ctx) {
    ctx.get(import_form_core2.FormManager)?.dispose();
  },
  containerModules: (0, import_form_core2.createNodeContainerModules)()
  // onBind: ({ bind }) => {
  //   bindContributions(bind, FormNodeContribution, [NodeContribution]);
  // },
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createNodeCorePlugin,
  registerNodeMaterial
});
//# sourceMappingURL=index.js.map