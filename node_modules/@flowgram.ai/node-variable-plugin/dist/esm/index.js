// src/create-node-variable-plugin.ts
import { NodeManager } from "@flowgram.ai/form-core";
import { definePluginCreator } from "@flowgram.ai/core";

// src/with-node-variables.tsx
import React2 from "react";

// src/components/PublicScopeProvider.tsx
import React, { useMemo } from "react";
import { FlowNodeVariableData, ScopeProvider } from "@flowgram.ai/variable-plugin";
import { useEntityFromContext } from "@flowgram.ai/core";
var PublicScopeProvider = ({ children }) => {
  const node = useEntityFromContext();
  const publicScope = useMemo(() => node.getData(FlowNodeVariableData).public, [node]);
  return /* @__PURE__ */ React.createElement(ScopeProvider, { value: { scope: publicScope } }, children);
};

// src/with-node-variables.tsx
var withNodeVariables = (Component) => (props) => /* @__PURE__ */ React2.createElement(PublicScopeProvider, null, /* @__PURE__ */ React2.createElement(Component, { ...props }));

// src/create-node-variable-plugin.ts
var createNodeVariablePlugin = definePluginCreator({
  onInit(ctx) {
    const nodeManager = ctx.get(NodeManager);
    nodeManager.registerNodeRenderHoc(withNodeVariables);
  }
});

// src/components/PrivateScopeProvider.tsx
import React3, { useMemo as useMemo2 } from "react";
import { FlowNodeVariableData as FlowNodeVariableData2, ScopeProvider as ScopeProvider2 } from "@flowgram.ai/variable-plugin";
import { useEntityFromContext as useEntityFromContext2 } from "@flowgram.ai/core";
var PrivateScopeProvider = ({ children }) => {
  const node = useEntityFromContext2();
  const privateScope = useMemo2(() => {
    const variableData = node.getData(FlowNodeVariableData2);
    if (!variableData.private) {
      variableData.initPrivate();
    }
    return variableData.private;
  }, [node]);
  return /* @__PURE__ */ React3.createElement(ScopeProvider2, { value: { scope: privateScope } }, children);
};

// src/form-v2/create-provider-effect.ts
import { FlowNodeVariableData as FlowNodeVariableData3, ASTKind } from "@flowgram.ai/variable-plugin";
import { DataEvent } from "@flowgram.ai/node";
function createEffectFromVariableProvider(options) {
  const getScope = (node) => {
    const variableData = node.getData(FlowNodeVariableData3);
    if (options.private) {
      return variableData.initPrivate();
    }
    return variableData.public;
  };
  const transformValueToAST = ({ value, context }) => {
    if (!context) {
      return;
    }
    const { node } = context;
    const scope = getScope(node);
    scope.ast.set(options.namespace || "", {
      kind: ASTKind.VariableDeclarationList,
      declarations: options.parse(value, {
        node,
        scope,
        options,
        formItem: void 0
      })
    });
  };
  return [
    {
      event: DataEvent.onValueInit,
      effect: (params) => {
        const { context } = params;
        const scope = getScope(context.node);
        const disposable = options.onInit?.({
          node: context.node,
          scope,
          options,
          formItem: void 0,
          // Hack: 新表单引擎暂时不支持 triggerSync
          triggerSync: void 0
        });
        if (disposable) {
          scope.toDispose.push(disposable);
        }
        transformValueToAST(params);
      }
    },
    {
      event: DataEvent.onValueChange,
      effect: (params) => {
        transformValueToAST(params);
      }
    }
  ];
}

// src/form-v2/create-variable-provider-plugin.ts
import { DataEvent as DataEvent2, defineFormPluginCreator } from "@flowgram.ai/node";
var createVariableProviderPlugin = defineFormPluginCreator("VariableProviderPlugin", {
  onInit: (ctx, opts) => {
  },
  effect: {
    arr: [
      {
        event: DataEvent2.onValueInitOrChange,
        effect: () => {
        }
      }
    ]
  },
  onDispose: (ctx, opts) => {
  }
});
export {
  PrivateScopeProvider,
  PublicScopeProvider,
  createEffectFromVariableProvider,
  createNodeVariablePlugin,
  createVariableProviderPlugin
};
//# sourceMappingURL=index.js.map