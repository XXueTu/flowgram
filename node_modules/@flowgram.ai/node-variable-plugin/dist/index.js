"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  PrivateScopeProvider: () => PrivateScopeProvider,
  PublicScopeProvider: () => PublicScopeProvider,
  createEffectFromVariableProvider: () => createEffectFromVariableProvider,
  createNodeVariablePlugin: () => createNodeVariablePlugin,
  createVariableProviderPlugin: () => createVariableProviderPlugin
});
module.exports = __toCommonJS(src_exports);

// src/create-node-variable-plugin.ts
var import_form_core = require("@flowgram.ai/form-core");
var import_core2 = require("@flowgram.ai/core");

// src/with-node-variables.tsx
var import_react2 = __toESM(require("react"));

// src/components/PublicScopeProvider.tsx
var import_react = __toESM(require("react"));
var import_variable_plugin = require("@flowgram.ai/variable-plugin");
var import_core = require("@flowgram.ai/core");
var PublicScopeProvider = ({ children }) => {
  const node = (0, import_core.useEntityFromContext)();
  const publicScope = (0, import_react.useMemo)(() => node.getData(import_variable_plugin.FlowNodeVariableData).public, [node]);
  return /* @__PURE__ */ import_react.default.createElement(import_variable_plugin.ScopeProvider, { value: { scope: publicScope } }, children);
};

// src/with-node-variables.tsx
var withNodeVariables = (Component) => (props) => /* @__PURE__ */ import_react2.default.createElement(PublicScopeProvider, null, /* @__PURE__ */ import_react2.default.createElement(Component, { ...props }));

// src/create-node-variable-plugin.ts
var createNodeVariablePlugin = (0, import_core2.definePluginCreator)({
  onInit(ctx) {
    const nodeManager = ctx.get(import_form_core.NodeManager);
    nodeManager.registerNodeRenderHoc(withNodeVariables);
  }
});

// src/components/PrivateScopeProvider.tsx
var import_react3 = __toESM(require("react"));
var import_variable_plugin2 = require("@flowgram.ai/variable-plugin");
var import_core3 = require("@flowgram.ai/core");
var PrivateScopeProvider = ({ children }) => {
  const node = (0, import_core3.useEntityFromContext)();
  const privateScope = (0, import_react3.useMemo)(() => {
    const variableData = node.getData(import_variable_plugin2.FlowNodeVariableData);
    if (!variableData.private) {
      variableData.initPrivate();
    }
    return variableData.private;
  }, [node]);
  return /* @__PURE__ */ import_react3.default.createElement(import_variable_plugin2.ScopeProvider, { value: { scope: privateScope } }, children);
};

// src/form-v2/create-provider-effect.ts
var import_variable_plugin3 = require("@flowgram.ai/variable-plugin");
var import_node = require("@flowgram.ai/node");
function createEffectFromVariableProvider(options) {
  const getScope = (node) => {
    const variableData = node.getData(import_variable_plugin3.FlowNodeVariableData);
    if (options.private) {
      return variableData.initPrivate();
    }
    return variableData.public;
  };
  const transformValueToAST = ({ value, context }) => {
    if (!context) {
      return;
    }
    const { node } = context;
    const scope = getScope(node);
    scope.ast.set(options.namespace || "", {
      kind: import_variable_plugin3.ASTKind.VariableDeclarationList,
      declarations: options.parse(value, {
        node,
        scope,
        options,
        formItem: void 0
      })
    });
  };
  return [
    {
      event: import_node.DataEvent.onValueInit,
      effect: (params) => {
        const { context } = params;
        const scope = getScope(context.node);
        const disposable = options.onInit?.({
          node: context.node,
          scope,
          options,
          formItem: void 0,
          // Hack: 新表单引擎暂时不支持 triggerSync
          triggerSync: void 0
        });
        if (disposable) {
          scope.toDispose.push(disposable);
        }
        transformValueToAST(params);
      }
    },
    {
      event: import_node.DataEvent.onValueChange,
      effect: (params) => {
        transformValueToAST(params);
      }
    }
  ];
}

// src/form-v2/create-variable-provider-plugin.ts
var import_node2 = require("@flowgram.ai/node");
var createVariableProviderPlugin = (0, import_node2.defineFormPluginCreator)("VariableProviderPlugin", {
  onInit: (ctx, opts) => {
  },
  effect: {
    arr: [
      {
        event: import_node2.DataEvent.onValueInitOrChange,
        effect: () => {
        }
      }
    ]
  },
  onDispose: (ctx, opts) => {
  }
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  PrivateScopeProvider,
  PublicScopeProvider,
  createEffectFromVariableProvider,
  createNodeVariablePlugin,
  createVariableProviderPlugin
});
//# sourceMappingURL=index.js.map