import { Scope, VariableEngine, ASTNodeJSON, ASTNode, ScopeChain } from '@flowgram.ai/variable-core';
import { FlowNodeEntity, FlowDocument, FlowVirtualTree } from '@flowgram.ai/document';
import { EntityData, EntityManager } from '@flowgram.ai/core';
import { interfaces } from 'inversify';

declare enum FlowNodeScopeTypeEnum {
    public = "public",
    private = "private"
}
interface FlowNodeScopeMeta {
    node?: FlowNodeEntity;
    type?: FlowNodeScopeTypeEnum;
}
interface ScopeVirtualNode {
    id: string;
    flowNodeType: 'virtualNode';
}
type ScopeChainNode = FlowNodeEntity | ScopeVirtualNode;
type FlowNodeScope = Scope<FlowNodeScopeMeta>;

interface Options {
    variableEngine: VariableEngine;
}
declare class FlowNodeVariableData extends EntityData {
    readonly opts: Options;
    static type: string;
    entity: FlowNodeEntity;
    readonly variableEngine: VariableEngine;
    /**
     * Private variables can be accessed by public ones, but not the other way around.
     */
    protected _private?: FlowNodeScope;
    protected _public: FlowNodeScope;
    get private(): FlowNodeScope | undefined;
    get public(): FlowNodeScope;
    /**
     * Sets a variable in the public AST (Abstract Syntax Tree) with the given key and JSON value.
     *
     * @param key - The key under which the variable will be stored.
     * @param json - The JSON value to store.
     * @returns The updated AST node.
     */
    setVar(key: string, json: ASTNodeJSON): ASTNode;
    /**
     * Sets a variable in the public AST (Abstract Syntax Tree) with the default key 'outputs'.
     *
     * @param json - The JSON value to store.
     * @returns The updated AST node.
     */
    setVar(json: ASTNodeJSON): ASTNode;
    /**
     * Retrieves a variable from the public AST (Abstract Syntax Tree) by key.
     *
     * @param key - The key of the variable to retrieve. Defaults to 'outputs'.
     * @returns The value of the variable, or undefined if not found.
     */
    getVar(key?: string): ASTNode<any, any> | undefined;
    /**
     * Clears a variable from the public AST (Abstract Syntax Tree) by key.
     *
     * @param key - The key of the variable to clear. Defaults to 'outputs'.
     * @returns The updated AST node.
     */
    clearVar(key?: string): void;
    /**
     * Sets a variable in the private AST (Abstract Syntax Tree) with the given key and JSON value.
     *
     * @param key - The key under which the variable will be stored.
     * @param json - The JSON value to store.
     * @returns The updated AST node.
     */
    setPrivateVar(key: string, json: ASTNodeJSON): ASTNode;
    /**
     * Sets a variable in the private AST (Abstract Syntax Tree) with the default key 'outputs'.
     *
     * @param json - The JSON value to store.
     * @returns The updated AST node.
     */
    setPrivateVar(json: ASTNodeJSON): ASTNode;
    /**
     * Retrieves a variable from the private AST (Abstract Syntax Tree) by key.
     *
     * @param key - The key of the variable to retrieve. Defaults to 'outputs'.
     * @returns The value of the variable, or undefined if not found.
     */
    getPrivateVar(key?: string): ASTNode<any, any> | undefined;
    /**
     * Clears a variable from the private AST (Abstract Syntax Tree) by key.
     *
     * @param key - The key of the variable to clear. Defaults to 'outputs'.
     * @returns The updated AST node.
     */
    clearPrivateVar(key?: string): void | undefined;
    get allScopes(): FlowNodeScope[];
    getDefaultData(): {};
    constructor(entity: FlowNodeEntity, opts: Options);
    initPrivate(): FlowNodeScope;
}

interface TransformerContext {
    scope: FlowNodeScope;
    document: FlowDocument;
    variableEngine: VariableEngine;
}
interface VariableLayoutConfig {
    /**
     * 节点的子节点输出变量，不能被后续节点所访问，用于固定布局场景
     * @param node
     * @returns
     */
    isNodeChildrenPrivate?: (node: ScopeChainNode) => boolean;
    /**
     * 用于自由画布场景，部分场景通过连线或者其他交互形式来表达节点之间的父子关系，需要可配置化
     */
    getFreeChildren?: (node: FlowNodeEntity) => FlowNodeEntity[];
    getFreeParent?: (node: FlowNodeEntity) => FlowNodeEntity | undefined;
    /**
     * 对依赖作用域进行微调
     */
    transformDeps?: (scopes: Scope[], ctx: TransformerContext) => Scope[];
    /**
     * 对依赖作用域进行微调
     */
    transformCovers?: (scopes: Scope[], ctx: TransformerContext) => Scope[];
}
declare const VariableLayoutConfig: unique symbol;

/**
 * 自由布局作用域链实现
 */
declare class FreeLayoutScopeChain extends ScopeChain {
    entityManager: EntityManager;
    protected flowDocument: FlowDocument;
    protected configs?: VariableLayoutConfig;
    get tree(): FlowVirtualTree<FlowNodeEntity>;
    onInit(): void;
    protected getAllInputLayerNodes(curr: FlowNodeEntity): FlowNodeEntity[];
    protected getAllOutputLayerNodes(curr: FlowNodeEntity): FlowNodeEntity[];
    getDeps(scope: FlowNodeScope): FlowNodeScope[];
    getCovers(scope: FlowNodeScope): FlowNodeScope[];
    protected transformCovers(covers: Scope[], { scope }: {
        scope: Scope;
    }): Scope[];
    protected transformDeps(deps: Scope[], { scope }: {
        scope: Scope;
    }): Scope[];
    getChildren(node: FlowNodeEntity): FlowNodeEntity[];
    getParent(node: FlowNodeEntity): FlowNodeEntity | undefined;
    sortAll(): Scope[];
}

/**
 * 基于 FlowVirtualTree 的 ScopeOrder 实现
 */
declare class FixedLayoutScopeChain extends ScopeChain {
    protected flowDocument: FlowDocument;
    protected configs?: VariableLayoutConfig | undefined;
    tree: FlowVirtualTree<ScopeChainNode> | undefined;
    constructor(flowDocument: FlowDocument, configs?: VariableLayoutConfig | undefined);
    bindTree(tree: FlowVirtualTree<ScopeChainNode>): void;
    getDeps(scope: FlowNodeScope): FlowNodeScope[];
    getCovers(scope: FlowNodeScope): FlowNodeScope[];
    protected transformCovers(covers: Scope[], { scope }: {
        scope: Scope;
    }): Scope[];
    protected transformDeps(deps: Scope[], { scope }: {
        scope: Scope;
    }): Scope[];
    sortAll(): Scope[];
    private getVariableData;
    private isNodeChildrenPrivate;
    private hasChildren;
    private getAllSortedChildScope;
}

declare class GlobalScope extends Scope {
    static readonly ID: unique symbol;
    static is(scope: Scope): scope is GlobalScope;
    /**
     * Sets a variable in the Global Scope with the given key and JSON value.
     *
     * @param key - The key under which the variable will be stored.
     * @param json - The JSON value to store.
     * @returns The updated AST node.
     */
    setVar(key: string, json: ASTNodeJSON): ASTNode;
    /**
     * Sets a variable in the Global Scope with the default key 'outputs'.
     *
     * @param json - The JSON value to store.
     * @returns The updated AST node.
     */
    setVar(json: ASTNodeJSON): ASTNode;
    /**
     * Retrieves a variable from the Global Scope by key.
     *
     * @param key - The key of the variable to retrieve. Defaults to 'outputs'.
     * @returns The value of the variable, or undefined if not found.
     */
    getVar(key?: string): ASTNode<any, any> | undefined;
    /**
     * Clears a variable from the Global Scope by key.
     *
     * @param key - The key of the variable to clear. Defaults to 'outputs'.
     * @returns The updated AST node.
     */
    clearVar(key?: string): void;
}
declare const bindGlobalScope: (bind: interfaces.Bind) => void;

export { FixedLayoutScopeChain, type FlowNodeScope, type FlowNodeScopeMeta, FlowNodeScopeTypeEnum as FlowNodeScopeType, FlowNodeVariableData, FreeLayoutScopeChain, GlobalScope, VariableLayoutConfig, bindGlobalScope };
