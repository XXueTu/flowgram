{"version":3,"sources":["../../src/create-free-hover-plugin.ts","../../src/hover-layer.tsx","../../src/selection-utils.ts"],"sourcesContent":["import { definePluginCreator } from '@flowgram.ai/core';\n\nimport { HoverLayer } from './hover-layer';\n\nexport const createFreeHoverPlugin = definePluginCreator({\n  onInit(ctx): void {\n    ctx.playground.registerLayer(HoverLayer);\n  },\n});\n","/* eslint-disable complexity */\nimport { inject, injectable } from 'inversify';\nimport { type IPoint } from '@flowgram.ai/utils';\nimport { SelectorBoxConfigEntity } from '@flowgram.ai/renderer';\nimport {\n  WorkflowDocument,\n  WorkflowDragService,\n  WorkflowHoverService,\n  WorkflowLineEntity,\n  WorkflowLinesManager,\n  WorkflowNodeEntity,\n  WorkflowSelectService,\n} from '@flowgram.ai/free-layout-core';\nimport { WorkflowPortEntity } from '@flowgram.ai/free-layout-core';\nimport { FlowNodeBaseType, FlowNodeTransformData } from '@flowgram.ai/document';\nimport {\n  EditorState,\n  EditorStateConfigEntity,\n  Layer,\n  PlaygroundConfigEntity,\n  observeEntities,\n  observeEntity,\n  observeEntityDatas,\n  type LayerOptions,\n} from '@flowgram.ai/core';\n\nimport { getSelectionBounds } from './selection-utils';\nconst PORT_BG_CLASS_NAME = 'workflow-port-bg';\n\nexport interface HoverLayerOptions extends LayerOptions {\n  canHovered?: (e: MouseEvent, service: WorkflowHoverService) => boolean;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace HoverLayerOptions {\n  export const DEFAULT: HoverLayerOptions = {\n    canHovered: () => true,\n  };\n}\n\nconst LINE_CLASS_NAME = '.gedit-flow-activity-line';\nconst NODE_CLASS_NAME = '.gedit-flow-activity-node';\n\n@injectable()\nexport class HoverLayer extends Layer<HoverLayerOptions> {\n  static type = 'HoverLayer';\n\n  @inject(WorkflowDocument) document: WorkflowDocument;\n\n  @inject(WorkflowSelectService) selectionService: WorkflowSelectService;\n\n  @inject(WorkflowDragService) dragService: WorkflowDragService;\n\n  @inject(WorkflowHoverService) hoverService: WorkflowHoverService;\n\n  @inject(WorkflowLinesManager)\n  linesManager: WorkflowLinesManager;\n\n  @observeEntity(EditorStateConfigEntity)\n  protected editorStateConfig: EditorStateConfigEntity;\n\n  @observeEntity(SelectorBoxConfigEntity)\n  protected selectorBoxConfigEntity: SelectorBoxConfigEntity;\n\n  @inject(PlaygroundConfigEntity) configEntity: PlaygroundConfigEntity;\n\n  /**\n   * 监听节点 transform\n   */\n  @observeEntityDatas(WorkflowNodeEntity, FlowNodeTransformData)\n  protected readonly nodeTransforms: FlowNodeTransformData[];\n\n  /**\n   * 按选中排序\n   * @private\n   */\n  protected nodeTransformsWithSort: FlowNodeTransformData[] = [];\n\n  autorun(): void {\n    const { activatedNode } = this.selectionService;\n    this.nodeTransformsWithSort = this.nodeTransforms\n      .filter((n) => n.entity.id !== 'root' && n.entity.flowNodeType !== FlowNodeBaseType.GROUP)\n      .reverse() // 后创建的排在前面\n      .sort((n1) => (n1.entity === activatedNode ? -1 : 0));\n  }\n\n  /**\n   * 监听线条\n   */\n  @observeEntities(WorkflowLineEntity)\n  protected readonly lines: WorkflowLineEntity[];\n\n  /**\n   * 是否正在调整线条\n   * @protected\n   */\n  get isDrawing(): boolean {\n    return this.linesManager.isDrawing;\n  }\n\n  onReady(): void {\n    this.options = {\n      ...HoverLayerOptions.DEFAULT,\n      ...this.options,\n    };\n    this.toDispose.pushAll([\n      // 监听画布鼠标移动事件\n      this.listenPlaygroundEvent('mousemove', (e: MouseEvent) => {\n        this.hoverService.hoveredPos = this.config.getPosFromMouseEvent(e);\n        if (!this.isEnabled()) {\n          return;\n        }\n        if (!this.options.canHovered!(e, this.hoverService)) {\n          return;\n        }\n        const mousePos = this.config.getPosFromMouseEvent(e);\n        // 更新 hover 状态\n        this.updateHoveredState(mousePos, e?.target as HTMLElement);\n      }),\n      this.selectionService.onSelectionChanged(() => this.autorun()),\n      // 控制选中逻辑\n      this.listenPlaygroundEvent('mousedown', (e: MouseEvent): boolean | undefined => {\n        if (!this.isEnabled() || this.isDrawing) {\n          return undefined;\n        }\n        const { hoveredNode } = this.hoverService;\n        // 重置线条\n        if (hoveredNode && hoveredNode instanceof WorkflowLineEntity) {\n          this.dragService.resetLine(hoveredNode, e);\n          return true;\n        }\n        if (\n          hoveredNode &&\n          hoveredNode instanceof WorkflowPortEntity &&\n          hoveredNode.portType !== 'input' &&\n          !hoveredNode.disabled &&\n          e.button !== 1\n        ) {\n          e.stopPropagation();\n          e.preventDefault();\n          this.dragService.startDrawingLine(hoveredNode, e);\n          return true;\n        }\n        const mousePos = this.config.getPosFromMouseEvent(e);\n        const selectionBounds = getSelectionBounds(\n          this.selectionService.selection,\n          // 这里只考虑多选模式，单选模式已经下沉到 use-node-render 中\n          true\n        );\n        if (selectionBounds.width > 0 && selectionBounds.contains(mousePos.x, mousePos.y)) {\n          /**\n           * 拖拽选择框\n           */\n          this.dragService.startDragSelectedNodes(e)?.then((dragSuccess) => {\n            if (!dragSuccess) {\n              // 拖拽没有成功触发了点击\n              if (hoveredNode && hoveredNode instanceof WorkflowNodeEntity) {\n                // 追加选择\n                if (e.shiftKey) {\n                  this.selectionService.toggleSelect(hoveredNode);\n                } else {\n                  this.selectionService.selectNode(hoveredNode);\n                }\n              } else {\n                this.selectionService.clear();\n              }\n            }\n          });\n          // 这里会组织触发 selector box\n          return true;\n        } else {\n          if (!hoveredNode) {\n            this.selectionService.clear();\n          }\n        }\n        return undefined;\n      }),\n    ]);\n  }\n\n  /**\n   * 更新 hoverd\n   * @param mousePos\n   */\n  updateHoveredState(mousePos: IPoint, target?: HTMLElement): void {\n    const { hoverService } = this;\n    const nodeTransforms = this.nodeTransformsWithSort;\n    // // 判断连接点是否 hover\n    const portHovered = this.linesManager.getPortFromMousePos(mousePos);\n\n    const lineDomNodes = this.playgroundNode.querySelectorAll(LINE_CLASS_NAME);\n    const checkTargetFromLine = [...lineDomNodes].some((lineDom) =>\n      lineDom.contains(target as HTMLElement)\n    );\n    // 默认 只有 output 点位可以 hover\n    if (portHovered) {\n      // 输出点可以直接选中\n      if (portHovered.portType === 'output') {\n        hoverService.updateHoveredKey(portHovered.id);\n      } else if (checkTargetFromLine || target?.className?.includes?.(PORT_BG_CLASS_NAME)) {\n        // 输入点采用获取最接近的线条\n        const lineHovered = this.linesManager.getCloseInLineFromMousePos(mousePos);\n        if (lineHovered) {\n          this.updateHoveredKey(lineHovered.id);\n        }\n      }\n      return;\n    }\n\n    // Drawing 情况，不能选中节点和线条\n    if (this.isDrawing) {\n      return;\n    }\n\n    const nodeHovered = nodeTransforms.find((trans: FlowNodeTransformData) =>\n      trans.bounds.contains(mousePos.x, mousePos.y)\n    )?.entity as WorkflowNodeEntity;\n\n    // 判断当前鼠标位置所在元素是否在节点内部\n    const nodeDomNodes = this.playgroundNode.querySelectorAll(NODE_CLASS_NAME);\n    const checkTargetFromNode = [...nodeDomNodes].some((nodeDom) =>\n      nodeDom.contains(target as HTMLElement)\n    );\n\n    if (nodeHovered || checkTargetFromNode) {\n      if (nodeHovered?.id) {\n        this.updateHoveredKey(nodeHovered.id);\n      }\n    }\n\n    const nodeInContainer = !!(nodeHovered?.parent && nodeHovered.parent.flowNodeType !== 'root');\n\n    // 获取最接近的线条\n    // 线条会相交需要获取最接近点位的线条，不能删除的线条不能被选中\n    const lineHovered = checkTargetFromLine\n      ? this.linesManager.getCloseInLineFromMousePos(mousePos)\n      : undefined;\n    const lineInContainer = !!lineHovered?.inContainer;\n\n    // 判断容器内节点是否 hover\n    if (nodeHovered && nodeInContainer) {\n      this.updateHoveredKey(nodeHovered.id);\n      return;\n    }\n    // 判断容器内线条是否 hover\n    if (lineHovered && lineInContainer) {\n      this.updateHoveredKey(lineHovered.id);\n      return;\n    }\n\n    // 判断节点是否 hover\n    if (nodeHovered) {\n      this.updateHoveredKey(nodeHovered.id);\n      return;\n    }\n    // 判断线条是否 hover\n    if (lineHovered) {\n      this.hoverService.updateHoveredKey(lineHovered.id);\n      return;\n    }\n\n    // 上述逻辑都未命中 则清空 hoverd\n    hoverService.clearHovered();\n\n    const currentState = this.editorStateConfig.getCurrentState();\n    const isMouseFriendly = currentState === EditorState.STATE_MOUSE_FRIENDLY_SELECT;\n\n    // 鼠标优先，并且不是按住 shift 键，更新为小手\n    if (isMouseFriendly && !this.editorStateConfig.isPressingShift) {\n      this.configEntity.updateCursor('grab');\n    }\n  }\n\n  updateHoveredKey(key: string): void {\n    // 鼠标优先交互模式，如果是 hover，需要将鼠标的小手去掉，还原鼠标原有样式\n    this.configEntity.updateCursor('default');\n    this.hoverService.updateHoveredKey(key);\n  }\n\n  /**\n   * 判断是否能够 hover\n   * @returns 是否能 hover\n   */\n  isEnabled(): boolean {\n    const currentState = this.editorStateConfig.getCurrentState();\n    // 选择框情况禁止 hover\n    return (\n      // 鼠标友好模式下，也需要支持 hover 效果，不然线条选择不到\n      // Coze 中没有使用该插件，需要在 workflow/render 包相应位置改动\n      (currentState === EditorState.STATE_SELECT ||\n        currentState === EditorState.STATE_MOUSE_FRIENDLY_SELECT) &&\n      !this.selectorBoxConfigEntity.isStart &&\n      !this.dragService.isDragging\n    );\n  }\n}\n","import { Rectangle } from '@flowgram.ai/utils';\nimport { WorkflowNodeEntity } from '@flowgram.ai/free-layout-core';\nimport { FlowNodeTransformData } from '@flowgram.ai/document';\nimport { type Entity } from '@flowgram.ai/core';\n\nconst BOUNDS_PADDING = 2;\n\nexport function getSelectionBounds(\n  selection: Entity[],\n  ignoreOneSelect: boolean = true // 忽略单选\n): Rectangle {\n  const selectedNodes = selection.filter((node) => node instanceof WorkflowNodeEntity);\n\n  // 选中单个的时候不显示\n  return selectedNodes.length > (ignoreOneSelect ? 1 : 0)\n    ? Rectangle.enlarge(selectedNodes.map((n) => n.getData(FlowNodeTransformData)!.bounds)).pad(\n        BOUNDS_PADDING\n      )\n    : Rectangle.EMPTY;\n}\n"],"mappings":"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","names":["WorkflowNodeEntity","FlowNodeTransformData","HoverLayerOptions","WorkflowNodeEntity","lineHovered","FlowNodeTransformData"]}