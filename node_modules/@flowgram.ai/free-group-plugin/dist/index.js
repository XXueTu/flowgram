"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result) __defProp(target, key, result);
  return result;
};

// src/index.ts
var src_exports = {};
__export(src_exports, {
  WorkflowGroupCommand: () => WorkflowGroupCommand,
  WorkflowGroupService: () => WorkflowGroupService,
  createFreeGroupPlugin: () => createFreeGroupPlugin
});
module.exports = __toCommonJS(src_exports);

// src/create-free-group-plugin.tsx
var import_shortcuts_plugin = require("@flowgram.ai/shortcuts-plugin");
var import_renderer = require("@flowgram.ai/renderer");
var import_free_layout_core4 = require("@flowgram.ai/free-layout-core");
var import_document5 = require("@flowgram.ai/document");
var import_core2 = require("@flowgram.ai/core");

// src/workflow-group-service.ts
var import_inversify = require("inversify");
var import_utils = require("@flowgram.ai/utils");
var import_free_layout_core = require("@flowgram.ai/free-layout-core");
var import_free_history_plugin = require("@flowgram.ai/free-history-plugin");
var import_free_container_plugin = require("@flowgram.ai/free-container-plugin");
var import_document2 = require("@flowgram.ai/document");
var import_core = require("@flowgram.ai/core");

// src/utils.ts
var import_document = require("@flowgram.ai/document");
var WorkflowGroupUtils;
((WorkflowGroupUtils2) => {
  const isNodeInGroup = (node) => {
    if (node?.parent?.flowNodeType === import_document.FlowNodeBaseType.GROUP) {
      return true;
    }
    return false;
  };
  const isGroupNode = (group) => group.flowNodeType === import_document.FlowNodeBaseType.GROUP;
  WorkflowGroupUtils2.validate = (nodes) => {
    if (!nodes || !Array.isArray(nodes) || nodes.length === 0) {
      return false;
    }
    const isGroupRelatedNode = nodes.some((node) => isGroupNode(node));
    if (isGroupRelatedNode) return false;
    const hasGroup = nodes.some((node) => node && isNodeInGroup(node));
    if (hasGroup) return false;
    const parent = nodes[0].parent;
    const isSameParent = nodes.every((node) => node.parent === parent);
    if (!isSameParent) return false;
    return true;
  };
})(WorkflowGroupUtils || (WorkflowGroupUtils = {}));

// src/workflow-group-service.ts
var WorkflowGroupService = class extends import_document2.FlowGroupService {
  constructor() {
    super(...arguments);
    this.toDispose = new import_utils.DisposableCollection();
  }
  ready() {
    this.toDispose.push(this.listenContainer());
  }
  dispose() {
    this.toDispose.dispose();
  }
  /** 创建分组节点 */
  createGroup(nodes) {
    if (!WorkflowGroupUtils.validate(nodes)) {
      return;
    }
    const parent = nodes[0].parent ?? this.document.root;
    const groupId = `group_${(0, import_free_layout_core.nanoid)(5)}`;
    const groupJSON = {
      type: import_document2.FlowNodeBaseType.GROUP,
      id: groupId,
      meta: {
        position: {
          x: 0,
          y: 0
        }
      },
      data: {}
    };
    this.historyService.startTransaction();
    this.document.createWorkflowNodeByType(
      import_document2.FlowNodeBaseType.GROUP,
      {
        x: 0,
        y: 0
      },
      groupJSON,
      parent.id
    );
    nodes.forEach((node) => {
      this.freeOperationService.moveNode(node, {
        parent: groupId
      });
    });
    this.historyService.endTransaction();
  }
  /** 取消分组 */
  ungroup(groupNode) {
    const groupBlocks = groupNode.blocks.slice();
    if (!groupNode.parent) {
      return;
    }
    const groupPosition = groupNode.transform.position;
    this.historyService.startTransaction();
    groupBlocks.forEach((node) => {
      this.freeOperationService.moveNode(node, {
        parent: groupNode.parent?.id
      });
    });
    groupNode.dispose();
    groupBlocks.forEach((node) => {
      const transform = node.getData(import_core.TransformData);
      const position = {
        x: transform.position.x + groupPosition.x,
        y: transform.position.y + groupPosition.y
      };
      this.freeOperationService.updateNodePosition(node, position);
    });
    this.historyService.endTransaction();
  }
  listenContainer() {
    return this.nodeIntoContainerService.on((e) => {
      if (e.type !== import_free_container_plugin.NodeIntoContainerType.Out || e.sourceContainer?.flowNodeType !== import_document2.FlowNodeBaseType.GROUP) {
        return;
      }
      if (e.sourceContainer?.blocks.length === 0) {
        e.sourceContainer.dispose();
      }
    });
  }
};
__decorateClass([
  (0, import_inversify.inject)(import_free_layout_core.WorkflowDocument)
], WorkflowGroupService.prototype, "document", 2);
__decorateClass([
  (0, import_inversify.inject)(import_free_layout_core.WorkflowOperationBaseService)
], WorkflowGroupService.prototype, "freeOperationService", 2);
__decorateClass([
  (0, import_inversify.inject)(import_free_history_plugin.HistoryService)
], WorkflowGroupService.prototype, "historyService", 2);
__decorateClass([
  (0, import_inversify.inject)(import_free_container_plugin.NodeIntoContainerService)
], WorkflowGroupService.prototype, "nodeIntoContainerService", 2);
WorkflowGroupService = __decorateClass([
  (0, import_inversify.injectable)()
], WorkflowGroupService);

// src/shortcuts/group.ts
var import_free_layout_core2 = require("@flowgram.ai/free-layout-core");

// src/constant.ts
var WorkflowGroupCommand = /* @__PURE__ */ ((WorkflowGroupCommand2) => {
  WorkflowGroupCommand2["Group"] = "group";
  WorkflowGroupCommand2["Ungroup"] = "ungroup";
  return WorkflowGroupCommand2;
})(WorkflowGroupCommand || {});

// src/shortcuts/group.ts
var GroupShortcut = class {
  constructor(context) {
    this.commandId = "group" /* Group */;
    this.commandDetail = {
      label: "Group"
    };
    this.shortcuts = ["meta g", "ctrl g"];
    this.selectService = context.get(import_free_layout_core2.WorkflowSelectService);
    this.groupService = context.get(WorkflowGroupService);
    this.execute = this.execute.bind(this);
  }
  async execute() {
    this.groupService.createGroup(this.selectService.selectedNodes);
    this.selectService.clear();
  }
};

// src/shortcuts/ungroup.ts
var import_free_layout_core3 = require("@flowgram.ai/free-layout-core");
var import_document3 = require("@flowgram.ai/document");
var UngroupShortcut = class {
  constructor(context) {
    this.commandId = "ungroup" /* Ungroup */;
    this.commandDetail = {
      label: "Ungroup"
    };
    this.shortcuts = ["meta shift g", "ctrl shift g"];
    this.selectService = context.get(import_free_layout_core3.WorkflowSelectService);
    this.groupService = context.get(WorkflowGroupService);
    this.execute = this.execute.bind(this);
  }
  async execute(_groupNode) {
    const groupNode = _groupNode || this.selectService.activatedNode;
    if (!groupNode || groupNode.flowNodeType !== import_document3.FlowNodeBaseType.GROUP) {
      return;
    }
    this.groupService.ungroup(groupNode);
    this.selectService.clear();
  }
};

// src/group-node.tsx
var import_document4 = require("@flowgram.ai/document");
var GroupNodeRegistry = {
  type: import_document4.FlowNodeBaseType.GROUP,
  meta: {
    renderKey: import_document4.FlowNodeBaseType.GROUP,
    defaultPorts: [],
    isContainer: true,
    disableSideBar: true,
    size: {
      width: 560,
      height: 400
    },
    padding: () => ({
      top: 80,
      bottom: 40,
      left: 65,
      right: 65
    }),
    selectable(node, mousePos) {
      if (!mousePos) {
        return true;
      }
      const transform = node.getData(import_document4.FlowNodeTransformData);
      return !transform.bounds.contains(mousePos.x, mousePos.y);
    },
    expandable: false
  },
  formMeta: {
    render: () => /* @__PURE__ */ React.createElement(React.Fragment, null)
  }
};

// src/create-free-group-plugin.tsx
var createFreeGroupPlugin = (0, import_core2.definePluginCreator)(
  {
    onBind({ bind, rebind }) {
      bind(WorkflowGroupService).toSelf().inSingletonScope();
      rebind(import_document5.FlowGroupService).toService(WorkflowGroupService);
    },
    onInit(ctx, { groupNodeRender, disableGroupShortcuts = false, disableGroupNodeRegister = false }) {
      if (groupNodeRender) {
        const renderRegistry = ctx.get(import_renderer.FlowRendererRegistry);
        renderRegistry.registerReactComponent(import_document5.FlowNodeBaseType.GROUP, groupNodeRender);
      }
      if (!disableGroupShortcuts) {
        const shortcutsRegistry = ctx.get(import_shortcuts_plugin.ShortcutsRegistry);
        shortcutsRegistry.addHandlers(new GroupShortcut(ctx), new UngroupShortcut(ctx));
      }
      if (!disableGroupNodeRegister) {
        const document = ctx.get(import_free_layout_core4.WorkflowDocument);
        document.registerFlowNodes(GroupNodeRegistry);
      }
    },
    onReady(ctx) {
      const groupService = ctx.get(WorkflowGroupService);
      groupService.ready();
    },
    onDispose(ctx) {
      const groupService = ctx.get(WorkflowGroupService);
      groupService.dispose();
    }
  }
);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  WorkflowGroupCommand,
  WorkflowGroupService,
  createFreeGroupPlugin
});
//# sourceMappingURL=index.js.map