{"version":3,"sources":["../src/index.ts","../src/create-variable-plugin.ts"],"sourcesContent":["export * from './create-variable-plugin';\nexport * from '@flowgram.ai/variable-core';\nexport { FlowNodeVariableData, GlobalScope } from '@flowgram.ai/variable-layout';\n","import {\n  FlowNodeVariableData,\n  FreeLayoutScopeChain,\n  FixedLayoutScopeChain,\n  VariableLayoutConfig,\n  bindGlobalScope,\n} from '@flowgram.ai/variable-layout';\nimport {\n  VariableContainerModule,\n  ASTNodeRegistry,\n  ASTRegisters,\n  VariableEngine,\n  ScopeChain,\n} from '@flowgram.ai/variable-core';\nimport { FlowDocument } from '@flowgram.ai/document';\nimport { PluginContext, definePluginCreator } from '@flowgram.ai/core';\nimport { EntityManager } from '@flowgram.ai/core';\n\n/**\n * @deprecated 请使用 @injectToAst(XXXService) declare xxxService: XXXService 实现外部依赖注入\n */\ntype Injector = (ctx: PluginContext) => Record<string, any>;\n\nexport interface VariablePluginOptions {\n  enable?: boolean;\n  // 业务扩展 AST 节点\n  extendASTNodes?: (ASTNodeRegistry | [ASTNodeRegistry] | [ASTNodeRegistry, Injector])[];\n  // 布局方式\n  layout?: 'fixed' | 'free';\n  // 布局配置\n  layoutConfig?: VariableLayoutConfig;\n}\n\nexport const createVariablePlugin = definePluginCreator<VariablePluginOptions>({\n  onBind({ bind }, opts) {\n    const { layout, layoutConfig } = opts;\n\n    if (layout === 'free') {\n      bind(ScopeChain).to(FreeLayoutScopeChain).inSingletonScope();\n    }\n    if (layout === 'fixed') {\n      bind(ScopeChain).to(FixedLayoutScopeChain).inSingletonScope();\n    }\n    if (layoutConfig) {\n      bind(VariableLayoutConfig).toConstantValue(layoutConfig || {});\n    }\n\n    bindGlobalScope(bind);\n  },\n  onInit(ctx, opts) {\n    const { extendASTNodes } = opts || {};\n\n    const variableEngine = ctx.get<VariableEngine>(VariableEngine);\n    const astRegisters = ctx.get<ASTRegisters>(ASTRegisters);\n    const entityManager = ctx.get<EntityManager>(EntityManager);\n    const document = ctx.get<FlowDocument>(FlowDocument);\n\n    /**\n     * 注册扩展 AST 节点\n     */\n    (extendASTNodes || []).forEach((info) => {\n      if (Array.isArray(info)) {\n        const [extendASTNode, injector] = info;\n\n        astRegisters.registerAST(extendASTNode, injector ? () => injector(ctx) : undefined);\n\n        return;\n      }\n\n      astRegisters.registerAST(info);\n    });\n\n    /**\n     * 扩展 FlowNodeVariableData\n     */\n    entityManager.registerEntityData(FlowNodeVariableData, () => ({ variableEngine } as any));\n    document.registerNodeDatas(FlowNodeVariableData);\n  },\n  containerModules: [VariableContainerModule],\n});\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,6BAMO;AACP,2BAMO;AACP,sBAA6B;AAC7B,kBAAmD;AACnD,IAAAA,eAA8B;AAiBvB,IAAM,2BAAuB,iCAA2C;AAAA,EAC7E,OAAO,EAAE,KAAK,GAAG,MAAM;AACrB,UAAM,EAAE,QAAQ,aAAa,IAAI;AAEjC,QAAI,WAAW,QAAQ;AACrB,WAAK,+BAAU,EAAE,GAAG,2CAAoB,EAAE,iBAAiB;AAAA,IAC7D;AACA,QAAI,WAAW,SAAS;AACtB,WAAK,+BAAU,EAAE,GAAG,4CAAqB,EAAE,iBAAiB;AAAA,IAC9D;AACA,QAAI,cAAc;AAChB,WAAK,2CAAoB,EAAE,gBAAgB,gBAAgB,CAAC,CAAC;AAAA,IAC/D;AAEA,gDAAgB,IAAI;AAAA,EACtB;AAAA,EACA,OAAO,KAAK,MAAM;AAChB,UAAM,EAAE,eAAe,IAAI,QAAQ,CAAC;AAEpC,UAAM,iBAAiB,IAAI,IAAoB,mCAAc;AAC7D,UAAM,eAAe,IAAI,IAAkB,iCAAY;AACvD,UAAM,gBAAgB,IAAI,IAAmB,0BAAa;AAC1D,UAAM,WAAW,IAAI,IAAkB,4BAAY;AAKnD,KAAC,kBAAkB,CAAC,GAAG,QAAQ,CAAC,SAAS;AACvC,UAAI,MAAM,QAAQ,IAAI,GAAG;AACvB,cAAM,CAAC,eAAe,QAAQ,IAAI;AAElC,qBAAa,YAAY,eAAe,WAAW,MAAM,SAAS,GAAG,IAAI,MAAS;AAElF;AAAA,MACF;AAEA,mBAAa,YAAY,IAAI;AAAA,IAC/B,CAAC;AAKD,kBAAc,mBAAmB,6CAAsB,OAAO,EAAE,eAAe,EAAS;AACxF,aAAS,kBAAkB,2CAAoB;AAAA,EACjD;AAAA,EACA,kBAAkB,CAAC,4CAAuB;AAC5C,CAAC;;;AD9ED,wBAAc,uCADd;AAEA,IAAAC,0BAAkD;","names":["import_core","import_variable_layout"]}