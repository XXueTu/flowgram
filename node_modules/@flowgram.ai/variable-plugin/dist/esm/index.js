// src/create-variable-plugin.ts
import {
  FlowNodeVariableData,
  FreeLayoutScopeChain,
  FixedLayoutScopeChain,
  VariableLayoutConfig,
  bindGlobalScope
} from "@flowgram.ai/variable-layout";
import {
  VariableContainerModule,
  ASTRegisters,
  VariableEngine,
  ScopeChain
} from "@flowgram.ai/variable-core";
import { FlowDocument } from "@flowgram.ai/document";
import { definePluginCreator } from "@flowgram.ai/core";
import { EntityManager } from "@flowgram.ai/core";
var createVariablePlugin = definePluginCreator({
  onBind({ bind }, opts) {
    const { layout, layoutConfig } = opts;
    if (layout === "free") {
      bind(ScopeChain).to(FreeLayoutScopeChain).inSingletonScope();
    }
    if (layout === "fixed") {
      bind(ScopeChain).to(FixedLayoutScopeChain).inSingletonScope();
    }
    if (layoutConfig) {
      bind(VariableLayoutConfig).toConstantValue(layoutConfig || {});
    }
    bindGlobalScope(bind);
  },
  onInit(ctx, opts) {
    const { extendASTNodes } = opts || {};
    const variableEngine = ctx.get(VariableEngine);
    const astRegisters = ctx.get(ASTRegisters);
    const entityManager = ctx.get(EntityManager);
    const document = ctx.get(FlowDocument);
    (extendASTNodes || []).forEach((info) => {
      if (Array.isArray(info)) {
        const [extendASTNode, injector] = info;
        astRegisters.registerAST(extendASTNode, injector ? () => injector(ctx) : void 0);
        return;
      }
      astRegisters.registerAST(info);
    });
    entityManager.registerEntityData(FlowNodeVariableData, () => ({ variableEngine }));
    document.registerNodeDatas(FlowNodeVariableData);
  },
  containerModules: [VariableContainerModule]
});

// src/index.ts
export * from "@flowgram.ai/variable-core";
import { FlowNodeVariableData as FlowNodeVariableData2, GlobalScope } from "@flowgram.ai/variable-layout";
export {
  FlowNodeVariableData2 as FlowNodeVariableData,
  GlobalScope,
  createVariablePlugin
};
//# sourceMappingURL=index.js.map