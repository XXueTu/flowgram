import { PlaygroundConfigEntity, CommandService, PlaygroundDragEvent, EntityData } from '@flowgram.ai/core';
export { bindConfigEntity, useConfigEntity, useEntities, useEntityDataFromContext, useEntityFromContext, useListenEvents, usePlayground, usePlaygroundContainer, usePlaygroundContext, usePlaygroundLatest, useRefresh, useService } from '@flowgram.ai/core';
import { NodeFormProps } from '@flowgram.ai/node';
import { FlowOperationBaseService, FlowNodeType, FlowOperationBaseServiceImpl, FlowNodeEntityOrId, FlowNodeEntity } from '@flowgram.ai/document';
import { W as WorkflowHoverService, a as WorkflowDocument, b as WorkflowLinesManager, c as WorkflowSelectService, d as WorkflowDocumentOptions, L as LineEventProps, N as NodesDragEvent, e as WorkflowNodeJSON, f as WorkflowPortEntity, g as WorkflowLineEntity, O as OnDragLineEnd, h as WorkflowPorts, i as WorkflowPortType, j as WorkflowPort, k as LineRenderType, l as WorkflowLineRenderContribution, m as LinePosition } from './workflow-line-entity-VNz8dyPS.js';
export { C as LINE_HOVER_DISTANCE, v as LineColor, w as LineColors, u as LineType, z as NodesDragEndEvent, y as NodesDragStartEvent, A as NodesDraggingEvent, P as POINT_RADIUS, G as PORT_SIZE, o as WORKFLOW_LINE_ENTITY, J as WorkfloEntityHoverable, s as WorkflowContentChangeEvent, r as WorkflowContentChangeType, M as WorkflowDocumentOptionsDefault, K as WorkflowDocumentProvider, I as WorkflowEntityHoverable, q as WorkflowJSON, E as WorkflowLineEntityOpts, F as WorkflowLineInfo, D as WorkflowLinePortInfo, x as WorkflowLineRenderContributionFactory, t as WorkflowNodeMeta, H as WorkflowPortEntityOpts, p as domReactToBounds, n as getPortEntityId, B as onDragLineEndParams } from './workflow-line-entity-VNz8dyPS.js';
import { W as WorkflowNodeEntity } from './workflow-sub-canvas-DOVla1mw.js';
export { a as WorkflowSubCanvas } from './workflow-sub-canvas-DOVla1mw.js';
import * as _flowgram_ai_utils from '@flowgram.ai/utils';
import { DisposableCollection, IPoint, Disposable, Rectangle } from '@flowgram.ai/utils';
export { compose, composeAsync, delay } from '@flowgram.ai/utils';
export { URLParams } from './typings/index.js';
import React$1 from 'react';
import { WorkflowOperationBaseService, NodePostionUpdateEvent } from './typings/workflow-operation.js';
import { ContainerModule } from 'inversify';
export { WorkflowEdgeJSON } from './typings/workflow-edge.js';
export { WorkflowNodeFormMeta, WorkflowNodeRegistry, WorkflowNodeRenderProps } from './typings/workflow-registry.js';
import '@flowgram.ai/form-core';

declare enum WorkflowCommands {
    DELETE_NODES = "DELETE_NODES",
    COPY_NODES = "COPY_NODES",
    PASTE_NODES = "PASTE_NODES",
    ZOOM_IN = "ZOOM_IN",
    ZOOM_OUT = "ZOOM_OUT",
    UNDO = "UNDO",
    REDO = "REDO"
}

declare class WorkflowDragService {
    protected playgroundConfig: PlaygroundConfigEntity;
    protected hoverService: WorkflowHoverService;
    protected document: WorkflowDocument;
    protected linesManager: WorkflowLinesManager;
    protected commandService: CommandService;
    protected selectService: WorkflowSelectService;
    protected operationService: FlowOperationBaseService;
    readonly options: WorkflowDocumentOptions;
    private _onDragLineEventEmitter;
    readonly onDragLineEventChange: _flowgram_ai_utils.Event<LineEventProps>;
    isDragging: boolean;
    private _nodesDragEmitter;
    readonly onNodesDrag: _flowgram_ai_utils.Event<NodesDragEvent>;
    protected _toDispose: DisposableCollection;
    private _droppableTransforms;
    private _dropNode?;
    private posAdjusters;
    private _onDragLineEndCallbacks;
    init(): void;
    dispose(): void;
    /**
     * 拖拽选中节点
     * @param triggerEvent
     */
    startDragSelectedNodes(triggerEvent: MouseEvent | React$1.MouseEvent): Promise<boolean>;
    /**
     * 通过拖入卡片添加
     * @param type
     * @param event
     * @param data 节点数据
     */
    dropCard(type: string, event: {
        clientX: number;
        clientY: number;
    }, data?: Partial<WorkflowNodeJSON>, parent?: WorkflowNodeEntity): Promise<WorkflowNodeEntity | undefined>;
    /**
     * 拖拽卡片到画布
     * 返回创建结果
     * @param type
     * @param event
     */
    startDragCard(type: string, event: React$1.MouseEvent, data: Partial<WorkflowNodeJSON>, cloneNode?: (e: PlaygroundDragEvent) => HTMLDivElement): Promise<WorkflowNodeEntity | undefined>;
    /**
     * 如果存在容器节点，且传入鼠标坐标，需要用容器的坐标减去传入的鼠标坐标
     */
    adjustSubNodePosition(subNodeType?: string, containerNode?: WorkflowNodeEntity, mousePos?: IPoint, resetEmptyPos?: boolean): IPoint;
    /**
     * 注册位置调整
     */
    registerPosAdjuster(adjuster: (params: {
        selectedNodes: WorkflowNodeEntity[];
        position: IPoint;
    }) => IPoint): {
        dispose: () => boolean;
    };
    /**
     * 判断是否可以放置节点
     */
    canDropToNode(params: {
        dragNodeType?: FlowNodeType;
        dropNode?: WorkflowNodeEntity;
    }): {
        allowDrop: boolean;
        message?: string;
        dropNode?: WorkflowNodeEntity;
    };
    /**
     * 获取拖拽偏移
     */
    private getDragPosOffset;
    private updateDroppableTransforms;
    /** 是否容器节点 */
    private isContainer;
    /**
     * 获取节点整体位置
     */
    private getNodesPosition;
    private nodeSelectable;
    private updateDropNode;
    private clearDrop;
    private setLineColor;
    private handleDragOnNode;
    private childrenOfContainer;
    /**
     * 绘制线条
     * @param opts
     * @param event
     */
    startDrawingLine(fromPort: WorkflowPortEntity, event: {
        clientX: number;
        clientY: number;
    }, originLine?: WorkflowLineEntity): Promise<{
        dragSuccess?: boolean;
        newLine?: WorkflowLineEntity;
    }>;
    /**
     * 重新连接线条
     * @param line
     * @param e
     */
    resetLine(line: WorkflowLineEntity, e: MouseEvent): Promise<void>;
    /** 线条拖拽结束 */
    onDragLineEnd(callback: OnDragLineEnd): Disposable;
}

type PositionMap = Record<string, IPoint>;
/**
 * 重置布局服务
 */
declare class WorkflowResetLayoutService {
    private _config;
    private _document;
    private _entityManager;
    private _resetLayoutEmitter;
    /**
     * reset layout事件
     */
    readonly onResetLayout: _flowgram_ai_utils.Event<{
        nodeIds: string[];
        positionMap: PositionMap;
        oldPositionMap: PositionMap;
    }>;
    private _toDispose;
    /**
     * 初始化
     */
    init(): void;
    /**
     * 触发重置布局
     * @param nodeIds 节点id
     * @param positionMap 新布局数据
     * @param oldPositionMap 老布局数据
     */
    fireResetLayout(nodeIds: string[], positionMap: PositionMap, oldPositionMap: PositionMap): void;
    /**
     * 根据数据重新布局
     * @param positionMap
     * @returns
     */
    layoutToPositions(nodeIds: string[], positionMap: PositionMap): Promise<Record<string, IPoint>>;
    /**
     * 销毁
     */
    dispose(): void;
}

declare class WorkflowOperationBaseServiceImpl extends FlowOperationBaseServiceImpl implements WorkflowOperationBaseService {
    protected document: WorkflowDocument;
    private onNodePostionUpdateEmitter;
    readonly onNodePostionUpdate: _flowgram_ai_utils.Event<NodePostionUpdateEvent>;
    updateNodePosition(nodeOrId: FlowNodeEntityOrId, position: IPoint): void;
}

interface NodeRenderReturnType {
    /**
     * 当前节点
     */
    node: FlowNodeEntity;
    /**
     * 节点选中
     */
    selected: boolean;
    /**
     * 节点激活
     */
    activated: boolean;
    /**
     * 节点展开
     */
    expanded: boolean;
    /**
     * 触发拖拽
     * @param e
     */
    startDrag: (e: React.MouseEvent) => void;
    /**
     * 当前节点的点位信息
     */
    ports: WorkflowPortEntity[];
    /**
     * 删除节点
     */
    deleteNode: () => void;
    /**
     * 选中节点
     * @param e
     */
    selectNode: (e: React.MouseEvent) => void;
    /**
     * 全局 readonly 状态
     */
    readonly: boolean;
    /**
     * 拖拽线条的目标 node id
     */
    linkingNodeId: string;
    /**
     * 节点 ref
     */
    nodeRef: React.MutableRefObject<HTMLDivElement | null>;
    /**
     * 节点 focus 事件
     */
    onFocus: () => void;
    /**
     * 节点 blur 事件
     */
    onBlur: () => void;
    /**
     * 渲染表单，只有节点引擎开启才能使用
     */
    form: NodeFormProps<any> | undefined;
    /**
     * 获取节点的扩展数据
     */
    getExtInfo<T = any>(): T;
    /**
     * 更新节点的扩展数据
     * @param extInfo
     */
    updateExtInfo<T = any>(extInfo: T): void;
    /**
     * 展开/收起节点
     * @param expanded
     */
    toggleExpand(): void;
}

declare function useNodeRender(nodeFromProps?: WorkflowNodeEntity): NodeRenderReturnType;

/**
 * 获取当前渲染的 dom 节点
 */
declare function useCurrentDomNode(): HTMLDivElement;

/**
 * 获取当前节点
 */
declare function useCurrentEntity(): WorkflowNodeEntity;

declare function useWorkflowDocument(): WorkflowDocument;

/**
 * 获取 readonly 状态
 */
declare function usePlaygroundReadonlyState(listenChange?: boolean): boolean;

declare function nanoid(n?: number): string;

declare const fitView: (doc: WorkflowDocument, playgroundConfig: PlaygroundConfigEntity, easing?: boolean) => Promise<void>;

/**
 * 获取没有碰撞的位置
 * 距离很小时，xy 各偏移 30
 * @param position
 */
declare function getAntiOverlapPosition(doc: WorkflowDocument, position: IPoint, containerNode?: WorkflowNodeEntity): IPoint;

declare enum EditorCursorState {
    GRAB = "GRAB",
    SELECT = "SELECT"
}
declare enum InteractiveType {
    /** 鼠标优先交互模式 */
    MOUSE = "MOUSE",
    /** 触控板优先交互模式 */
    PAD = "PAD"
}

/**
 * 节点的点位信息
 * portsData 只监听点位的数目和类型，不监听点位的 position 变化
 */
declare class WorkflowNodePortsData extends EntityData {
    static readonly type = "WorkflowNodePortsData";
    readonly entity: WorkflowNodeEntity;
    /** 静态的 ports 数据 */
    protected _staticPorts: WorkflowPorts;
    /** 存储 port 实体的 id，用于判断 port 是否存在 */
    protected _portIDSet: Set<string>;
    /** 上一次的 ports 数据，用于判断 ports 是否发生变化 */
    protected _prePorts: WorkflowPorts;
    constructor(entity: WorkflowNodeEntity);
    getDefaultData(): any;
    /**
     * 更新静态的 ports 数据
     */
    updateStaticPorts(ports: WorkflowPorts): void;
    /**
     * 动态计算点位，通过 dom 的 data-port-key
     */
    updateDynamicPorts(): void;
    /**
     * 根据 key 获取 port 实体
     */
    getPortEntityByKey(portType: WorkflowPortType, portKey?: string | number): WorkflowPortEntity;
    /**
     * 更新 ports 数据
     */
    updatePorts(ports: WorkflowPorts): void;
    /**
     * 获取所有 port entities
     */
    get allPorts(): WorkflowPortEntity[];
    /**
     * 获取输入点位
     */
    get inputPorts(): WorkflowPortEntity[];
    /**
     * 获取输出点位
     */
    get outputPorts(): WorkflowPortEntity[];
    /**
     * 获取输入点位置
     */
    get inputPoints(): IPoint[];
    /**
     * 获取输出点位置
     */
    get outputPoints(): IPoint[];
    /**
     * 根据 key 获取 输入点位置
     */
    getInputPoint(key?: string | number): IPoint;
    /**
     * 根据 key 获取输出点位置
     */
    getOutputPoint(key?: string | number): IPoint;
    /**
     * 获取 port 实体
     */
    protected getPortEntity(portId: string): WorkflowPortEntity | undefined;
    /**
     * 拼接 port 实体的 id
     */
    protected getPortId(portType: WorkflowPortType, portKey?: string | number): string;
    /**
     * 创建 port 实体
     */
    protected createPortEntity(portInfo: WorkflowPort): WorkflowPortEntity;
    /**
     * 获取或创建 port 实体
     */
    protected getOrCreatePortEntity(portInfo: WorkflowPort): WorkflowPortEntity;
    /**
     * 更新 port 实体
     */
    protected updatePortEntity(portInfo: WorkflowPort): WorkflowPortEntity;
}

interface WorkflowNodeLines {
    inputLines: WorkflowLineEntity[];
    outputLines: WorkflowLineEntity[];
}
/**
 * 节点的关联的线条
 */
declare class WorkflowNodeLinesData extends EntityData<WorkflowNodeLines> {
    static type: string;
    entity: WorkflowNodeEntity;
    getDefaultData(): WorkflowNodeLines;
    constructor(entity: WorkflowNodeEntity);
    /**
     * 输入线条
     */
    get inputLines(): WorkflowLineEntity[];
    /**
     * 输出线条
     */
    get outputLines(): WorkflowLineEntity[];
    /**
     * 输入节点
     */
    get inputNodes(): WorkflowNodeEntity[];
    /**
     * 所有输入节点
     */
    get allInputNodes(): WorkflowNodeEntity[];
    /**
     * 输出节点
     */
    get outputNodes(): WorkflowNodeEntity[];
    /**
     * 输入输出节点
     */
    get allOutputNodes(): WorkflowNodeEntity[];
    addLine(line: WorkflowLineEntity): void;
    removeLine(line: WorkflowLineEntity): void;
}

interface WorkflowLineRenderDataSchema {
    version: string;
    contributions: Map<LineRenderType, WorkflowLineRenderContribution>;
    position: LinePosition;
}
declare class WorkflowLineRenderData extends EntityData<WorkflowLineRenderDataSchema> {
    static type: string;
    entity: WorkflowLineEntity;
    constructor(entity: WorkflowLineEntity);
    getDefaultData(): WorkflowLineRenderDataSchema;
    get renderVersion(): string;
    get position(): LinePosition;
    get path(): string;
    calcDistance(pos: IPoint): number;
    get bounds(): Rectangle;
    /**
     * 更新数据
     * WARNING: 这个方法，必须在 requestAnimationFrame / useLayoutEffect 中调用，否则会引起浏览器强制重排
     */
    update(): void;
    private get lineType();
    /**
     * 更新版本
     * WARNING: 这个方法，必须在 requestAnimationFrame / useLayoutEffect 中调用，否则会引起浏览器强制重排
     */
    private updatePosition;
    private get currentLine();
    private syncContributions;
    private registerContribution;
}

declare const WorkflowDocumentContainerModule: ContainerModule;

interface StraightData {
    points: IPoint[];
    path: string;
    bbox: Rectangle;
}
declare class WorkflowSimpleLineContribution implements WorkflowLineRenderContribution {
    static type: string;
    entity: WorkflowLineEntity;
    constructor(entity: WorkflowLineEntity);
    private data?;
    get path(): string;
    calcDistance(pos: IPoint): number;
    get bounds(): Rectangle;
    update(params: {
        fromPos: IPoint;
        toPos: IPoint;
    }): void;
    private projectPointOnLine;
}

export { EditorCursorState, InteractiveType, LineEventProps, LinePosition, LineRenderType, NodePostionUpdateEvent, type NodeRenderReturnType, NodesDragEvent, OnDragLineEnd, type PositionMap, type StraightData, WorkflowCommands, WorkflowDocument, WorkflowDocumentContainerModule, WorkflowDocumentOptions, WorkflowDragService, WorkflowHoverService, WorkflowLineEntity, WorkflowLineRenderContribution, WorkflowLineRenderData, type WorkflowLineRenderDataSchema, WorkflowLinesManager, WorkflowNodeEntity, WorkflowNodeJSON, type WorkflowNodeLines, WorkflowNodeLinesData, WorkflowNodePortsData, WorkflowOperationBaseService, WorkflowOperationBaseServiceImpl, WorkflowPort, WorkflowPortEntity, WorkflowPortType, WorkflowPorts, WorkflowResetLayoutService, WorkflowSelectService, WorkflowSimpleLineContribution, fitView, getAntiOverlapPosition, nanoid, useCurrentDomNode, useCurrentEntity, useNodeRender, usePlaygroundReadonlyState, useWorkflowDocument };
