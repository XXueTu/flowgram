import * as _flowgram_ai_utils from '@flowgram.ai/utils';
import { IPoint, Rectangle, PositionSchema, Emitter, Event, PaddingSchema, SizeSchema, ScrollSchema, DisposableCollection } from '@flowgram.ai/utils';
import { PlaygroundDragEvent, PlaygroundDrag, EntityManager, SelectionService, Playground, Entity, PlaygroundConfigEntity, PlaygroundContext, EntityOpts } from '@flowgram.ai/core';
import { FlowNodeMeta, FlowNodeJSON, FlowNodeEntity, FlowDocumentOptions, FlowLayout, FlowDocumentProvider, FlowDocument } from '@flowgram.ai/document';
import { W as WorkflowNodeEntity, a as WorkflowSubCanvas } from './workflow-sub-canvas-DOVla1mw.mjs';
import { NodeEngineContext } from '@flowgram.ai/form-core';
import { WorkflowEdgeJSON } from './typings/workflow-edge.mjs';
import React from 'react';

/**
 * 节点 meta 信息
 */
interface WorkflowNodeMeta extends FlowNodeMeta {
    position?: IPoint;
    canvasPosition?: IPoint;
    deleteDisable?: boolean;
    copyDisable?: boolean;
    inputDisable?: boolean;
    outputDisable?: boolean;
    defaultPorts?: WorkflowPorts;
    useDynamicPort?: boolean;
    subCanvas?: (node: WorkflowNodeEntity) => WorkflowSubCanvas | undefined;
    isContainer?: boolean;
}
/**
 * 节点数据
 */
interface WorkflowNodeJSON extends FlowNodeJSON {
    id: string;
    type: string | number;
    /**
     * ui 数据
     */
    meta?: WorkflowNodeMeta;
    /**
     * 表单数据
     */
    data?: any;
    /**
     * 子节点
     */
    blocks?: WorkflowNodeJSON[];
    /**
     * 子节点间连线
     */
    edges?: WorkflowEdgeJSON[];
}

interface WorkflowJSON {
    nodes: WorkflowNodeJSON[];
    edges: WorkflowEdgeJSON[];
}
declare enum WorkflowContentChangeType {
    /**
     * 添加节点
     */
    ADD_NODE = "ADD_NODE",
    /**
     * 删除节点
     */
    DELETE_NODE = "DELETE_NODE",
    /**
     * 移动节点
     */
    MOVE_NODE = "MOVE_NODE",
    /**
     * 节点数据更新 （表单引擎数据 或者 extInfo 数据）
     */
    NODE_DATA_CHANGE = "NODE_DATA_CHANGE",
    /**
     * 添加线条
     */
    ADD_LINE = "ADD_LINE",
    /**
     * 删除线条
     */
    DELETE_LINE = "DELETE_LINE",
    /**
     * 节点Meta信息变更
     */
    META_CHANGE = "META_CHANGE"
}
interface WorkflowContentChangeEvent {
    type: WorkflowContentChangeType;
    /**
     * 当前触发的元素的json数据，toJSON 需要主动触发
     */
    toJSON: () => any;
    entity: WorkflowNodeEntity | WorkflowLineEntity;
}

declare enum LineType {
    BEZIER = 0,
    LINE_CHART = 1
}
type LineRenderType = LineType | string;
interface LinePosition {
    from: IPoint;
    to: IPoint;
}
interface LineColor {
    hidden: string;
    default: string;
    drawing: string;
    hovered: string;
    selected: string;
    error: string;
}
declare enum LineColors {
    HIDDEN = "transparent",
    DEFUALT = "#4d53e8",
    DRAWING = "#5DD6E3",
    HOVER = "#37d0ff",
    ERROR = "red"
}
interface WorkflowLineRenderContribution {
    entity: WorkflowLineEntity;
    path: string;
    bounds: Rectangle;
    update: (params: {
        fromPos: IPoint;
        toPos: IPoint;
    }) => void;
    calcDistance: (pos: IPoint) => number;
}
type WorkflowLineRenderContributionFactory = (new (entity: WorkflowLineEntity) => WorkflowLineRenderContribution) & {
    type: LineRenderType;
};

interface LineEventProps {
    type: 'onDrag' | 'onDragEnd';
    onDragNodeId?: string;
    event?: MouseEvent;
}
interface INodesDragEvent {
    type: string;
    nodes: FlowNodeEntity[];
    startPositions: PositionSchema[];
    dragEvent: PlaygroundDragEvent;
    triggerEvent: MouseEvent | React.MouseEvent;
    dragger: PlaygroundDrag;
}
interface NodesDragStartEvent extends INodesDragEvent {
    type: 'onDragStart';
}
interface NodesDragEndEvent extends INodesDragEvent {
    type: 'onDragEnd';
}
interface NodesDraggingEvent extends INodesDragEvent {
    type: 'onDragging';
    positions: PositionSchema[];
}
type NodesDragEvent = NodesDragStartEvent | NodesDraggingEvent | NodesDragEndEvent;
type onDragLineEndParams = {
    fromPort: WorkflowPortEntity;
    toPort?: WorkflowPortEntity;
    mousePos: PositionSchema;
    line?: WorkflowLineEntity;
    originLine?: WorkflowLineEntity;
    event: PlaygroundDragEvent;
};
type OnDragLineEnd = (params: onDragLineEndParams) => Promise<void>;

declare const WorkflowDocumentOptions: unique symbol;
/**
 * 线条配置
 */
interface WorkflowDocumentOptions extends FlowDocumentOptions {
    cursors?: {
        grab?: string;
        grabbing?: string;
    };
    /** 线条颜色 */
    lineColor?: Partial<LineColor>;
    /** 是否显示错误线条 */
    isErrorLine?: (fromPort: WorkflowPortEntity, toPort: WorkflowPortEntity | undefined, lines: WorkflowLinesManager) => boolean;
    /** 是否错误端口 */
    isErrorPort?: (port: WorkflowPortEntity) => boolean;
    /** 是否禁用端口 */
    isDisabledPort?: (port: WorkflowPortEntity) => boolean;
    /** 是否反转线条箭头 */
    isReverseLine?: (line: WorkflowLineEntity) => boolean;
    /** 是否隐藏线条箭头 */
    isHideArrowLine?: (line: WorkflowLineEntity) => boolean;
    /** 是否流动线条 */
    isFlowingLine?: (line: WorkflowLineEntity) => boolean;
    /** 是否禁用线条 */
    isDisabledLine?: (line: WorkflowLineEntity) => boolean;
    /** 是否竖向线条 */
    isVerticalLine?: (line: WorkflowLineEntity) => boolean;
    /** 拖拽线条结束 */
    onDragLineEnd?: (params: onDragLineEndParams) => Promise<void>;
    /** 获取线条渲染器 */
    setLineRenderType?: (line: WorkflowLineEntity) => LineRenderType | undefined;
    /** 设置线条样式 */
    setLineClassName?: (line: WorkflowLineEntity) => string | undefined;
    /** 能否添加线条 */
    canAddLine?: (fromPort: WorkflowPortEntity, toPort: WorkflowPortEntity, lines: WorkflowLinesManager, silent?: boolean) => boolean;
    /** 能否删除节点 */
    canDeleteNode?: (node: WorkflowNodeEntity, silent?: boolean) => boolean;
    /** 能否删除线条 */
    canDeleteLine?: (line: WorkflowLineEntity, newLineInfo?: Required<WorkflowLinePortInfo>, silent?: boolean) => boolean;
    /**
     * @param fromPort - 开始点
     * @param oldToPort - 旧的连接点
     * @param newToPort - 新的连接点
     * @param lines - 线条管理器
     */
    canResetLine?: (fromPort: WorkflowPortEntity, oldToPort: WorkflowPortEntity, newToPort: WorkflowPortEntity, lines: WorkflowLinesManager) => boolean;
}
declare const WorkflowDocumentOptionsDefault: WorkflowDocumentOptions;

/**
 * 可 Hover 的节点 类型
 */
type WorkflowEntityHoverable = WorkflowNodeEntity | WorkflowLineEntity | WorkflowPortEntity;
/** @deprecated */
type WorkfloEntityHoverable = WorkflowEntityHoverable;
/**
 * hover 状态管理
 */
declare class WorkflowHoverService {
    protected entityManager: EntityManager;
    protected onHoveredChangeEmitter: Emitter<string>;
    readonly onHoveredChange: _flowgram_ai_utils.Event<string>;
    hoveredPos: IPoint;
    /**
     * 当前 hovered 的 节点或者线条或者点
     * 1: nodeId / lineId  （节点 / 线条）
     * 2: nodeId:portKey  （节点连接点）
     */
    hoveredKey: string;
    /**
     * 更新 hover 的内容
     * @param hoveredKey hovered key
     */
    updateHoveredKey(hoveredKey: string): void;
    /**
     * 清空 hover 内容
     */
    clearHovered(): void;
    /**
     *  判断是否 hover
     * @param nodeId hoveredKey
     * @returns 是否 hover
     */
    isHovered(nodeId: string): boolean;
    isSomeHovered(): boolean;
    /**
     * 获取被 hover 的节点或线条
     */
    get hoveredNode(): WorkfloEntityHoverable | undefined;
}

declare class WorkflowSelectService {
    protected selectionService: SelectionService;
    protected playground: Playground;
    get onSelectionChanged(): Event<void>;
    get selection(): Entity[];
    set selection(entities: Entity[]);
    /**
     * 当前激活的节点只能有一个
     */
    get activatedNode(): WorkflowNodeEntity | undefined;
    isSelected(id: string): boolean;
    isActivated(id: string): boolean;
    /**
     * 选中的节点
     */
    get selectedNodes(): WorkflowNodeEntity[];
    /**
     * 选中
     * @param node
     */
    selectNode(node: WorkflowNodeEntity): void;
    toggleSelect(node: WorkflowNodeEntity): void;
    select(node: WorkfloEntityHoverable): void;
    clear(): void;
    /**
     *  选中并滚动到节点
     * @param node
     */
    selectNodeAndScrollToView(node: WorkflowNodeEntity, fitView?: boolean): Promise<void>;
    selectNodeAndFocus(node: WorkflowNodeEntity): void;
}

/**
 * 自由画布布局
 */
declare class FreeLayout implements FlowLayout {
    name: string;
    playgroundConfig: PlaygroundConfigEntity;
    protected documentProvider: FlowDocumentProvider;
    get document(): FlowDocument;
    /**
     * 更新布局
     */
    update(): void;
    syncTransform(node: FlowNodeEntity): void;
    /**
     * 更新所有受影响的上下游节点
     */
    updateAffectedTransform(node: FlowNodeEntity): void;
    /**
     * 获取节点的 padding 数据
     * @param node
     */
    getPadding(node: FlowNodeEntity): PaddingSchema;
    /**
     * 默认滚动到 fitview 区域
     * @param contentSize
     */
    getInitScroll(contentSize: SizeSchema): ScrollSchema;
    /**
     * 获取默认输入点
     */
    getDefaultInputPoint(node: FlowNodeEntity): IPoint;
    /**
     * 获取默认输出点
     */
    getDefaultOutputPoint(node: FlowNodeEntity): IPoint;
    /**
     * 水平中心点
     */
    getDefaultNodeOrigin(): IPoint;
    private getAllParents;
    private getAllBlocks;
    private fireChange;
}

declare const WorkflowDocumentProvider: unique symbol;
type WorkflowDocumentProvider = () => WorkflowDocument;
declare class WorkflowDocument extends FlowDocument {
    private _onContentChangeEmitter;
    protected readonly onLoadedEmitter: Emitter<void>;
    readonly onContentChange: _flowgram_ai_utils.Event<WorkflowContentChangeEvent>;
    private _onReloadEmitter;
    readonly onReload: _flowgram_ai_utils.Event<WorkflowDocument>;
    /**
     * 数据加载完成
     */
    readonly onLoaded: _flowgram_ai_utils.Event<void>;
    protected _loading: boolean;
    linesManager: WorkflowLinesManager;
    playgroundConfig: PlaygroundConfigEntity;
    playgroundContext: PlaygroundContext;
    options: WorkflowDocumentOptions;
    nodeEngineContext: NodeEngineContext;
    selectServices: WorkflowSelectService;
    get loading(): boolean;
    fitView(easing?: boolean): Promise<void>;
    init(): void;
    load(): Promise<void>;
    reload(json: WorkflowJSON, delayTime?: number): Promise<void>;
    /**
     * 从数据加载
     * @param json
     */
    fromJSON(json: Partial<WorkflowJSON>, fireRender?: boolean): void;
    /**
     * 清空画布
     */
    clear(): void;
    /**
     * 创建流程节点
     * @param json
     */
    createWorkflowNode(json: WorkflowNodeJSON, isClone?: boolean, parentId?: string): WorkflowNodeEntity;
    get layout(): FreeLayout;
    /**
     * 获取默认的 x y 坐标, 默认为当前画布可视区域中心
     * @param type
     * @protected
     */
    getNodeDefaultPosition(type: string | number): IPoint;
    /**
     * 通过类型创建节点, 如果没有提供position 则直接放在画布中间
     * @param type
     */
    createWorkflowNodeByType(type: string | number, position?: IPoint, json?: Partial<WorkflowNodeJSON>, parentID?: string): WorkflowNodeEntity;
    getAllNodes(): WorkflowNodeEntity[];
    getAllPorts(): WorkflowPortEntity[];
    /**
     * 获取画布中的非游离节点
     * 1. 开始节点
     * 2. 从开始节点出发能走到的节点
     * 3. 结束节点
     * 4. 默认所有子画布内节点为游离节点
     */
    getAssociatedNodes(): WorkflowNodeEntity[];
    /**
     * 触发渲染
     */
    fireRender(): void;
    fireContentChange(event: WorkflowContentChangeEvent): void;
    toNodeJSON(node: WorkflowNodeEntity): WorkflowNodeJSON;
    /**
     * 节点转换为JSON， 没有format的过程
     * @param node
     * @returns
     */
    private toNodeJSONFromOptions;
    copyNode(node: WorkflowNodeEntity, newNodeId?: string | undefined, format?: (json: WorkflowNodeJSON) => WorkflowNodeJSON, position?: IPoint): WorkflowNodeEntity;
    copyNodeFromJSON(flowNodeType: string, nodeJSON: WorkflowNodeJSON, newNodeId?: string | undefined, position?: IPoint, parentId?: string): WorkflowNodeEntity;
    canRemove(node: WorkflowNodeEntity, silent?: boolean): boolean;
    /**
     * 判断端口是否为错误态
     */
    isErrorPort(port: WorkflowPortEntity): boolean;
    /**
     * 导出数据
     */
    toJSON(): WorkflowJSON;
    dispose(): void;
    /**
     * 逐层创建节点和线条
     */
    renderJSON(json: WorkflowJSON, options?: {
        parent?: WorkflowNodeEntity;
        isClone?: boolean;
    }): {
        nodes: WorkflowNodeEntity[];
        edges: WorkflowLineEntity[];
    };
    private getNodeSubCanvas;
    private getNodeChildren;
    private toLineJSON;
    private createWorkflowLine;
}

/**
 * 线条管理
 */
declare class WorkflowLinesManager {
    protected document: WorkflowDocument;
    protected toDispose: DisposableCollection;
    protected _lineType: LineRenderType;
    protected onAvailableLinesChangeEmitter: Emitter<WorkflowContentChangeEvent>;
    protected onForceUpdateEmitter: Emitter<void>;
    hoverService: WorkflowHoverService;
    selectService: WorkflowSelectService;
    protected readonly entityManager: EntityManager;
    readonly options: WorkflowDocumentOptions;
    /**
     * 有效的线条被添加或者删除时候触发，未连上的线条不算
     */
    readonly onAvailableLinesChange: _flowgram_ai_utils.Event<WorkflowContentChangeEvent>;
    /**
     * 强制渲染 lines
     */
    readonly onForceUpdate: _flowgram_ai_utils.Event<void>;
    readonly contributionFactories: WorkflowLineRenderContributionFactory[];
    init(doc: WorkflowDocument): void;
    forceUpdate(): void;
    get lineType(): LineRenderType;
    get lineColor(): LineColor;
    switchLineType(newType?: LineRenderType): LineRenderType;
    getAllLines(): WorkflowLineEntity[];
    hasLine(portInfo: WorkflowLinePortInfo): boolean;
    getLine(portInfo: WorkflowLinePortInfo): WorkflowLineEntity | undefined;
    replaceLine(oldPortInfo: WorkflowLinePortInfo, newPortInfo: WorkflowLinePortInfo): WorkflowLineEntity;
    createLine(options: {
        drawingTo?: IPoint;
        key?: string;
    } & WorkflowLinePortInfo): WorkflowLineEntity | undefined;
    /**
     * 获取线条中距离鼠标位置最近的线条和距离
     * @param mousePos 鼠标位置
     * @param minDistance 最小检测距离
     * @returns 距离鼠标位置最近的线条 以及距离
     */
    getCloseInLineFromMousePos(mousePos: IPoint, minDistance?: number): WorkflowLineEntity | undefined;
    /**
     * 是否在调整线条
     */
    isDrawing: boolean;
    dispose(): void;
    get disposed(): boolean;
    isErrorLine(fromPort: WorkflowPortEntity, toPort?: WorkflowPortEntity): boolean;
    isReverseLine(line: WorkflowLineEntity): boolean;
    isHideArrowLine(line: WorkflowLineEntity): boolean;
    isFlowingLine(line: WorkflowLineEntity): boolean;
    isDisabledLine(line: WorkflowLineEntity): boolean;
    isVerticalLine(line: WorkflowLineEntity): boolean;
    setLineRenderType(line: WorkflowLineEntity): LineRenderType | undefined;
    setLineClassName(line: WorkflowLineEntity): string | undefined;
    getLineColor(line: WorkflowLineEntity): string | undefined;
    canAddLine(fromPort: WorkflowPortEntity, toPort: WorkflowPortEntity, silent?: boolean): boolean;
    toJSON(): WorkflowEdgeJSON[];
    getPortById(portId: string): WorkflowPortEntity | undefined;
    canRemove(line: WorkflowLineEntity, newLineInfo?: Required<WorkflowLinePortInfo>, silent?: boolean): boolean;
    canReset(fromPort: WorkflowPortEntity, oldToPort: WorkflowPortEntity, newToPort: WorkflowPortEntity): boolean;
    /**
     * 根据鼠标位置找到 port
     * @param pos
     */
    getPortFromMousePos(pos: IPoint): WorkflowPortEntity | undefined;
    /**
     * 根据鼠标位置找到 node
     * @param pos - 鼠标位置
     */
    getNodeFromMousePos(pos: IPoint): WorkflowNodeEntity | undefined;
    registerContribution(factory: WorkflowLineRenderContributionFactory): this;
    private registerData;
    private getNodeIndex;
}

type WorkflowPortType = 'input' | 'output';
declare const getPortEntityId: (node: WorkflowNodeEntity, portType: WorkflowPortType, portID?: string | number) => string;
declare const WORKFLOW_LINE_ENTITY = "WorkflowLineEntity";
declare function domReactToBounds(react: DOMRect): Rectangle;

declare const PORT_SIZE = 24;
interface WorkflowPort {
    /**
     * 没有代表 默认连接点，默认 input 类型 为最左边中心，output 类型为最右边中心
     */
    portID?: string | number;
    /**
     * 禁用端口
     */
    disabled?: boolean;
    /**
     * 将点位渲染到该父节点上
     */
    targetElement?: HTMLElement;
    /**
     * 输入或者输出点
     */
    type: WorkflowPortType;
}
type WorkflowPorts = WorkflowPort[];
interface WorkflowPortEntityOpts extends EntityOpts, WorkflowPort {
    /**
     * port 属于哪个节点
     */
    node: WorkflowNodeEntity;
}
/**
 * Port 抽象的 Entity
 */
declare class WorkflowPortEntity extends Entity<WorkflowPortEntityOpts> {
    static type: string;
    readonly node: WorkflowNodeEntity;
    targetElement?: HTMLElement;
    readonly portID: string | number;
    readonly _disabled: boolean;
    private _hasError;
    protected readonly _onErrorChangedEmitter: Emitter<void>;
    onErrorChanged: _flowgram_ai_utils.Event<void>;
    /**
     * port 类型
     */
    portType: WorkflowPortType;
    static getPortEntityId(node: WorkflowNodeEntity, portType: WorkflowPortType, portID?: string | number): string;
    constructor(opts: WorkflowPortEntityOpts);
    get hasError(): boolean;
    set hasError(hasError: boolean);
    validate(): void;
    isErrorPort(): boolean;
    get point(): IPoint;
    /**
     * 点的区域
     */
    get bounds(): Rectangle;
    isHovered(x: number, y: number): boolean;
    /**
     * 相对节点左上角的位置
     */
    get relativePosition(): IPoint;
    updateTargetElement(el?: HTMLElement): void;
    /**
     * 是否被禁用
     */
    get disabled(): boolean;
    /**
     * 当前点位上连接的线条
     * @deprecated use `availableLines` instead
     */
    get lines(): WorkflowLineEntity[];
    /**
     * 当前有效的线条，不包含正在画的线条和隐藏的线条（这个出现在线条重连会先把原来的线条隐藏）
     */
    get availableLines(): WorkflowLineEntity[];
    /**
     * 当前点位上连接的线条（包含 isDrawing === true 的线条）
     */
    get allLines(): WorkflowLineEntity[];
    dispose(): void;
}

declare const LINE_HOVER_DISTANCE = 8;
declare const POINT_RADIUS = 10;
interface WorkflowLinePortInfo {
    from: string;
    to?: string;
    fromPort?: string | number;
    toPort?: string | number;
}
interface WorkflowLineEntityOpts extends EntityOpts, WorkflowLinePortInfo {
    document: WorkflowDocument;
    linesManager: WorkflowLinesManager;
    drawingTo?: IPoint;
}
interface WorkflowLineInfo extends WorkflowLinePortInfo {
    drawingTo?: IPoint;
    isDefaultLine?: boolean;
    highlightColor?: string;
}
/**
 * 线条
 */
declare class WorkflowLineEntity extends Entity<WorkflowLineEntityOpts> {
    static type: string;
    /**
     * 转成线条 id
     * @param info
     */
    static portInfoToLineId(info: WorkflowLinePortInfo): string;
    readonly document: WorkflowDocument;
    readonly linesManager: WorkflowLinesManager;
    private _from;
    private _to?;
    private _processing;
    private _hasError;
    /**
     * 线条数据
     */
    info: WorkflowLineInfo;
    readonly isDrawing: boolean;
    /**
     * 线条 Portal 挂载的 div
     */
    private _node?;
    constructor(opts: WorkflowLineEntityOpts);
    /**
     * 获取线条的前置节点
     */
    get from(): WorkflowNodeEntity;
    /**
     * 获取线条的后置节点
     */
    get to(): WorkflowNodeEntity | undefined;
    get isHidden(): boolean;
    get inContainer(): boolean;
    /**
     * 获取是否 testrun processing
     */
    get processing(): boolean;
    /**
     * 设置 testrun processing 状态
     */
    set processing(status: boolean);
    get hasError(): boolean;
    set hasError(hasError: boolean);
    /**
     * 设置线条的后置节点
     */
    setToPort(toPort?: WorkflowPortEntity): void;
    /**
     * 设置线条画线时的目标位置
     */
    set drawingTo(pos: IPoint | undefined);
    /**
     * 获取线条正在画线的位置
     */
    get drawingTo(): IPoint | undefined;
    get highlightColor(): string;
    set highlightColor(color: string);
    /**
     * 获取线条的边框位置大小
     */
    get bounds(): Rectangle;
    /**
     * 获取点和线最接近的距离
     */
    getHoverDist(pos: IPoint): number;
    get fromPort(): WorkflowPortEntity;
    get toPort(): WorkflowPortEntity | undefined;
    /**
     * 获取线条真实的输入输出节点坐标
     */
    get position(): LinePosition;
    /** 是否反转箭头 */
    get reverse(): boolean;
    /** 是否隐藏箭头 */
    get hideArrow(): boolean;
    /** 是否流动 */
    get flowing(): boolean;
    /** 是否禁用 */
    get disabled(): boolean;
    /** 是否竖向 */
    get vertical(): boolean;
    /** 获取线条渲染器类型 */
    get renderType(): LineRenderType | undefined;
    /** 获取线条样式 */
    get className(): string | undefined;
    get color(): string | undefined;
    /**
     * 初始化线条
     * @param info 线条信息
     */
    protected initInfo(info: WorkflowLineInfo): void;
    validate(): void;
    validateSelf(): void;
    is(line: WorkflowLineEntity | WorkflowLinePortInfo): boolean;
    canRemove(newLineInfo?: Required<WorkflowLinePortInfo>): boolean;
    get node(): HTMLDivElement;
    toJSON(): WorkflowEdgeJSON;
    /** 触发线条渲染 */
    fireRender(): void;
}

export { type NodesDraggingEvent as A, type onDragLineEndParams as B, LINE_HOVER_DISTANCE as C, type WorkflowLinePortInfo as D, type WorkflowLineEntityOpts as E, type WorkflowLineInfo as F, PORT_SIZE as G, type WorkflowPortEntityOpts as H, type WorkflowEntityHoverable as I, type WorkfloEntityHoverable as J, WorkflowDocumentProvider as K, type LineEventProps as L, WorkflowDocumentOptionsDefault as M, type NodesDragEvent as N, type OnDragLineEnd as O, POINT_RADIUS as P, WorkflowHoverService as W, WorkflowDocument as a, WorkflowLinesManager as b, WorkflowSelectService as c, WorkflowDocumentOptions as d, type WorkflowNodeJSON as e, WorkflowPortEntity as f, WorkflowLineEntity as g, type WorkflowPorts as h, type WorkflowPortType as i, type WorkflowPort as j, type LineRenderType as k, type WorkflowLineRenderContribution as l, type LinePosition as m, getPortEntityId as n, WORKFLOW_LINE_ENTITY as o, domReactToBounds as p, type WorkflowJSON as q, WorkflowContentChangeType as r, type WorkflowContentChangeEvent as s, type WorkflowNodeMeta as t, LineType as u, type LineColor as v, LineColors as w, type WorkflowLineRenderContributionFactory as x, type NodesDragStartEvent as y, type NodesDragEndEvent as z };
