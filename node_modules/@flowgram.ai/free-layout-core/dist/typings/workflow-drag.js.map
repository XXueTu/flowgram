{"version":3,"sources":["../../src/typings/workflow-drag.ts"],"sourcesContent":["import type React from 'react';\n\nimport { type PositionSchema } from '@flowgram.ai/utils';\nimport { type FlowNodeEntity } from '@flowgram.ai/document';\nimport { PlaygroundDrag, type PlaygroundDragEvent } from '@flowgram.ai/core';\n\nimport { type WorkflowLineEntity, type WorkflowPortEntity } from '../entities';\n\nexport interface LineEventProps {\n  type: 'onDrag' | 'onDragEnd';\n  onDragNodeId?: string;\n  event?: MouseEvent;\n}\n\ninterface INodesDragEvent {\n  type: string;\n  nodes: FlowNodeEntity[];\n  startPositions: PositionSchema[];\n  dragEvent: PlaygroundDragEvent;\n  triggerEvent: MouseEvent | React.MouseEvent;\n  dragger: PlaygroundDrag;\n}\n\nexport interface NodesDragStartEvent extends INodesDragEvent {\n  type: 'onDragStart';\n}\n\nexport interface NodesDragEndEvent extends INodesDragEvent {\n  type: 'onDragEnd';\n}\n\nexport interface NodesDraggingEvent extends INodesDragEvent {\n  type: 'onDragging';\n  positions: PositionSchema[];\n}\n\nexport type NodesDragEvent = NodesDragStartEvent | NodesDraggingEvent | NodesDragEndEvent;\n\nexport type onDragLineEndParams = {\n  fromPort: WorkflowPortEntity;\n  toPort?: WorkflowPortEntity;\n  mousePos: PositionSchema;\n  line?: WorkflowLineEntity;\n  originLine?: WorkflowLineEntity;\n  event: PlaygroundDragEvent;\n};\n\nexport type OnDragLineEnd = (params: onDragLineEndParams) => Promise<void>;\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AAAA;","names":[]}