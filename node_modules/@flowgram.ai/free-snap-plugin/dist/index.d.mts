import * as _flowgram_ai_core from '@flowgram.ai/core';
import * as _flowgram_ai_utils from '@flowgram.ai/utils';
import { Rectangle } from '@flowgram.ai/utils';

interface SnapLine {
    x?: number;
    y?: number;
    sourceNodeId: string;
}
interface SnapHorizontalLine extends SnapLine {
    y: number;
}
interface SnapVerticalLine extends SnapLine {
    x: number;
}
interface SnapMidHorizontalLine extends SnapLine {
    y: number;
}
interface SnapMidVerticalLine extends SnapLine {
    x: number;
}
interface SnapEdgeLines {
    top?: SnapHorizontalLine;
    bottom?: SnapHorizontalLine;
    left?: SnapVerticalLine;
    right?: SnapVerticalLine;
    midHorizontal?: SnapMidHorizontalLine;
    midVertical?: SnapMidVerticalLine;
}
interface AlignRect {
    rect: Rectangle;
    sourceNodeId: string;
}
interface AlignRects {
    top: AlignRect[];
    bottom: AlignRect[];
    left: AlignRect[];
    right: AlignRect[];
}
interface AlignSpacing {
    top?: number;
    bottom?: number;
    left?: number;
    right?: number;
    midHorizontal?: number;
    midVertical?: number;
}
interface SnapEvent {
    snapEdgeLines: SnapEdgeLines;
    snapRect: Rectangle;
    alignRects: AlignRects;
    alignSpacing: AlignSpacing;
}
interface WorkflowSnapServiceOptions {
    edgeThreshold: number;
    gridSize: number;
    enableGridSnapping: boolean;
    enableEdgeSnapping: boolean;
    enableMultiSnapping: boolean;
    enableOnlyViewportSnapping: boolean;
}
interface WorkflowSnapLayerOptions {
    edgeColor: string;
    alignColor: string;
    edgeLineWidth: number;
    alignLineWidth: number;
    alignCrossWidth: number;
}

declare const createFreeSnapPlugin: _flowgram_ai_core.PluginCreator<Partial<WorkflowSnapServiceOptions & WorkflowSnapLayerOptions>>;

declare class WorkflowSnapService {
    private readonly document;
    private readonly entityManager;
    private readonly dragService;
    private readonly playgroundConfig;
    private disposers;
    private options;
    private snapEmitter;
    readonly onSnap: _flowgram_ai_utils.Event<SnapEvent>;
    private _disabled;
    init(params?: Partial<WorkflowSnapServiceOptions>): void;
    dispose(): void;
    get disabled(): boolean;
    disable(): void;
    enable(): void;
    private mountListener;
    private snapping;
    private calcSnapOffset;
    private gridSnapping;
    private clear;
    private getSnapLines;
    private getAvailableNodes;
    private viewRect;
    private getSnapNodeRects;
    private get nodes();
    private getBounds;
    private updateNodePositionWithOffset;
    private calcAlignOffset;
    private calcAlignSpacing;
    private getAlignRects;
    private getMidAlignSpacing;
    private getDirectionAlignSpacing;
    private intersection;
}

export { WorkflowSnapService, createFreeSnapPlugin };
