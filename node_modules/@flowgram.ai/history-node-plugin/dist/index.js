"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result) __defProp(target, key, result);
  return result;
};

// src/index.ts
var src_exports = {};
__export(src_exports, {
  createHistoryNodePlugin: () => createHistoryNodePlugin
});
module.exports = __toCommonJS(src_exports);

// src/create-history-node-plugin.ts
var import_document2 = require("@flowgram.ai/document");
var import_core = require("@flowgram.ai/core");
var import_history = require("@flowgram.ai/history");

// src/utils/index.ts
var import_lodash = require("lodash");
var import_node = require("@flowgram.ai/node");
var import_form_core = require("@flowgram.ai/form-core");
function getFormModelV2(node) {
  if (!node) {
    return void 0;
  }
  const formModel = node?.getData(import_form_core.FlowNodeFormData)?.getFormModel();
  if (!formModel || !(0, import_node.isFormModelV2)(formModel)) {
    return void 0;
  }
  return formModel;
}
function shouldChangeFormValuesMerge(op, prev, element) {
  if (!prev) {
    return false;
  }
  if (Date.now() - element.getTimestamp() < 500) {
    if (op.type === prev.type && // 相同类型
    op.value?.id === prev.value?.id && // 相同节点
    op.value?.path === prev.value?.path) {
      return {
        type: op.type,
        value: {
          ...op.value,
          value: op.value?.value,
          oldValue: prev.value?.oldValue
        }
      };
    }
    return true;
  }
  return false;
}
function attachFormValuesChange(formModel, node, historyService) {
  formModel.onFormValuesChange((event) => {
    historyService.pushOperation(
      {
        type: "changeFormValues" /* changeFormValues */,
        value: {
          id: node.id,
          path: event.name,
          value: (0, import_lodash.get)(event.values, event.name),
          oldValue: (0, import_lodash.get)(event.prevValues, event.name)
        }
      },
      { noApply: true }
    );
  });
}

// src/history-node-registers.ts
var import_inversify = require("inversify");

// src/operation-metas/change-form-values.ts
var import_document = require("@flowgram.ai/document");
var changeFormValueOperationMeta = {
  type: "changeFormValues" /* changeFormValues */,
  inverse: (op) => ({
    ...op,
    value: {
      ...op.value,
      value: op.value.oldValue,
      oldValue: op.value.value
    }
  }),
  apply: ({ value: { value, path, id } }, ctx) => {
    const document = ctx.get(import_document.FlowDocument);
    const formModel = getFormModelV2(document.getNode(id));
    if (!formModel) {
      return;
    }
    formModel.setValueIn(path, value);
  },
  shouldMerge: shouldChangeFormValuesMerge
};

// src/operation-metas/index.ts
var operationMetas = [changeFormValueOperationMeta];

// src/history-node-registers.ts
var HistoryNodeRegisters = class {
  registerOperationMeta(operationRegistry) {
    operationMetas.forEach((operationMeta) => {
      operationRegistry.registerOperationMeta(operationMeta);
    });
  }
};
HistoryNodeRegisters = __decorateClass([
  (0, import_inversify.injectable)()
], HistoryNodeRegisters);

// src/create-history-node-plugin.ts
var createHistoryNodePlugin = (0, import_core.definePluginCreator)({
  onBind: ({ bind }) => {
    (0, import_core.bindContributions)(bind, HistoryNodeRegisters, [import_history.OperationContribution]);
  },
  onInit: (ctx, _opts) => {
    const document = ctx.get(import_document2.FlowDocument);
    const historyService = ctx.get(import_history.HistoryService);
    document.onNodeCreate(({ node }) => {
      const formModel = getFormModelV2(node);
      if (!formModel) {
        return;
      }
      attachFormValuesChange(formModel, node, historyService);
    });
  },
  containerModules: [import_history.HistoryContainerModule]
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createHistoryNodePlugin
});
//# sourceMappingURL=index.js.map