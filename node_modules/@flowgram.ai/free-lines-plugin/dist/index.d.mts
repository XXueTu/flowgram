import React, { ReactNode, FC } from 'react';
import { WorkflowPortEntity, WorkflowLineEntity, LineRenderType, WorkflowLineRenderContributionFactory, WorkflowHoverService, WorkflowSelectService, WorkflowDocument, WorkflowLineRenderContribution, LineType } from '@flowgram.ai/free-layout-core';
import * as _flowgram_ai_core from '@flowgram.ai/core';
import { Layer, TransformData } from '@flowgram.ai/core';
import { StackingContextManager } from '@flowgram.ai/free-stack-plugin';
import { IPoint, Rectangle } from '@flowgram.ai/utils';
import { Bezier } from 'bezier-js';

interface WorkflowPortRenderProps {
    entity: WorkflowPortEntity;
    className?: string;
    style?: React.CSSProperties;
    onClick?: React.MouseEventHandler<HTMLDivElement>;
}
declare const WorkflowPortRender: React.FC<WorkflowPortRenderProps>;

declare const LINE_OFFSET = 6;
declare const LINE_PADDING = 12;

interface LineRenderProps {
    key: string;
    color?: string;
    selected?: boolean;
    hovered?: boolean;
    line: WorkflowLineEntity;
    lineType: LineRenderType;
    version: string;
    strokePrefix?: string;
    children?: ReactNode;
}
interface LinesLayerOptions {
    renderInsideLine?: FC<LineRenderProps>;
}
interface FreeLinesPluginOptions extends LinesLayerOptions {
    contributions?: WorkflowLineRenderContributionFactory[];
    defaultLineType?: LineRenderType;
}

declare const createFreeLinesPlugin: _flowgram_ai_core.PluginCreator<FreeLinesPluginOptions>;

declare class WorkflowLinesLayer extends Layer<LinesLayerOptions> {
    static type: string;
    hoverService: WorkflowHoverService;
    selectService: WorkflowSelectService;
    stackContext: StackingContextManager;
    readonly lines: WorkflowLineEntity[];
    readonly ports: WorkflowPortEntity[];
    readonly trans: TransformData[];
    protected workflowDocument: WorkflowDocument;
    private layerID;
    private mountedLines;
    private _version;
    /**
     * 节点线条
     */
    node: HTMLDivElement;
    onZoom(scale: number): void;
    onReady(): void;
    dispose(): void;
    render(): JSX.Element;
    private bumpVersion;
    private lineProps;
    private lineVersion;
    private lineComponent;
    private renderLine;
    private get renderElement();
}

declare enum BezierControlType {
    RIGHT_TOP = 0,
    RIGHT_BOTTOM = 1,
    LEFT_TOP = 2,
    LEFT_BOTTOM = 3
}
/**
 * 获取贝塞尔曲线横向的控制节点
 * @param fromPos
 * @param toPos
 */
declare function getBezierHorizontalControlPoints(fromPos: IPoint, toPos: IPoint): IPoint[];
/**
 * 获取贝塞尔曲线垂直方向的控制节点
 * @param fromPos 起始点
 * @param toPos 终点
 */
declare function getBezierVerticalControlPoints(fromPos: IPoint, toPos: IPoint): IPoint[];

interface BezierData {
    fromPos: IPoint;
    toPos: IPoint;
    bbox: Rectangle;
    controls: IPoint[];
    bezier: Bezier;
    path: string;
}
declare class WorkflowBezierLineContribution implements WorkflowLineRenderContribution {
    static type: LineType;
    entity: WorkflowLineEntity;
    constructor(entity: WorkflowLineEntity);
    private data?;
    get path(): string;
    calcDistance(pos: IPoint): number;
    get bounds(): Rectangle;
    update(params: {
        fromPos: IPoint;
        toPos: IPoint;
    }): void;
    private calcBezier;
    private getPath;
}

interface FoldData {
    points: IPoint[];
    path: string;
    bbox: Rectangle;
}
declare class WorkflowFoldLineContribution implements WorkflowLineRenderContribution {
    static type: LineType;
    entity: WorkflowLineEntity;
    constructor(entity: WorkflowLineEntity);
    private data?;
    get path(): string;
    calcDistance(pos: IPoint): number;
    get bounds(): Rectangle;
    update(params: {
        fromPos: IPoint;
        toPos: IPoint;
    }): void;
}

interface StraightData {
    points: IPoint[];
    path: string;
    bbox: Rectangle;
}
declare class WorkflowStraightLineContribution implements WorkflowLineRenderContribution {
    static type: string;
    entity: WorkflowLineEntity;
    constructor(entity: WorkflowLineEntity);
    private data?;
    get path(): string;
    calcDistance(pos: IPoint): number;
    get bounds(): Rectangle;
    update(params: {
        fromPos: IPoint;
        toPos: IPoint;
    }): void;
}

interface ArcData {
    fromPos: IPoint;
    toPos: IPoint;
    path: string;
    bbox: Rectangle;
}
declare class WorkflowArkLineContribution implements WorkflowLineRenderContribution {
    static type: string;
    entity: WorkflowLineEntity;
    constructor(entity: WorkflowLineEntity);
    private data?;
    get path(): string;
    calcDistance(pos: IPoint): number;
    get bounds(): Rectangle;
    update(params: {
        fromPos: IPoint;
        toPos: IPoint;
    }): void;
    private calculateArcBBox;
    private getArcPath;
}

interface ManhattanData {
    points: IPoint[];
    path: string;
    bbox: Rectangle;
}
declare class WorkflowManhattanLineContribution implements WorkflowLineRenderContribution {
    static type: string;
    entity: WorkflowLineEntity;
    constructor(entity: WorkflowLineEntity);
    private data?;
    get path(): string;
    calcDistance(pos: IPoint): number;
    private getDistanceToLineSegment;
    get bounds(): Rectangle;
    update(params: {
        fromPos: IPoint;
        toPos: IPoint;
    }): void;
    private getManhattanPoints;
    private getPathFromPoints;
}

export { type ArcData, BezierControlType, type BezierData, type FoldData, type FreeLinesPluginOptions, LINE_OFFSET, LINE_PADDING, type LineRenderProps, WorkflowLinesLayer as LinesLayer, type LinesLayerOptions, type ManhattanData, type StraightData, WorkflowArkLineContribution, WorkflowBezierLineContribution, WorkflowFoldLineContribution, WorkflowLinesLayer, WorkflowManhattanLineContribution, WorkflowPortRender, type WorkflowPortRenderProps, WorkflowStraightLineContribution, createFreeLinesPlugin, getBezierHorizontalControlPoints, getBezierVerticalControlPoints };
